Welcome to the Twimal AI Podcast.
I'm your host Sam Charrington.
Before we get to today's show, a quick plug for the TwimalCon AI Platform's video packages
that we've currently got available for pre-order.
If you're working in an organization where productivity, efficiency, or scale of your
machine learning efforts matters, please hit the pause button and check out TwimalCon.com
slash videos, where you can take a look at what we've got on offer.
While I could list a ton of reasons why you should get these for yourself or your team,
instead I thought I'd share a few of my favorite attendee quotes.
Very, very relevant for my day-to-day work.
Total information for those trying to scale AI in their organization.
If you were to plot out quality versus density, this is up and to the right.
Pre-order pricing goes away as soon as we get the videos posted, which is likely within
a week.
So don't miss this opportunity to get a great deal on this amazing resource and of course
to support your favorite ML&AI podcast.
Once again, visit twimalcon.com slash videos for more information on individual and team
pricing.
All right, on to the show.
All right, everyone.
I am on the line with Aaron Ma.
Aaron is in the sixth grade and he is 11 years old.
Aaron, welcome to the Twimal AI podcast.
Thanks you for having me, Sam.
I really can't explain how excited I am to kind of dive into this conversation.
One of your many accomplishments is just the amount of dedication and accomplishment
you've invested in learning machine learning.
You've got three Udacity nano degrees on the topic and you've done 80 Coursera courses.
Let's just start out by having you share a little bit with us.
How did you initially get interested in machine learning and artificial intelligence?
Okay.
So first of all, I'm going to type out how I got started into computer science first
of all.
So when I was five, I got my first computer, which was a handy nail for my dad.
And it's an IMF 2008 with 2.4 gigahertz and 2 gigabytes of RAM.
So at first, I would be doing educational stuff like grads, kids, extramaths, Google
classroom, etc.
But then one day, I thought, hmm, how does this computer work?
Does it use images, screenshots?
Hmm.
So I decided to ask my dad and my dad said it was based on coding.
So I decided to learn coding.
So the first thing that I remember learned is HTFL, which is a great language for building
websites.
But then I faced a major disastrous problem.
It's because if I just use HTML, all I have is black and white.
And I want my users on my website to have a rich, detailed experience.
So I decided to learn CSS to create a rich story and make it more colorful on the website.
And then I learned JavaScript to make my websites more dynamic.
And I'm proud to say that the first website I've ever made using HTML, CSS, and JavaScript
is my to-do list, which is basically a web app where you can create, delete, insert,
remove all of her to-do, and it's all stored in your browser cache.
And also around that time, my dad took me to my dad's coworker's party.
So during the party, one of my dad's coworkers brought the materials for s'mores, like
graham crackers, chocolates, and etc.
So I decided to make myself useful by using those s'mores materials to actually make s'mores.
So a lot of people ate s'mores because I made them.
Then my dad's coworker, called Jeremy, came up to me and said, you should make a website
if you're so interested in making s'mores.
I thought, hmm, I shouldn't do that because since I'm interested in you programming, and
I was a low-micky s'mores, I shouldn't make a website on it.
And I decided to call it the Roasting Company.
The Roasting Company?
Yep, Roasting Company.
But then when I told Jeremy that I was going to use HTML, CSS, and JavaScript, he was
like, no, no, no, you should use Angular.
Yes, everyone's new favorite writing framework.
So the first thing I did when I came home was go to plurersight.com and search Angular
tutorials.
And I've learned Angular from industry experts like Deborah Carrotta and John Papa.
So then I learned Angular and also the Angular router and also Angular material.
And also after learning Angular, my dad took me to my first Angular meetup, and I should
also say my first meetup.
So during the meetup, did I get this, how old were you when all this happened?
So that time I was not when I went to my first meetup, Angular meetup.
And during the meetup, there was the native script team who came in and during the middle
of the meetup, there was a native script deputy because the native script team was there.
So they asked for volunteers to play the native script deputy.
And when they asked for volunteers, literally nobody in the entire room raised their hand,
literally nobody.
So I decided to raise my hand on volunteer.
And three more adults came in and joined me.
At first, everyone was like, ha, this is such a joke.
But that after entering the first question correctly, which is, what is the native script
command line to a call, which I answered T and S, and also answering a few more questions
correctly?
Everyone in the audience was like, I knew that I could actually program.
So one of the people on the native script team called Sebastian Metallic was pretty impressive
to me.
And he asked me, do you have a Twitter, so he could follow me.
And I said no, because what could a nine-year-old learn Twitter from?
So the first thing I did when I came home from that meetup was going to Twitter and creating
a Twitter account.
And Sebastian became my first follower.
So if you're listening to this podcast right now, thank you, Sebastian.
Shout out.
What's his Twitter handle?
Do you remember?
I think it's Sebastian Metallic.
And then after a few more months of going to more angular, learning more about angular,
that's a great presentation in August of last year, when I woke up, my dad told me that
I should learn machine learning and AI, because it's going to be the future.
And I always want to be able to keep up with the future.
And also the second reason I wanted to learn machine learning AI was because you can
make mula from it.
So is your dad into machine learning or programming?
He's interested, he's into programming, but he's not into machine learning AI.
He does Friday.
Okay.
So the third reason that I wanted to learn machine learning and AI is because we can save lives
using machine learning and AI.
For example, one day, if we have a machine learning power robot that could perform surgeries
or detect cancer, people who are living in poverty can actually afford cheap medical care.
So basically, everyone can have access to medical care, even people who are in poverty.
So these are the three main reasons why I wanted to learn machine learning.
So that I went to youtube.com like every other kid out there and searched machine learning
tutorials and from machine learning tutorials online, I actually started to learn machine learning
pick up basics.
What was the first thing that you learned?
The first thing you learned was Python.
Okay.
So you didn't have any exposure to Python before you started studying machine learning?
Yes.
So then from there, after learning Python, I started to learn the types of machine learning,
the fields of machine learning, and also tenser flow.
And I chose central because it's backed by Google, it's open source and free, and it has
a large environment community, it's in demand, it's also easy to use, compatibility across
so much platforms, there's also tenser board and also has integrations, auto differentiation
and is even better than PyTorch for research to production.
So after learning TensorFlow, I wanted to share my knowledge of TensorFlow.
To the front-end community, because at that time that's all in the front-end community.
So the problem is that most of the people in the front-end community only knows JavaScript
and they don't know Python, so if they don't know Python, how do they know TensorFlow?
So I needed a way to get TensorFlow for JavaScript, first I was like, oh no, I'm going to have
to create my own npm page, and I'm going to have to maintain it, etc. But then luckily
I Google TensorFlow for JavaScript, in which I got the result of TensorFlow.js, and I was
pretty lucky because they just released it about a year ago during that time.
So I was pretty lucky on searching that one, and since I already know TensorFlow, if there
be no TensorFlow, when you learn TensorFlow.js, all I take you is about 30 minutes to learn.
All I have to do is learn how to install TensorFlow.js, how to call some of the core stuff in TensorFlow.js,
and you have to learn the differences between the syntax differences.
For example, in TensorFlow, you use print, the default native Python print.
When it didn't JavaScript with TensorFlow.js, you have to use TensorFlow.js as print statements,
stuff like that.
This maybe it paused there.
There's a ton in the learn between Python and TensorFlow.
Tell me a little bit more about that path.
What were some of the things that, I mean, you first have to start with simple linear
regressions and things like that.
What were some of the things that you learned, and how did you learn them when you were first
getting started with machine learning?
To be honest, most of this, I'm still a beginner in machine learning, because there's a lot
of math I still don't know right now.
Since there's such a wide array of stuff to learn.
So I'm always still learning more about machine learning and linear regression.
I'm still learning more about it, but in TensorFlow, and also Python, I know kind of like implement
it.
Basic packages, like NumPy, which is numerical, Python, numerical expressions in Python, you
know, other Python math libraries.
So in general, I'm still learning more about the math behind machine learning than always
learning.
So right after learning TensorFlow.js and TensorFlow in November of last year is when I started
to think about my Christmas presents, like every other kid, because in November of each
year, it's always close to the holiday season.
And every single kid starts thinking about their Christmas presents.
So I also think, hmm, I've got to become a self-driving car engineer, but there's no
place on the internet where it can learn it from.
I googled it and I found, yeah, Google.
So I found a Udacity self-driving car engineer management program, which is the advanced
level.
And there's also the self-driving car, I'm sorry, intro to self-driving cars, which is
the beginner slash intermediate.
So in that time, which was last year, it's November, Udacity is like $1,200 per semester
I think, yeah, around that price.
Although I think I'm already lowered it to around 160 per month now.
So basically during that time, it was pretty expensive and I wanted to save my family's
money.
So I decided to basically take a look at the intro to self-driving cars to see what they're
going to teach you.
So basically, so what they're going to teach you, they're going to teach you Python and
C++.
So since I already know Python, I decided to just learn C++ to make up for the intro to
self-driving cars.
So you can save my family's money.
So after learning C++, I enrolled into the self-driving car in your nanodegree program.
And two days, I think three days.
How many courses in that nanodegree program?
In a nanodegree program.
It's not sorted by courses.
It's sorted by lessons.
Okay.
So in a nanodegree program, I think they have around like 16 lessons, depending on your
nanodegree program.
Got it.
So about three days before the start of my self-driving car engineering nanodegree program,
I received an email from the Dassy legal team saying, we're sorry, but due to your age
that you're under 18 years old, by law, we have to legally terminate your nanodegree
enrollment.
At first, I was really frustrated because they're like breaking my dream because I really
wanted to be a self-driving car engineer.
So I googled on the internet for Sebastian through his email.
In case people don't know, Sebastian through is the CEO and founder of Udacity at that
time, although he sadly loved Udacity in June of this year.
So after two days of searching the internet, I came across
Sebastian through his email and there was like over 10 emails.
So first of all, I'm not going to send spam to them.
So I'm not going to send it to all of his emails.
So I decided to just send him to his Udacity email because that's the email he most likely
will check every single day.
So if you're sending him an email, I received an email from him, which stated, start and
finish and you make my day.
And then Gina, who's an employee at Udacity, actually CC the Udacity legal team, which
meant that the legal team had to hire a lawyer to write a form stating that I gave my child
error permission to use Udacity services, etc, etc.
And so in January of this year, that's when I basically started the self-driving engineer
nanodegree program.
So in the first term and out of two terms, because Udacity sorts their content by terms.
So in the first term, I learned about perception, localization and computer vision.
And although I didn't make the February deadline, I made it into the March deadline, which
meant I could enroll to term two.
So in terms two, I actually learned functional safety, control, path planning, and also building
a real self-driving car using the robotic operating system or Ross for short.
So in June of this year, June 18, I should say, of this year, that was the last day of
which I was supposed to graduate on the morning of that day.
I saw that I sent emails to Udacity's graduation team, but I still didn't receive a reply.
So I decided to drive there to Udacity's headquarters.
So at the headquarters, basically, I told them that I already completed all of the projects,
all of the parts stuff.
And I already sent them three emails to the Udacity graduation team, but I didn't receive
a reply.
So basically, they helped me by using their email, Udacity emails, to send it to the Udacity
graduation team.
And about like five minutes later, after sending that email, basically, they said, congratulations,
you graduated from Udacity, self-driving heart engineering management program.
And I was really excited.
During my time at the Udacity headquarters, I met the David Silver, who is the content
creator of the Udacity self-driving heart engineering management program, and also the lead
of the house of autonomous systems at Udacity.
I also saw Vienna Harvey, who is the owner of Udacity's own self-driving car, which they
call it, Carla.
And during my experience on the self-driving car, Carla, I was able to get hands on with
the car.
For example, I set up the camera, the lighters, the radars, and also running scripts on it,
you know, so taking a look at the lighters stuff.
And also basically checking out the code that they have written.
And to me, I think it's like a wow, and you take a look at the car.
Can you share a little bit of what you learned in the like the first semester of that nanodegree?
You mentioned that you were studying perception and localization and vision, and I know there's
a lot of math in those classes that you probably didn't get into.
But what were some of the main things that you were able to take away from the class?
The main things.
Well, I'd say, for example, in the computer vision part of the first semester, they taught
us about unmistoric images, which I've never heard of before, because all I knew was
like cameras are the best, because for example, you can see everything of cameras, but they
said no, you can't see everything of the camera, or visually, everything in cameras is already
distorted.
So you actually have to write an algorithm for unmistoric images, so they did teach us
the algorithm for understanding the images, and they taught us how to write code for it.
Well, actually not writing code, just teaching us how to abort the CV2 library, which already
handles the unmistored algorithm for us.
And for the perception part of it in the first semester, I'd say I learned about all the
different centers that come with perception.
And also what's perception?
Perception is basically connecting all those centers together, fusing them, which I also
learned how to fuse all of that data together.
For localization, I learned how to basically what localization is.
They taught us that localization is basically comparing the objects around the car, using
a lighter, with the objects in high-definition map, and you have to use localization for
self-during cars, because high-definition maps has about 10 centimeters or more of errors.
And when you're building a self-during car, you can't afford any errors, because by the
time that you're already fixed those errors, or you don't even fix those errors, it's
going to be too late.
You're probably going to collide in objects or something.
So you're going to have to use localization to make sure that you have one centimeter of
error or less.
So...
And did you learn different localization algorithms, or is there just one way to do it?
We learned about common filters, extended common filters, and also unscented common filters.
And I think my favorite would be, I'd say, the unscented common filters.
Unscented?
Like, smell?
What?
Unscented.
It's basically better than scented, because it's kind of, to me, I think it's more faster.
So because when you're developing self-during cars, you want it to be as fast as possible.
Because if it's going to be too slow, then you can fix a huge problem, and enough cars
not going to be able to respond in time.
So to me, I think the unscented common filters is the best.
And so what is the common filter doing?
How does that help you localize?
Well, it's basically just comparing the lidar measurements to the high definition map.
And if it's too far or too close, then it knows it's in the wrong place.
And it's going to have to reposition itself with the control, which I learned in the second
semester.
Got it.
So the first semester was all about trying to figure out where the car is, and the second
semester is all about control system, and building a real second car with Ross.
In the first class, when you're doing the perception and the common filtering stuff,
like, are you doing that in notebooks, or IDEs, or are you doing it with like actual cars
or simulations?
What were some of the things you were using?
So in the computer vision part, we use Jupyter notebooks.
It's basically like the industry standard right now.
And for the perception and also the localization, also for term two, we basically use VS Code.
Okay.
And so you need to bring notebooks basically switched to visuals to a code and determine
them.
Okay.
Cool.
So tell us about the second semester.
So during the second semester, I learned about control and basically how to control the
car and the controlling part.
We actually got hands on with a simulated environment, basically control a car in the simulated
environment.
Although after trying multiple times my car still like jerk left to right sometimes, but
overall, I think it was a pretty great experience.
But after like about like 55 tries or something, I finally got it to be got it more precise.
Okay.
Finally, it's driving straight to the jerking left and right.
Now I was a lot older than you when I was learning about control systems.
I was in grad school and it was mostly analog stuff.
If I remember correctly, like PID controllers, is that something that came up in your class?
For personal integral, they're riveted, right, right, right.
Is that tech used in self-driving cars?
Sounds like yes.
It's yes.
Although people are now developing better control algorithms.
What are some of the better ones?
Some of them I haven't heard any of them, but I have heard that people are trying to
develop them.
Got it.
Got it.
Because it's still like really hard to develop something new because right now self-driving
cars, it's really hard to develop because you have to be sure to safety, reliability and
a bunch of different factors.
You mentioned that functional safety was one of the topics.
What does that mean?
Basically, safety of your vehicle, learning about how to make your vehicle really safe and
also vehicle stuff.
For example, if you're going to build a real self-driving car, you're going to need to create
a functional safety PDF file when we learn about ISO 26262, which basically is the functional
safety standard autonomous vehicles.
How about the path planning piece?
The path planning.
We basically created a proportional integral derivative controller, which would drive in
a highway, which could drive by itself in the highway.
And for the final project, the cash sum project, which was built a real self-driving car, we
had to form like a team.
So I set up to become a team leader in like within 24 hours, like over 10 people wanted to
be in my team.
Because I had like, cut it out, five or six people, because there's a team limit.
There's a limit of how many people can be in your team.
Okay.
So in my team, I assigned everyone to their unique role.
So I was the person who wrote the Roscoe because I'm good at Ros, and I assigned one person
to work on the functional safety, one person on writing the readme file on how we created
it.
All the person writing the readme file for the Roscoe, how we linked our Roscoe together.
So had you already been exposed to Ros prior to the course, or did you learn it in the course?
I've been exposed to Roscoe before the course even happened around February, 2018.
That's what I started.
How did you get connected to or find out about Roscoe?
I was in February of 2018, and this really crazy idea of building a robot, though it never
actually happened.
It was pretty sad because first of all, you need a $500,000 to build a robot, and then you
need to buy all these hardware components, and then you have to wire all these up, program
all of these, and test it, and sell it to a user for profit.
So you wanted to build a big robot?
Yet like a robot that could help you in your house though or something.
Oh, wow.
Right now, I can only test it in simulators, because it's too expensive to build a real
robot with hardware and stuff.
Have you ever built any small robots?
I've built a Arduino robot, but the problem is that I accidentally bought the wrong wheels
so it could only go forward, which was a bad choice in the making.
I think the robots are a lot more interesting if they can turn, right?
Right.
You just, if it can't turn, eventually it's just going to collide with some object.
Cool.
So you're a second semester functional safety path planning, capstone projects.
What was the capstone project?
The capstone project was a building, a real sell chain car.
Okay.
That's just what you'd ask you to call a capstone project to make it like more engaging
for people who want to enroll in the naming program.
Got it.
And what, this is a simulated self-driving car I'm assuming?
Yes.
All simulated, because if you're building a real sell chain car with rods, then you're
going to have to, like, you're going to have to buy some sort of software rods for
sell chain cars or something.
So you guys, he doesn't want us to like pay for like a real sell chain car stuff.
So they just basically create a simulated environment for us.
And so how did the capstone project turn out?
Pretty good.
It turned out pretty good.
Like we passed all of our projects, but there's only one problem that I sign up my team
up for the lottery to test our code on the real sell chain car for Carla, because you
actually has this sign up form where you can basically test your raw code on their autonomous
vehicle, Carla.
So they've already paid for the raw middleware for real selling cars.
Okay.
So they already put it on their car, they've already set that up.
So they have to just put your code on it.
But sadly, my team didn't win the lottery.
Oh, no.
So we never actually had a chance to test it on it.
Oh, that's too bad.
Right now, I'm trying to build a self-driving car that doesn't use Ross.
Okay.
What will your self-driving car use?
Well, I'm planning to basically create my own sort of robotic operating system or something.
So I can have more flexibility on it.
It's going to be designed and specifically designed and tailored for self-driving cars.
So Ross is used in lots of different types of robots to your point, not specifically tailored
for self-driving cars.
What are some of the ways that your operating system will be more suited for self-driving
cars?
First of all, I think that I'm going to make this self-driving car operating system that
could basically fuse all the data together and also connect all of these nodes of these
stuff together and also make it open-source and second of all.
I also plan to basically have some sample code ready.
Basically, if you only know how to build a hardware car, there's already software written
out for you.
So all you have to do is put the software on your car, which already has the hardware,
which I think is the best way for people to get quickly their self-driving cars.
So you don't have to do your own software.
Very cool.
I get the impression that that's just one of many projects that you're probably working
on or thinking about.
Are there others?
There's a lot.
In fact, right now, I'm also learning how to make a flying car, a flying car.
Which I don't think is going to be a reality.
Is there a nano-degree specialty for flying cars, too?
Yep.
The flying car nano-degree program.
Oh, really?
Have you started that one?
No.
I haven't started that one yet.
So all of these three Udacity nano-degree 80 Coursera core certificates, what are your
top three favorite classes?
Well, my first learning would be the self-driving car engine and nano-degree program from Udacity.
Okay.
My second pick is the AI for trading nano-degree program from Udacity.
AI for training?
Trading.
Trading for trading.
Oh, so that's how you're going to fund your self-driving car is through trading.
I'm investing stocks all day.
I'm going to have a bot that's just going to keep buying, selling stocks all day long.
My third of all is, I would say, the deep learning AI specialization on Coursera.
The deep learning AI.
What are some of the courses in that specialization?
I'm sorry.
The deep learning AI TensorFlow specialization.
Ah.
Okay.
Okay.
Okay.
TensorFlow specialization.
How many classes in that specialization?
There's four.
Four.
And what are they?
So basically, those four courses in the specialization teachers, you all about
TensorFlow 2.0, but basically, it starts off with videos of really simplified stuff about
TensorFlow.
And then there's quizzes doing enhancer learning, and they provide a Jupyter Notebook
lab environment, where they teach you the core concept of TensorFlow 2.0.
So it's basically like this for all four courses.
And I would say the first course is my favorite, because they're actually live interviews
from Andrew and Jean, who's the founder of Coursera, and also who's like really good
into TensorFlow 2.0.
So I'm pretty inspired by him on the interviews inside the first course of the specialization.
He is a very inspiring, very inspiring individual, like an interpreter in this field.
Absolutely.
You mentioned that you go into these courses, a lot of machine learning courses have a
lot of math.
Some of it is beyond your current ability.
How do you approach a course so that you can get something out of it, even when there's
potentially a lot that you don't understand?
What's your approach there?
Well, my approach to that would be basically, first of all, reviewing the lectures a lot,
first of all.
And second of all, if I don't know about the math behind it, I would try to basically learn
at least how to implement it, basically implement it using some open-source packages, because
there's always an open-source package for some sort of math for something in machine learning.
So I would try to learn how to implement it.
And basically from there on, after learning how to implement it, I would find some time
later on to basically learn the math behind it.
And what's an example of something that you initially, like you just couldn't get the
math behind it, you hadn't seen it before, and you took this approach, and today you
understand it because of that approach.
Well, I'd say about the proportional integral derivative, ID.
Okay.
And I basically learned how to implement it in C++, and learned some of the math behind
it.
Because there's still a lot of math, there's still a lot of math that I still need to learn
more about it.
But right now, some of it already understand, and yeah, so it's always still learning.
What parts do you understand now, what parts do you still not understand?
So for example, the proportional part in the integral part, I understand, the derivative,
I still don't know how to implement that one, and also in the math behind it.
Okay.
I'm always learning, I'm never sitting there like relaxing, I'm always learning, always
improving every single day.
And do you study math also, or what kinds of math do you study, or how do you study it?
I study math, so right now currently on math, I'm studying, trying to study linear regression
if I have the time from then.
Okay.
So I've found a bunch of great Yasi courses teaching on that particular subject.
Okay.
So all of this, this amazing study you're doing with machine learning, how do you balance
it with like school and chores, and all the things that I'm imagining you also have
to do?
Well, I balance it, because first of all, the good thing about school is that they give
like not a lot of homework.
Okay.
I can finish my homework in like five minutes, they don't give a lot of homework these
days.
Okay.
And for my chores, I don't have a lot of chores, for example, I have to do is take the
laundry, sometimes wash dishes, clean the table, sweep the floor, basically, those are
my chores.
And after completing them between school and all my chores, then I have free time to
basically study more of machine learning.
Got it.
And I think you also have done some Kaggle competitions, what's your experience been
there?
How many of you done?
So far, I've done 35 Kaggle competitions.
35, wow.
Although, sadly, I haven't won any medals on it, but I don't really care if I don't
earn any medal or anything, because I think it's a really great learning opportunity
for me.
Because on Kaggle, I can actually learn from my mistakes and also learn from the people
who actually won the competition, because after the competition, I go through the kernels
and actually see how they implement their way of doing that.
There's also another thing I got, although Kaggle, I learned stuff from it.
There's also another thing I don't like about Kaggle.
For example, in the free sound audio competition, which ended about three months ago.
So I earned number one on the public leaderboard, and just one try.
Although on the public leaderboard, I was like number one on the private leaderboard, I
was like at the end, I'm like 393 and a 408 people.
And you were doing the competition while it was still active?
Yes.
So I already submitted it before they merged from public to private.
Okay.
So I don't really like how they judge your competitions.
They only release this little bit of test data set.
But most of the test days that they don't release it, which I don't think is very fair.
Just for example, someone who has a really bad model, I'm telling them basically thinking
like go like top 100 or something on the private leaderboard, get your models like bad
or something, or maybe good on the unshown portion of the test data set.
So that's just one of the things they don't like about Kaggle.
But in general, I'd say Kaggle is a great learning opportunity, and I'd recommend it
for everyone.
Oh, and I just forgot to mention, for people who are interested in learning, which you
learned, but don't know where, go to Kaggle.com slash learning.
Kaggle.com slash learning, good resource for getting started.
Yep.
There's good resources for learning Python.
Also, there's also instructor called Alex, who's like a really good into machine learning.
And she has a bunch of machine learning courses on Kaggle, free of charge.
And also the content, I saw the content is really, really good.
And also some of the courses were actually made with in partnership with like grandmasters
on Kaggle.
Nice.
So what's your favorite type of machine learning?
Well, it used to be super-wise learning, but now I definitely say reinforcement learning.
Okay.
And why do you like reinforcement learning?
Well, I like reinforcement learning because you can basically do anything with it.
For example, if you're training a robot and you're using machine learning for it, you
don't need any data.
So you just use reinforcement learning and the robot will learn from its trial and error.
And after a trial and error, basically every single time is going to be like really good
and still going to be improving every single day.
So basically, you're just going to have to implement your model once and then you can sit
back and relax while you see a robot doing this task that you told it to in your machine learning
model.
Do you know what the hard part of reinforcement learning is?
Like figuring out what your cost function is, your optimization function.
Do you get into that level of detail with it?
Not yet.
Okay.
It's pretty awesome that you even know what it is though.
Do you have a lot of friends who know what reinforcement learning is?
Not a lot.
There's not a lot of resources I'm learning reinforcement learning.
So I think for reinforcement learning, you still need to learn more about it.
There's a lot of stuff I don't know about reinforcement learning.
Have you done any projects with it?
So far, I've only done like two, I think, yet two.
What were the projects?
Which was basically finding good bananas in a simulated environment.
So there's good bananas and bad bananas.
Okay.
Your task is to train an agent to basically find the good bananas and pick that up and
put it into your basket of your good bananas and don't collect any bad bananas.
That's the first project.
And the second project I did was basically train an agent to play tennis, to play tennis
with another train agent.
Like pong or like real tennis or something.
Basically, real tennis in a simulated environment, of course.
So the simulated environment was provided by Unity.
So you only have to train your agent.
The other agent is provided by Unity.
So you only train one agent and there's two agents in the game.
So the other agent is provided by the Unity app.
Well, this has been such a fun conversation.
It's so exciting to hear about all the amazing things you've been doing, learning about machine
learning and AI.
Are there any other things that you want to be sure to share with us?
I was also say after my radacity network program, I was also really thrilled and honored
to be invited by Lawrence Morty at Google's TensorFlow team because I came the youngest
TensorFlow contributor and I basically changed the re-mean.
But most of the re-mean on TensorFlow's GitHub page was written by me.
So I tweeted it out on Twitter after I verified that.
It was like 300 likes and 30,000 impressions on the first thing.
So basically, Lawrence Morty, who's the developer advocate for the Google's TensorFlow
project, basically invited me to Google's TensorFlow team to basically learn the inside
and out of how they develop TensorFlow and also have a chitchat on the future of TensorFlow.
I'm also recently been really honored to be invited by Cruz to Cruz headquarters.
So in case you don't know, Cruz is basically a self-driving car company and is based in
San Francisco.
Yeah, I actually interviewed the head of machine learning and AI at Cruz at a conference
that I recently did, very, very cool guy.
You should listen to that interview.
In the twin AI conference?
That the Twomalcon conference, yep.
I see.
So, Cruz basically got to be a bunch of really smart engineers and talked about how they
developed their filtering cars and also about how they create their hardware and their
sensors.
Okay.
And overall, I think it was a really great learning opportunity for me.
Awesome.
You know, I forgot to, I can't believe I almost forgot to mention is you've also founded
a whole bunch of companies, Firebolt, Firebolt Space Agency, Dopey Lopey and Snap Auto.
What are these companies?
So I don't work on Dopey Lopey or Firebolt Space Agency anymore.
Okay.
So right now, I'm only focusing on Firebolt Inc and Snap Auto.
Firebolt Inc is a machine learning slash AI company that basically does machine learning
for humans.
So, he uses machine learning to improve human lives.
Example of one of the projects I'm working on in Firebolt is called Project Aurora, which
is scheduled to be the first beta version is scheduled to be released in around July
of 2022.
So, Project Aurora is basically a way of online website, which I'm developing right now,
but where you, it can predict cancer.
So, for example, if you don't know if you have skin cancer or not, take a photo of that
piece of skin that you think that might have skin cancer and upload it to Project Aurora's
website.
And then it can tell you if you have skin cancer or not, this is one of the things that
we're getting at Firebolt and Snap Auto is basically a company which focuses on autonomous
stuff.
Anything that's autonomous.
Okay.
For example, flying cars, autonomous vehicles, robotics, anything that's autonomous because
I love autonomous stuff.
And do you, is it kind of just you working on this or do you have a team working with
you on these companies?
On Snap Auto, I'm the only person because not a lot of people know self-driving cars,
flying cars, or robotics.
Okay.
Which is a problem.
Uh-huh.
Absolutely.
But for Firebolt, a corporation, I have a team, but I have my dad, me, and also one of
my friends.
Very cool.
Very cool.
Thank you.
Well, Aaron, was again, thank you so much for taking the time to chat with us and congrats
on all your accomplishments in machine learning.
You really are an inspiration to folks that are interested in this field and learning.
There's so much to learn here.
Thanks for everything you're doing.
Thank you.
Also, right before I leave, I have some acknowledgements, I would you say?
Please.
Okay.
First of all, I'd like to thank Sebastian Whittellick, Sebastian Thrune, Vienna Harvey, David
Selmer, Lawrence Mourney, and also Sam Tarantin, and also my family who's been really supportive
and also much more mentors.
And I really bless to work with all of you.
Thank you.
Awesome.
Thanks so much, Aaron.
Thank you.
All right, everyone.
That's our show for today to learn more about this episode, visit Twomla.com.
Once again, if you missed Twomla.com or want to share what you learned with your team, be
sure to visit twomla.com slash videos for more information about our video packages.
As always, thanks so much for listening and catch you next time.
