1
00:00:00,000 --> 00:00:16,000
Hello and welcome to another episode of Twimmel Talk, the podcast where I interview

2
00:00:16,000 --> 00:00:21,400
interesting people, doing interesting things in machine learning and artificial intelligence.

3
00:00:21,400 --> 00:00:24,200
I'm your host Sam Charrington.

4
00:00:24,200 --> 00:00:29,200
This week, I'm happy to bring you my interview with Calvin Seward, a research scientist with

5
00:00:29,200 --> 00:00:31,800
Berlin-Germany-Based Zalando.

6
00:00:31,800 --> 00:00:36,360
Now, our American listeners might not know the name Zalando, but they're one of the largest

7
00:00:36,360 --> 00:00:41,080
e-commerce companies in Europe with a focus on fashion and shoes.

8
00:00:41,080 --> 00:00:46,060
Calvin is a research scientist there, while also pursuing his doctorate studies at Johannes

9
00:00:46,060 --> 00:00:49,400
Kepler University in Linz, Austria.

10
00:00:49,400 --> 00:00:54,080
Our discussion continues the Industrial AI series here on the podcast, and focuses on

11
00:00:54,080 --> 00:01:00,240
how Calvin's team tackled an interesting warehouse optimization problem using deep learning.

12
00:01:00,240 --> 00:01:02,560
Before we dive into the show, take note.

13
00:01:02,560 --> 00:01:08,400
This is the last podcast before we give away not one, but two tickets to the AI conference

14
00:01:08,400 --> 00:01:13,080
in San Francisco, brought to you by O'Reilly and Intel Nirvana.

15
00:01:13,080 --> 00:01:17,360
If you've listened to the podcast for a while, you already know that this is one of my favorite

16
00:01:17,360 --> 00:01:21,960
events, and you've already heard some of the great speakers that it attracts.

17
00:01:21,960 --> 00:01:26,000
If you'd like to attend, now is the time to enter our giveaway.

18
00:01:26,000 --> 00:01:31,080
Folks really seem to like our new Streamline contest app that makes it super quick to make

19
00:01:31,080 --> 00:01:33,640
up to 10 contest entries.

20
00:01:33,640 --> 00:01:40,920
To get your entries in, just hop on over to twimmelai.com slash AISF, and stay tuned for

21
00:01:40,920 --> 00:01:44,400
our announcement of the winners on next week's show.

22
00:01:44,400 --> 00:01:51,120
And now, a quick shout out to our sponsors, bonsai, and wise.io at GE Digital.

23
00:01:51,120 --> 00:01:55,960
If you've heard me mention bonsai before, bonsai offers an AI platform that lets enterprises

24
00:01:55,960 --> 00:02:01,280
build and deploy intelligent systems for industrial applications and more.

25
00:02:01,280 --> 00:02:06,280
Banzai's platform lets enterprises develop robust machine learning models that improve

26
00:02:06,280 --> 00:02:11,000
system control and enhance real-time decision support.

27
00:02:11,000 --> 00:02:16,120
Their platform also automates the management of deployed machine learning applications,

28
00:02:16,120 --> 00:02:20,960
allowing businesses to use them to increase automation and improve operational efficiency

29
00:02:20,960 --> 00:02:26,800
of industrial systems, including robotics, manufacturing, supply chain, logistics, energy

30
00:02:26,800 --> 00:02:28,520
and utilities.

31
00:02:28,520 --> 00:02:34,640
You can find more information about bonsai and their early access program at bonds.ai slash

32
00:02:34,640 --> 00:02:36,440
twimmelai.

33
00:02:36,440 --> 00:02:42,200
And undoubtedly you know GE, but did you know that GE was a software company too?

34
00:02:42,200 --> 00:02:47,240
GE Digital is a leading software company focused on solutions for the industrial internet

35
00:02:47,240 --> 00:02:52,440
of things, and is reimagining industry's infrastructure for connecting software, apps

36
00:02:52,440 --> 00:02:55,840
and analytics to industrial businesses.

37
00:02:55,840 --> 00:03:00,880
GE Digital creates software powered by their predix platform to design, build, operate

38
00:03:00,880 --> 00:03:06,480
and manage the entire life cycle of physical assets, enabling industrial businesses to

39
00:03:06,480 --> 00:03:09,840
operate faster, smarter, and more efficiently.

40
00:03:09,840 --> 00:03:15,760
The wise.io team, now part of GE Digital, is building industrial machine learning applications

41
00:03:15,760 --> 00:03:17,960
for GE and its customers.

42
00:03:17,960 --> 00:03:23,720
For more information about GE Digital, visit GE.com slash digital.

43
00:03:23,720 --> 00:03:25,760
And now on to the show.

44
00:03:25,760 --> 00:03:37,120
All right, everyone, I am on the line with Calvin Seward.

45
00:03:37,120 --> 00:03:43,160
Calvin is a Berlin Germany-based research scientist at Zalando, and he's also pursuing

46
00:03:43,160 --> 00:03:47,360
his doctorate at Johannes Kepler University in Lens Austria.

47
00:03:47,360 --> 00:03:49,320
Calvin, welcome to the show.

48
00:03:49,320 --> 00:03:50,320
Welcome.

49
00:03:50,320 --> 00:03:55,720
Folks, who are listening to the show know that I was recently in Berlin, and I am in fact

50
00:03:55,720 --> 00:04:00,560
connected with you while I was in Berlin, but unfortunately we weren't able to connect

51
00:04:00,560 --> 00:04:03,000
locally, but we're connected now.

52
00:04:03,000 --> 00:04:08,800
So I'm really looking forward to diving into our topic today, which is some work that

53
00:04:08,800 --> 00:04:13,680
you did not too long ago on warehouse optimization.

54
00:04:13,680 --> 00:04:18,720
But before we dive into that, why don't we spend a little bit of time having you introduce

55
00:04:18,720 --> 00:04:20,720
yourself to the audience?

56
00:04:20,720 --> 00:04:21,720
Yeah, thanks.

57
00:04:21,720 --> 00:04:24,600
See, as I said, I'm Calvin Seward.

58
00:04:24,600 --> 00:04:31,080
Originally, I studied mathematics at the Humboldt University here in Berlin.

59
00:04:31,080 --> 00:04:36,440
And since then, I've been working at Zalando, and so Zalando is the tech company that nobody's

60
00:04:36,440 --> 00:04:37,440
heard of.

61
00:04:37,440 --> 00:04:41,040
It's a very large online retailer based in Germany.

62
00:04:41,040 --> 00:04:45,840
And so it's more centered on fashion retail in the European market.

63
00:04:45,840 --> 00:04:51,480
So it's well known in Europe, but very not so well known in the rest of the world.

64
00:04:51,480 --> 00:04:57,520
And in addition to working at Zalando, I also am pursuing my doctorate.

65
00:04:57,520 --> 00:05:02,920
So the doctorate's program is cooperation between the Johannes Kepler University in Lens

66
00:05:02,920 --> 00:05:05,400
in Austria and Zalando.

67
00:05:05,400 --> 00:05:11,960
And so it's really nice, it's really fun, because I get to do research, but I also get to

68
00:05:11,960 --> 00:05:14,920
use Zalando's resources and Zalando's data.

69
00:05:14,920 --> 00:05:16,360
And so it's a really cool thing.

70
00:05:16,360 --> 00:05:18,840
Oh, that sounds like a great opportunity.

71
00:05:18,840 --> 00:05:20,320
It really is.

72
00:05:20,320 --> 00:05:24,720
How did you initially get interested in artificial intelligence?

73
00:05:24,720 --> 00:05:29,240
Somehow my career, it's always just been like, you know, whatever the next thing is, just

74
00:05:29,240 --> 00:05:30,240
do it.

75
00:05:30,240 --> 00:05:35,360
So I studied statistics, and so then when I started Zalando, I was

76
00:05:35,360 --> 00:05:39,000
one of the first people doing data science.

77
00:05:39,000 --> 00:05:42,000
And I don't even think my title was data scientist.

78
00:05:42,000 --> 00:05:44,640
It was like data analyst or something like this.

79
00:05:44,640 --> 00:05:49,840
And so at the beginning, we just did ad hoc reporting for for management, trying to answer

80
00:05:49,840 --> 00:05:56,920
questions like, oh, should the article breadth be broader or so should we have more articles,

81
00:05:56,920 --> 00:05:59,480
more different articles or should it be deeper?

82
00:05:59,480 --> 00:06:04,920
So each article have more time so that so that it doesn't get sold out so quickly.

83
00:06:04,920 --> 00:06:06,760
Different questions like that.

84
00:06:06,760 --> 00:06:12,680
And then slowly but surely, the low-hanging fruit got dealt with, and it became apparent

85
00:06:12,680 --> 00:06:16,560
that they didn't order to keep up with the competition.

86
00:06:16,560 --> 00:06:19,000
You know, we had to step up our game.

87
00:06:19,000 --> 00:06:24,960
And so that's how we got interested in artificial intelligence because, you know, it was definitely

88
00:06:24,960 --> 00:06:30,920
the next big thing and is something that can can drive a lot of customer value.

89
00:06:30,920 --> 00:06:35,480
Maybe you can tell us a little bit about the warehouse optimization problem that you've

90
00:06:35,480 --> 00:06:36,480
worked on.

91
00:06:36,480 --> 00:06:37,480
Yeah.

92
00:06:37,480 --> 00:06:43,880
What we did was we first had one project called the O'Coffee Projects, where you can

93
00:06:43,880 --> 00:06:49,240
imagine the inside of warehouse, it looks like an offline retailer actually.

94
00:06:49,240 --> 00:06:54,640
It looks like targets or a safe way or Tesco or Kaufland or, you know, I don't know which

95
00:06:54,640 --> 00:06:59,640
country my listeners are going to be sitting in, but just one of these large or Walmart,

96
00:06:59,640 --> 00:07:04,320
one of these large stores with a bunch of aisles with items and cross aisles.

97
00:07:04,320 --> 00:07:08,600
And people walk through these store with shopping carts and they put items in the shopping

98
00:07:08,600 --> 00:07:12,280
cart and then they go to check out and leave.

99
00:07:12,280 --> 00:07:17,520
And so it's the same way in the offline or in the online warehouse.

100
00:07:17,520 --> 00:07:24,360
So what happens is our workers, they start off at this thing that we call the train station

101
00:07:24,360 --> 00:07:27,200
and they pick up this cart that's empty.

102
00:07:27,200 --> 00:07:31,000
And then they walk through the aisles and the cross aisles and they put items into their

103
00:07:31,000 --> 00:07:32,000
cart.

104
00:07:32,000 --> 00:07:37,320
And then when they've sort of completed their shopping list, they bring the cart back

105
00:07:37,320 --> 00:07:42,440
to the train station and it's sent on to be processed and for the items to be sent

106
00:07:42,440 --> 00:07:44,080
to the customers.

107
00:07:44,080 --> 00:07:48,760
So then everybody knows when they're shopping that there's an efficient way and there's

108
00:07:48,760 --> 00:07:50,960
an inefficient way to walk through the store.

109
00:07:50,960 --> 00:07:56,400
And so you first, you first buy your butter and your milk because those are close to one

110
00:07:56,400 --> 00:07:58,600
another and then you go off and buy the bread.

111
00:07:58,600 --> 00:08:01,440
You don't do the butter than the bread and then the milk.

112
00:08:01,440 --> 00:08:07,160
And so it's the same way in the online warehouse that we want to, we want to know how to order

113
00:08:07,160 --> 00:08:11,920
the shopping list so that the worker can walk through the warehouse and not to move away.

114
00:08:11,920 --> 00:08:16,120
So this is sort of a traveling salesman problem where you have a bunch of different locations

115
00:08:16,120 --> 00:08:20,840
that the worker has to visit and then you want to be able to tell the worker how to

116
00:08:20,840 --> 00:08:23,960
visit the locations in the most efficient way.

117
00:08:23,960 --> 00:08:30,640
And so there was some research that was done about how to walk through the warehouse.

118
00:08:30,640 --> 00:08:36,000
If the warehouse has a specific layout and it's this so-called rope ladder layout.

119
00:08:36,000 --> 00:08:42,040
And so it's like, it's the same layout that you have in most large offline retail stores.

120
00:08:42,040 --> 00:08:47,240
And the rope ladder layout is, well, tell us specifically what that means.

121
00:08:47,240 --> 00:08:54,720
You have aisles and cross aisles and each cross aisle or each aisle is the same length

122
00:08:54,720 --> 00:08:59,240
and they have and they're aligned with one another.

123
00:08:59,240 --> 00:09:03,520
So it's not like you have this weird jog that you have to make.

124
00:09:03,520 --> 00:09:04,520
Okay.

125
00:09:04,520 --> 00:09:09,600
So it's kind of a simplification and I guess now that I'm visualizing it rope ladder is

126
00:09:09,600 --> 00:09:14,560
just simply trying to create that visual of two long rows with a bunch of cross aisles,

127
00:09:14,560 --> 00:09:15,560
that kind of thing.

128
00:09:15,560 --> 00:09:17,720
Exactly, it looks like a rope ladder.

129
00:09:17,720 --> 00:09:18,720
Got it.

130
00:09:18,720 --> 00:09:19,720
Yeah.

131
00:09:19,720 --> 00:09:25,040
And so there was some work that was already done on optimizing for this setup.

132
00:09:25,040 --> 00:09:32,760
But what was missing was the people who work in the warehouse say they have these big

133
00:09:32,760 --> 00:09:37,800
carts they push around and they're actually quite large because they can carry a lot of

134
00:09:37,800 --> 00:09:38,800
items.

135
00:09:38,800 --> 00:09:39,800
Okay.

136
00:09:39,800 --> 00:09:43,800
But they're sort of difficult to handle and so it's the same way if you're shopping

137
00:09:43,800 --> 00:09:48,640
offline, if you if your cart is fairly full, then you generally leave it in the cross

138
00:09:48,640 --> 00:09:54,000
aisle and you walk into the aisle without the cart and collect your, collect your items

139
00:09:54,000 --> 00:09:56,000
and then return to the cart.

140
00:09:56,000 --> 00:10:00,640
And so we wanted to be able to tell the workers, okay, how best to, to handle the cart.

141
00:10:00,640 --> 00:10:04,920
So we extended this algorithm and we come up with this, this algorithm we call the copy

142
00:10:04,920 --> 00:10:05,920
algorithm.

143
00:10:05,920 --> 00:10:10,080
And so this is called optimal cart pick algorithm that's able to tell the warehouse

144
00:10:10,080 --> 00:10:16,080
workers how best to walk through the warehouse and where to leave the cart.

145
00:10:16,080 --> 00:10:19,680
So that the warehouse worker knows he can always just leave his cart where the algorithm

146
00:10:19,680 --> 00:10:25,160
suggests it and then I think walk to the different locations and get the items and he

147
00:10:25,160 --> 00:10:29,560
knows that the, that the algorithm will always bring him back to the cart before he gets

148
00:10:29,560 --> 00:10:34,000
too much stuff that he can carry, you know, too many things to carry.

149
00:10:34,000 --> 00:10:37,240
And so this is, this has absolutely nothing to do with machine learning.

150
00:10:37,240 --> 00:10:38,720
Let me just say that.

151
00:10:38,720 --> 00:10:41,240
So if people think, oh, where's the machine learning?

152
00:10:41,240 --> 00:10:43,080
It's still not here yet.

153
00:10:43,080 --> 00:10:49,120
This is a fairly straightforward discrete optimization problem where you just have to, you

154
00:10:49,120 --> 00:10:53,760
have this list of items, you have to decide how to order the items, you have these list

155
00:10:53,760 --> 00:10:57,240
of cart locations that you can put the cart and you've got to insert the cart locations

156
00:10:57,240 --> 00:10:58,880
in there somehow.

157
00:10:58,880 --> 00:11:02,440
And then you've got to optimize the sky with a dynamic programming algorithm.

158
00:11:02,440 --> 00:11:06,840
So it, the optimization works is linear in the number of, number of aisles.

159
00:11:06,840 --> 00:11:10,160
So it's, it's got a reasonable enough complexity.

160
00:11:10,160 --> 00:11:16,680
Okay, before we move on, you mentioned traveling salesman problem and, you know, folks that

161
00:11:16,680 --> 00:11:22,560
have done any work in computer science would, you know, probably be familiar with that.

162
00:11:22,560 --> 00:11:27,720
But in case there are folks that aren't familiar with the implications of, you know, something

163
00:11:27,720 --> 00:11:33,200
being essentially a TSP, what does that mean in terms of, you know, how we know how to,

164
00:11:33,200 --> 00:11:34,600
to solve that problem?

165
00:11:34,600 --> 00:11:40,800
Oh, there's, there's lots of literature on, on solving traveling salesman problems.

166
00:11:40,800 --> 00:11:43,520
But at the end of the day, it's an MP hard problem.

167
00:11:43,520 --> 00:11:50,480
So MP hard means, means that it's something that's in the most general case is exponentially

168
00:11:50,480 --> 00:11:51,480
complex.

169
00:11:51,480 --> 00:11:55,320
And so there's lots of other risks about how to solve it.

170
00:11:55,320 --> 00:11:58,560
But you can imagine that, that there's traveling salesman problems.

171
00:11:58,560 --> 00:12:02,760
So, so the idea is that the way, the place that the name comes from is you have a bunch

172
00:12:02,760 --> 00:12:09,480
of different locations, and you have some salesman, and he starts at his house, and he wants

173
00:12:09,480 --> 00:12:15,200
to then go visit all the locations, and he wants to do it in a way to where, to where

174
00:12:15,200 --> 00:12:17,960
the distance that he travels is minimal.

175
00:12:17,960 --> 00:12:20,160
And so there's lots of other risks on it.

176
00:12:20,160 --> 00:12:26,320
And obviously if the locations are organized in a nice way, then how best to do it is

177
00:12:26,320 --> 00:12:27,320
fairly clear.

178
00:12:27,320 --> 00:12:33,000
For example, if all the dimensions lie on all the locations lie on a one-dimensional line,

179
00:12:33,000 --> 00:12:36,160
then it's fairly clear how best to travel.

180
00:12:36,160 --> 00:12:40,000
But already in two dimensions, it becomes difficult.

181
00:12:40,000 --> 00:12:43,360
So this rope ladder warehouse layout is one of these special cases.

182
00:12:43,360 --> 00:12:47,640
You can think of it like the, the single dimensions case where you just have a line.

183
00:12:47,640 --> 00:12:52,440
It's a special case to where you can efficiently solve the traveling salesman problem.

184
00:12:52,440 --> 00:12:59,680
Okay, and then you mentioned your cart handling strategy component of this, where you're trying

185
00:12:59,680 --> 00:13:03,480
to figure out where to, where the worker can park their cart.

186
00:13:03,480 --> 00:13:10,720
Do you also need to consider anything along the lines of been packing or cart capacity

187
00:13:10,720 --> 00:13:12,720
or anything like that?

188
00:13:12,720 --> 00:13:18,040
Yeah, I mean, it's something you can't consider, but at the end of the day, it's not a huge

189
00:13:18,040 --> 00:13:24,760
deal because basically just try and try and make the pick list as large as possible.

190
00:13:24,760 --> 00:13:30,000
And then if the cart gets too full, then there's a button for the, for the warehouse worker

191
00:13:30,000 --> 00:13:33,520
where he just says, my cart is full and then he goes back to the train station and gets

192
00:13:33,520 --> 00:13:35,960
a new cart and the system deals with that.

193
00:13:35,960 --> 00:13:40,280
So, okay, so that's not, that's not really a big problem.

194
00:13:40,280 --> 00:13:41,280
Okay.

195
00:13:41,280 --> 00:13:48,280
So you mentioned that the formulation of this problem, this okapi algorithm is, you know,

196
00:13:48,280 --> 00:13:49,920
we're at discrete optimization.

197
00:13:49,920 --> 00:13:52,000
It's not yet machine learning.

198
00:13:52,000 --> 00:13:55,960
How is the discrete optimization problem solves in practice?

199
00:13:55,960 --> 00:13:59,160
So for us, it's a dynamic programming algorithm.

200
00:13:59,160 --> 00:14:01,160
That's what it, that's what it's called.

201
00:14:01,160 --> 00:14:04,480
And so, so I mean, there's a couple of articles online.

202
00:14:04,480 --> 00:14:07,880
You can, you can Google it where I explain this.

203
00:14:07,880 --> 00:14:13,680
So let me, let me try and remember how best to explain it, but the idea of dynamic programming

204
00:14:13,680 --> 00:14:20,400
is that you, you know that there's a lot of different combinations, but each combination

205
00:14:20,400 --> 00:14:26,560
will, there's these transitions between combinations and they can only take on a certain finite

206
00:14:26,560 --> 00:14:28,400
number of states.

207
00:14:28,400 --> 00:14:32,360
And so you just look for the best combination for each transition.

208
00:14:32,360 --> 00:14:38,960
And so the way this looks in, in practice is, is imagine we have a rope ladder way, lay

209
00:14:38,960 --> 00:14:41,520
out with only two cross aisles, okay?

210
00:14:41,520 --> 00:14:42,520
Okay.

211
00:14:42,520 --> 00:14:48,800
And then, then imagine we, we sort of split it, split it in half, right?

212
00:14:48,800 --> 00:14:51,040
So then there's these two cross aisles.

213
00:14:51,040 --> 00:14:53,200
And so, and we're not, don't think about the cart.

214
00:14:53,200 --> 00:14:54,200
We're not thinking about the cart.

215
00:14:54,200 --> 00:14:56,200
We're just thinking about the optimal way to walk.

216
00:14:56,200 --> 00:14:57,200
Okay.

217
00:14:57,200 --> 00:15:00,120
Then there's a couple of different things that they can happen.

218
00:15:00,120 --> 00:15:03,320
Either the worker, he, he doesn't walk.

219
00:15:03,320 --> 00:15:04,840
So these, these two cross aisles.

220
00:15:04,840 --> 00:15:09,440
So the, these two little cross aisle sections, they're in the middle, okay?

221
00:15:09,440 --> 00:15:12,160
So either the worker doesn't walk on those.

222
00:15:12,160 --> 00:15:16,680
So that means that his entire pick route was either the left or the right.

223
00:15:16,680 --> 00:15:19,880
Or it can happen that he only walks.

224
00:15:19,880 --> 00:15:21,760
So he's got a return to where he started, yeah.

225
00:15:21,760 --> 00:15:26,600
So that means that he walks once on both of them.

226
00:15:26,600 --> 00:15:29,480
So he walks on the, on the top cross aisle.

227
00:15:29,480 --> 00:15:34,080
He walks once on the bottom cross aisle, he walks once, okay?

228
00:15:34,080 --> 00:15:38,080
Or it's possible that he walks twice at the top.

229
00:15:38,080 --> 00:15:41,040
Or it's possible that he walks twice at the bottom.

230
00:15:41,040 --> 00:15:46,040
Or it's possible that he walks twice at both the top and bottom.

231
00:15:46,040 --> 00:15:48,920
So these are all the different states that are possible.

232
00:15:48,920 --> 00:15:56,360
And so what you can do then is no matter what your optimal solution is on the left and

233
00:15:56,360 --> 00:15:59,040
no matter what your optimal solution is on the right.

234
00:15:59,040 --> 00:16:03,760
They're going to have to communicate with each other via these, these seven different states.

235
00:16:03,760 --> 00:16:09,200
So if you can sort of recursively find the optimal solution for the left.

236
00:16:09,200 --> 00:16:13,520
What you can do is then you can recursively find seven different optimal solutions for

237
00:16:13,520 --> 00:16:15,160
these seven different transitions.

238
00:16:15,160 --> 00:16:19,560
I don't remember if it was exactly seven, but these seven different transitions, you

239
00:16:19,560 --> 00:16:22,520
can know, okay, what's the optimal solution going to be.

240
00:16:22,520 --> 00:16:28,360
And then you just calculate, okay, what's the, what's the optimal route for the next cross

241
00:16:28,360 --> 00:16:34,560
aisle, or the next aisle section, and for these seven different transitions.

242
00:16:34,560 --> 00:16:39,360
And then you do that recursively until you get to the end.

243
00:16:39,360 --> 00:16:43,040
And so then instead of having to think about every single different combination, you're

244
00:16:43,040 --> 00:16:48,800
always just trying to figure out, okay, what's the best one for these seven different states?

245
00:16:48,800 --> 00:16:54,400
Okay, if I could try to paraphrase that you, again, we're looking at this warehouse with

246
00:16:54,400 --> 00:17:02,080
this rope ladder configuration, and you can basically chunk it down into sections of the

247
00:17:02,080 --> 00:17:08,680
rope ladder with two cross aisles and then solve the optimization problem locally.

248
00:17:08,680 --> 00:17:14,400
And then that's all kind of strung together recursively to give you an overall optimal

249
00:17:14,400 --> 00:17:15,400
strategy.

250
00:17:15,400 --> 00:17:16,400
Exactly.

251
00:17:16,400 --> 00:17:17,400
Exactly.

252
00:17:17,400 --> 00:17:18,400
Okay.

253
00:17:18,400 --> 00:17:19,400
It's hard to explain.

254
00:17:19,400 --> 00:17:24,880
The first time I read the paper, I was also like, what's going on here?

255
00:17:24,880 --> 00:17:29,680
I also saw you mentioned in some of your writing simulated annealing, is that this process

256
00:17:29,680 --> 00:17:31,840
that we just described, or is that something different?

257
00:17:31,840 --> 00:17:34,240
Okay, so that's definitely the next step.

258
00:17:34,240 --> 00:17:37,760
So now what we got was we got this copy algorithm.

259
00:17:37,760 --> 00:17:41,000
So a copy is short for optimal cart pick.

260
00:17:41,000 --> 00:17:42,000
Okay.

261
00:17:42,000 --> 00:17:47,800
And it works well, but since we have larger warehouses that are more than just two cross

262
00:17:47,800 --> 00:17:55,720
aisles, and since we have this cart business going on, it takes like a second or so to calculate

263
00:17:55,720 --> 00:17:59,600
calculate what the optimal route will end up being, right?

264
00:17:59,600 --> 00:18:00,600
Okay.

265
00:18:00,600 --> 00:18:04,720
So if you're just trying to figure out the route for the warehouse worker, you already

266
00:18:04,720 --> 00:18:07,720
have your pick list together, then it's fine.

267
00:18:07,720 --> 00:18:14,240
But the next step is, of course, to optimize the pick list, because every day the warehouse

268
00:18:14,240 --> 00:18:18,280
worker is a pick, you know, hundreds of thousands of pick lists.

269
00:18:18,280 --> 00:18:22,920
And if you can optimize these to where each pick list has items that are fairly close

270
00:18:22,920 --> 00:18:30,200
to one another, and optimize it to where the pick lists are fairly large, and batches

271
00:18:30,200 --> 00:18:35,080
don't have to be picked from very many zones of the warehouse, then this is a real good

272
00:18:35,080 --> 00:18:36,280
thing.

273
00:18:36,280 --> 00:18:44,200
But in order to do this, you have to sort of know how long a hypothetical pick list will

274
00:18:44,200 --> 00:18:45,880
end up being.

275
00:18:45,880 --> 00:18:52,720
And this one second thing is really a big constraint, because then you can't try out, you know, thousands

276
00:18:52,720 --> 00:18:58,560
and thousands of different combinations without racking up a huge Amazon web services bill

277
00:18:58,560 --> 00:19:00,560
that's prohibited.

278
00:19:00,560 --> 00:19:06,120
So what we did is we just just to make sure I'm understanding there you.

279
00:19:06,120 --> 00:19:14,120
With this Ocopy algorithm, that'll give you basically the routing for an individual,

280
00:19:14,120 --> 00:19:16,160
you know, pick list and picker.

281
00:19:16,160 --> 00:19:24,400
And then in order to figure out the best way to organize the pick list and like the orders,

282
00:19:24,400 --> 00:19:26,520
you have to just brute force that.

283
00:19:26,520 --> 00:19:31,880
So you go through and run this Ocopy algorithm a bunch of times with a bunch of pick lists.

284
00:19:31,880 --> 00:19:32,880
Is that the idea?

285
00:19:32,880 --> 00:19:38,440
Yeah, well, I mean, even if you're using simulated kneeling, you still have to, I mean, so

286
00:19:38,440 --> 00:19:42,240
yeah, there's, there's methods better than brute force like simulated kneeling, but even

287
00:19:42,240 --> 00:19:45,360
there you have to try out a bunch of different combinations.

288
00:19:45,360 --> 00:19:46,360
Okay.

289
00:19:46,360 --> 00:19:52,240
You're, you're never going to, you're never going to get around having to try out, try out

290
00:19:52,240 --> 00:19:56,960
a bunch of different combinations of a pick list to see which ones end up being super

291
00:19:56,960 --> 00:20:01,520
long and which ones end up being quite reasonable.

292
00:20:01,520 --> 00:20:08,480
And so your problem comes in when you've got, when it takes one second to try out one

293
00:20:08,480 --> 00:20:13,640
of these combinations to do that at scale, takes a really long time.

294
00:20:13,640 --> 00:20:14,640
Exactly.

295
00:20:14,640 --> 00:20:15,640
Exactly.

296
00:20:15,640 --> 00:20:22,400
I think you had an example of, I don't know if this map to the kind of a real life Zolando

297
00:20:22,400 --> 00:20:26,000
configuration, but like 2000 years to.

298
00:20:26,000 --> 00:20:27,000
Yeah, exactly.

299
00:20:27,000 --> 00:20:28,000
Exactly.

300
00:20:28,000 --> 00:20:34,320
Jesus, Jesus would order his shoes and he still wouldn't have them now.

301
00:20:34,320 --> 00:20:40,880
So you've got the two problems and your focus was on trying to reduce the time it takes

302
00:20:40,880 --> 00:20:46,960
to calculate, is it to calculate an optimal route or to calculate the length of a route

303
00:20:46,960 --> 00:20:48,560
given a pick list?

304
00:20:48,560 --> 00:20:53,800
Yeah, to calculate the length of the optimal route given the pick list.

305
00:20:53,800 --> 00:20:54,800
Got it.

306
00:20:54,800 --> 00:20:58,320
Basically calculating for this stuff where we're trying to figure out which order goes

307
00:20:58,320 --> 00:21:03,120
with which pick list or which order should be in which pick list.

308
00:21:03,120 --> 00:21:06,400
We don't actually have to know what the route should be.

309
00:21:06,400 --> 00:21:11,280
We just need to know how long the optimal route would end up being.

310
00:21:11,280 --> 00:21:12,360
Okay.

311
00:21:12,360 --> 00:21:19,240
And so we want to decrease that time because whether we're using brute force or simulated

312
00:21:19,240 --> 00:21:23,920
annealing or some other kind of heuristic, it's still going to be dependent on the amount

313
00:21:23,920 --> 00:21:28,920
of time it takes us to figure out the length of the optimal route for a given pick list.

314
00:21:28,920 --> 00:21:29,920
Exactly.

315
00:21:29,920 --> 00:21:30,920
Exactly.

316
00:21:30,920 --> 00:21:34,800
So there's two different levers we can pull to speed things up.

317
00:21:34,800 --> 00:21:43,040
One is better simulated annealing, heuristics, and the other one is just make this bottleneck

318
00:21:43,040 --> 00:21:47,640
which is calculating the length of a pick list faster.

319
00:21:47,640 --> 00:21:48,640
Mm-hmm.

320
00:21:48,640 --> 00:21:49,640
All right.

321
00:21:49,640 --> 00:21:51,600
And that's where machine learning comes in.

322
00:21:51,600 --> 00:21:52,600
Exactly.

323
00:21:52,600 --> 00:21:54,840
Now we're finally going to get to machine learning.

324
00:21:54,840 --> 00:21:59,240
I hope the audience is still with us right now.

325
00:21:59,240 --> 00:22:01,880
I'm sure they are because this is their time.

326
00:22:01,880 --> 00:22:02,880
Okay.

327
00:22:02,880 --> 00:22:03,880
Okay.

328
00:22:03,880 --> 00:22:07,280
If you've been tuning out now is your time to tune back in.

329
00:22:07,280 --> 00:22:14,920
So what we did then is we used this copy algorithm to generate data that we learn on.

330
00:22:14,920 --> 00:22:21,040
So we just generate millions and millions of random pick lists.

331
00:22:21,040 --> 00:22:24,560
And we put these through the copy algorithm.

332
00:22:24,560 --> 00:22:31,080
So we had a bunch of different CPU cores just running at the same time, taking a random

333
00:22:31,080 --> 00:22:38,760
pick list, calculating how long that would take, and then spitting out the answer.

334
00:22:38,760 --> 00:22:44,040
And so these computers, they generated our training data.

335
00:22:44,040 --> 00:22:49,840
And then with this training data, where we've got a pick list, so we know where the articles

336
00:22:49,840 --> 00:22:53,400
are that need to be picked and how many there are.

337
00:22:53,400 --> 00:22:57,480
And how long it would take for the optimal route to get picked.

338
00:22:57,480 --> 00:23:05,160
So given these two guys, we can then feed this information into a neural network and train

339
00:23:05,160 --> 00:23:09,160
that neural network and get some sort of a good result.

340
00:23:09,160 --> 00:23:12,920
And so there's lots of stuff you can simulate, yeah.

341
00:23:12,920 --> 00:23:18,080
And some of it will be good for neural networks and some of it probably won't.

342
00:23:18,080 --> 00:23:23,240
For example, if you think of some sort of a fancy hashing algorithm that tries to avoid

343
00:23:23,240 --> 00:23:27,480
hash collisions, you can obviously simulate this, but you wouldn't be able to get a neural

344
00:23:27,480 --> 00:23:32,640
network to to give you the same output because the whole idea of hashing algorithms is that

345
00:23:32,640 --> 00:23:37,320
it's, you know, as non-continuous as possible.

346
00:23:37,320 --> 00:23:43,600
But for this copy thing, it works very nicely because you can imagine if you just have one

347
00:23:43,600 --> 00:23:46,640
pick and you move it around in the warehouse.

348
00:23:46,640 --> 00:23:51,280
If you just move it a little bit, it won't change, change the pick routes very much.

349
00:23:51,280 --> 00:23:55,200
So if you move it a little bit in the cross aisle or in the aisle, it won't change the

350
00:23:55,200 --> 00:24:00,360
pick route very much because the worst thing that can happen is if you move it, you know,

351
00:24:00,360 --> 00:24:05,720
a foot, the worst thing that can happen is the warehouse worker has to walk an extra foot

352
00:24:05,720 --> 00:24:06,720
to get there.

353
00:24:06,720 --> 00:24:08,960
It's not so linear in the cross aisle.

354
00:24:08,960 --> 00:24:12,960
So if you have a pick that's in the middle of the aisle and you move it the next aisle

355
00:24:12,960 --> 00:24:16,560
over, it could be that it creates a big jump.

356
00:24:16,560 --> 00:24:21,640
Because then the warehouse worker, he may have been going to that aisle already.

357
00:24:21,640 --> 00:24:24,240
And then this new aisle, he wasn't planning on going there.

358
00:24:24,240 --> 00:24:28,280
And so then the distance is quite a lot larger.

359
00:24:28,280 --> 00:24:31,840
But still it's, you know, it's not these huge jumps.

360
00:24:31,840 --> 00:24:37,800
So that's one reason why it's a nice thing to model with neural networks.

361
00:24:37,800 --> 00:24:44,280
And then the dependencies between the articles are also nice because obviously it's not

362
00:24:44,280 --> 00:24:48,960
just some linear sum, you know, if this article is here and this article is here, the distance

363
00:24:48,960 --> 00:24:51,720
for the guy has to walk is the sum of the two distances.

364
00:24:51,720 --> 00:24:55,520
But it's this complex dependency between all the different articles.

365
00:24:55,520 --> 00:24:59,080
But this is this sort of more locally dependent.

366
00:24:59,080 --> 00:25:05,040
So it's less of one of these situations where the butterflies, wings in Japan cause an

367
00:25:05,040 --> 00:25:08,720
earthquake and an LA situations.

368
00:25:08,720 --> 00:25:15,240
But it's more that as you shift articles around, it really only has, generally, I mean,

369
00:25:15,240 --> 00:25:19,040
sometimes there's exceptions, but generally it really just has an effect on how the warehouse

370
00:25:19,040 --> 00:25:24,040
worker walks in that area and it doesn't have too much of an effect on, on far flowing

371
00:25:24,040 --> 00:25:26,440
corners of the warehouse.

372
00:25:26,440 --> 00:25:31,800
And so because of this, because we don't have too many jumps and the function is somewhat

373
00:25:31,800 --> 00:25:35,760
continuous, makes it through it's good for neural networks.

374
00:25:35,760 --> 00:25:42,680
Because, because local structures are more important than global structures, we can use

375
00:25:42,680 --> 00:25:47,600
convolutional neural networks because the convolutional filters, they only focus on local

376
00:25:47,600 --> 00:25:49,000
features.

377
00:25:49,000 --> 00:25:54,120
And then they combine these local features together as they move up through the hidden layers.

378
00:25:54,120 --> 00:25:55,120
Hmm.

379
00:25:55,120 --> 00:26:03,560
So then let me take a second to kind of recap basically, we want to get the time to figure

380
00:26:03,560 --> 00:26:10,720
out the optimal path length for this, you know, for picking an order down.

381
00:26:10,720 --> 00:26:15,280
Neural networks is probably a great way to do that.

382
00:26:15,280 --> 00:26:21,640
And essentially what we're trying to do is we're trying to train a neural network to approximate

383
00:26:21,640 --> 00:26:24,120
this Ocopi algorithm.

384
00:26:24,120 --> 00:26:30,160
And we do that by generating a bunch of random pick lists and throwing them through the

385
00:26:30,160 --> 00:26:35,080
Ocopi algorithm to generate the path length.

386
00:26:35,080 --> 00:26:39,680
So basically generating our training data through by throwing random data through this Ocopi

387
00:26:39,680 --> 00:26:40,920
algorithm.

388
00:26:40,920 --> 00:26:46,160
And then using that to train our neural network, exactly, exactly.

389
00:26:46,160 --> 00:26:51,000
And so I guess one question that I've got is it, you know, you found that it, you know,

390
00:26:51,000 --> 00:26:56,120
at one second per route to run things through this, or it takes a second to run a route

391
00:26:56,120 --> 00:27:02,280
through this Ocopi algorithm. And in order to, you know, fully explore the state space

392
00:27:02,280 --> 00:27:08,320
for like a real warehouse, it would take 2,000 something years if you did all of those,

393
00:27:08,320 --> 00:27:14,040
you know, what, how much coverage do you need in order to, you know, accurately train

394
00:27:14,040 --> 00:27:16,400
a neural network to do this?

395
00:27:16,400 --> 00:27:22,200
What, you know, what percent of that state space or how many training samples do you need?

396
00:27:22,200 --> 00:27:27,120
Well, we didn't really say, oh, we have to have exactly this accuracy.

397
00:27:27,120 --> 00:27:30,880
But we just said, oh, you know, we've got this machine here.

398
00:27:30,880 --> 00:27:34,920
Let's create enough pick lists where the machine runs for a week or so.

399
00:27:34,920 --> 00:27:38,800
And then, and then because we've got other things to do this week, and then next week we'll

400
00:27:38,800 --> 00:27:41,000
come back and look at the results.

401
00:27:41,000 --> 00:27:44,920
So that's the way it works a lot of times, you know, and then we look to the results.

402
00:27:44,920 --> 00:27:47,040
And we're like, it's good enough.

403
00:27:47,040 --> 00:27:50,080
And then, and then that was, and that's how it happened.

404
00:27:50,080 --> 00:27:54,160
So it wasn't like we explored, oh, how many, how many pick lists do we have to create

405
00:27:54,160 --> 00:27:55,160
to get this accuracy?

406
00:27:55,160 --> 00:28:01,960
But it was just sort of these practical considerations that were more at the, at the forefront.

407
00:28:01,960 --> 00:28:07,920
And then, you know, I typically associate convolutional neural nets with image processing

408
00:28:07,920 --> 00:28:15,960
types of tasks, but yet it worked in this case based on the, you know, this locality aspect

409
00:28:15,960 --> 00:28:16,960
of the problem.

410
00:28:16,960 --> 00:28:23,320
Because it was the, did you have to jump through any intermediate steps to kind of format the

411
00:28:23,320 --> 00:28:27,480
process so that it, or format the input data so that it looked like an image, or you're

412
00:28:27,480 --> 00:28:31,600
just kind of feeding it, you know, data that, you know, was natural to the problem.

413
00:28:31,600 --> 00:28:35,720
And, you know, without any kind of intermediate steps.

414
00:28:35,720 --> 00:28:39,840
I think that it didn't a day, we used cafe for this.

415
00:28:39,840 --> 00:28:44,760
So this was a, this was back in the dark days before TensorFlow.

416
00:28:44,760 --> 00:28:48,520
And so there you had different, different input layers.

417
00:28:48,520 --> 00:28:53,880
And I think we figured out that the, the TTIF, it's an image format.

418
00:28:53,880 --> 00:28:58,680
I think that we figured out that that was the most convenient, convenient layer to use.

419
00:28:58,680 --> 00:29:05,280
So yeah, the pick list, we, we transformed them into a TTIF image and we had these images

420
00:29:05,280 --> 00:29:06,280
in there.

421
00:29:06,280 --> 00:29:07,280
Okay.

422
00:29:07,280 --> 00:29:08,600
Interesting.

423
00:29:08,600 --> 00:29:14,800
But, I mean, this is really just a stupid technical detail, it was just, it was just because

424
00:29:14,800 --> 00:29:17,680
of the, the different input layers and cafe.

425
00:29:17,680 --> 00:29:22,080
And so if we had done it with TensorFlow now, it would have been a, a whole different

426
00:29:22,080 --> 00:29:23,080
story.

427
00:29:23,080 --> 00:29:24,080
Okay.

428
00:29:24,080 --> 00:29:31,040
And so the, you used a convolutional network to model this.

429
00:29:31,040 --> 00:29:36,040
How did you arrive at the ultimate architecture of that network and the, you know, the number

430
00:29:36,040 --> 00:29:39,360
of layers and the configuration of those layers and all that stuff?

431
00:29:39,360 --> 00:29:45,520
Oh, we tried out a couple of different things and then one of them worked and we were happy.

432
00:29:45,520 --> 00:29:46,520
But, okay.

433
00:29:46,520 --> 00:29:50,600
I mean, there's a little bit of dark, dark arts, this sort of thing.

434
00:29:50,600 --> 00:29:56,240
And we, we knew, we knew sort of like what the interactions are between different articles.

435
00:29:56,240 --> 00:30:00,880
And so we said, okay, you know, because of these interactions, maybe the filter size

436
00:30:00,880 --> 00:30:05,520
should be about this, this large and we knew how complex interactions could be.

437
00:30:05,520 --> 00:30:09,680
So the depth of the network should be around here and then tried out a couple of different

438
00:30:09,680 --> 00:30:11,600
combinations.

439
00:30:11,600 --> 00:30:16,960
And then today, I mean, these, these TTIF images were, we're not, not particularly large

440
00:30:16,960 --> 00:30:23,840
because each, each aisle is then one, one pixel in each, each cross aisle or, and then,

441
00:30:23,840 --> 00:30:28,400
and then the depth, the depth of the cross aisle, that's, that's the, or the depth of an

442
00:30:28,400 --> 00:30:33,440
aisle is sort of a prox, and prox mission because obviously these articles are, are located

443
00:30:33,440 --> 00:30:37,760
some discrete spots or some continuous spot, though you have to make it into a discrete

444
00:30:37,760 --> 00:30:38,760
pixel.

445
00:30:38,760 --> 00:30:42,640
So it's a little bit of an approximation, but who cares?

446
00:30:42,640 --> 00:30:46,920
And so, and so the images were not particularly large, we were feeding through and so you

447
00:30:46,920 --> 00:30:52,520
could train it very quickly and within, within the course of, of a day and just try out a

448
00:30:52,520 --> 00:30:56,040
bunch of different things and just see what works best be done with it.

449
00:30:56,040 --> 00:30:57,040
Okay.

450
00:30:57,040 --> 00:30:58,040
All right.

451
00:30:58,040 --> 00:30:59,040
Awesome.

452
00:30:59,040 --> 00:31:05,680
And what were you able to accomplish in terms of getting your, your time down that you

453
00:31:05,680 --> 00:31:07,320
were trying to accomplish?

454
00:31:07,320 --> 00:31:08,320
Oh, yeah.

455
00:31:08,320 --> 00:31:10,240
No, that was, that was really good.

456
00:31:10,240 --> 00:31:15,360
So I don't remember these act numbers, but it's definitely under, under a millisecond.

457
00:31:15,360 --> 00:31:20,680
So so I did, I did a benchmark and that's, that's in one of the blog articles where, where

458
00:31:20,680 --> 00:31:25,720
we just then, they ran it and we, we had different configurations because obviously with a,

459
00:31:25,720 --> 00:31:28,680
with this sort of thing, it's, it's a whole lot more efficient if you don't just calculate

460
00:31:28,680 --> 00:31:31,560
one pick list, but calculate a batch of pick lists together.

461
00:31:31,560 --> 00:31:32,560
Mm-hmm.

462
00:31:32,560 --> 00:31:36,720
And so you're able to take your pick lists and put them in a big batch and calculate that

463
00:31:36,720 --> 00:31:38,400
whole batch.

464
00:31:38,400 --> 00:31:43,720
And if you had a large enough batch, maybe 30 or 40 pick lists, then you were, you were

465
00:31:43,720 --> 00:31:45,400
well under a millisecond.

466
00:31:45,400 --> 00:31:47,240
And so this was a huge improvement.

467
00:31:47,240 --> 00:31:48,240
Okay.

468
00:31:48,240 --> 00:31:49,240
Awesome.

469
00:31:49,240 --> 00:31:50,240
Awesome.

470
00:31:50,240 --> 00:31:51,240
Yeah.

471
00:31:51,240 --> 00:31:54,640
And also, also just, I mean, you didn't even have to use fancy hardware, a millisecond

472
00:31:54,640 --> 00:32:02,440
on the CPU, yeah, so if we had used the GPU, sure, it would have been even faster, but.

473
00:32:02,440 --> 00:32:09,280
And the millisecond corresponds to inference against the trained network as opposed to,

474
00:32:09,280 --> 00:32:10,640
and then that's why it's so fast.

475
00:32:10,640 --> 00:32:11,640
Yeah.

476
00:32:11,640 --> 00:32:12,640
Yeah.

477
00:32:12,640 --> 00:32:15,280
Learning is obviously a little bit slower because there you have the forward pass, the

478
00:32:15,280 --> 00:32:19,200
backwards pass, the weight updating and all this other business going on.

479
00:32:19,200 --> 00:32:20,200
Mm-hmm.

480
00:32:20,200 --> 00:32:22,280
And so that, that you really want to do on the GPU.

481
00:32:22,280 --> 00:32:26,160
But when you're just inferring afterwards, it's a small network.

482
00:32:26,160 --> 00:32:29,480
So you can, you can just infer a small picture of a small network.

483
00:32:29,480 --> 00:32:31,760
So you can just infer on the CPU.

484
00:32:31,760 --> 00:32:34,840
And you're already, you're already very fast.

485
00:32:34,840 --> 00:32:41,120
And obviously for, for when you're deploying it to a live system, people always like it

486
00:32:41,120 --> 00:32:46,080
when you can deploy it to a large number of different hardware setups and you don't

487
00:32:46,080 --> 00:32:48,480
have to have one specific GPU.

488
00:32:48,480 --> 00:32:51,080
So that's always a big advantage.

489
00:32:51,080 --> 00:32:52,080
Awesome.

490
00:32:52,080 --> 00:32:54,800
So you solved this problem.

491
00:32:54,800 --> 00:32:56,880
Where did you go next?

492
00:32:56,880 --> 00:33:01,280
That was one of the last warehouse problems that we actually dealt with because at the end

493
00:33:01,280 --> 00:33:04,680
of the day, you can think, think of it this way, you know.

494
00:33:04,680 --> 00:33:09,120
If you solve these warehouse problems, it's really great because it makes it to where fulfillment

495
00:33:09,120 --> 00:33:12,400
costs are lower, the item gets there faster.

496
00:33:12,400 --> 00:33:13,640
So everybody wins.

497
00:33:13,640 --> 00:33:19,240
The customers, they're happier because they don't have to pay as much for fulfillment costs.

498
00:33:19,240 --> 00:33:23,320
We win because we don't have to have such large warehouses because everything works more

499
00:33:23,320 --> 00:33:24,320
efficiently.

500
00:33:24,320 --> 00:33:29,800
But at the end of the day, the maximum, you know, win you can make is whatever your fulfillment

501
00:33:29,800 --> 00:33:30,800
costs are.

502
00:33:30,800 --> 00:33:35,240
If you can manage to be so efficient, the fulfillment is for free, then that's the maximum

503
00:33:35,240 --> 00:33:37,400
you can get.

504
00:33:37,400 --> 00:33:44,880
Whereas if you develop new products that really excites customers and make it to where you

505
00:33:44,880 --> 00:33:51,200
can engage with customers who weren't engaging with you beforehand, the potential winnings

506
00:33:51,200 --> 00:33:53,560
are, you know, just through the roof.

507
00:33:53,560 --> 00:33:55,720
There's no limit to that.

508
00:33:55,720 --> 00:34:00,640
And so we said, okay, we want to try and get away from just incrementally eking out

509
00:34:00,640 --> 00:34:08,200
a little bit of efficiency here and there and we want to get into things that really create

510
00:34:08,200 --> 00:34:15,120
new ways of interacting with, with fashion and interacting with e-commerce.

511
00:34:15,120 --> 00:34:19,640
And so, and so I think you see this a lot, I go to a lot of, you know, industry conferences

512
00:34:19,640 --> 00:34:24,680
and I really see this a lot that there's this progression in companies.

513
00:34:24,680 --> 00:34:28,920
And the first thing that they do is they, they have all this data sitting around and the

514
00:34:28,920 --> 00:34:35,320
first thing they do is they realize, oh, we can use this data to drive efficiency.

515
00:34:35,320 --> 00:34:42,320
And that was one of the first projects that I helped contribute to was this forecast

516
00:34:42,320 --> 00:34:46,880
where we, you know, tried to predict which articles would be returned so that we could

517
00:34:46,880 --> 00:34:52,880
have enough workers at the warehouse on the day that these articles would be coming back

518
00:34:52,880 --> 00:34:55,800
because we didn't, you know, the customers, they just put them in the mail when they

519
00:34:55,800 --> 00:34:56,800
want to return them.

520
00:34:56,800 --> 00:35:01,800
So we don't really know how many articles are going to come to us on a given day.

521
00:35:01,800 --> 00:35:06,800
Yeah, but we were able to use data and fairly accurately predict which articles were going

522
00:35:06,800 --> 00:35:11,000
to be returned when and make it to where the right number of workers were there.

523
00:35:11,000 --> 00:35:14,280
So this was, it was a driver of efficiency is very nice.

524
00:35:14,280 --> 00:35:18,240
So a lot of companies, that's the first thing that they do is they take some sort of

525
00:35:18,240 --> 00:35:24,160
existing process and they make it a little bit more efficient with, with data science

526
00:35:24,160 --> 00:35:26,640
and with machine learning.

527
00:35:26,640 --> 00:35:31,780
And then you can go to the next thing, which is this project that I've talked about now,

528
00:35:31,780 --> 00:35:38,080
which is you create new processes that drive efficiency through, through data science.

529
00:35:38,080 --> 00:35:44,760
So any sort of, any sort of consideration of how to split the pick list or split the

530
00:35:44,760 --> 00:35:50,480
orders between pick list to optimize, to optimize the actual walking distance.

531
00:35:50,480 --> 00:35:53,120
This was completely impossible without a copy.

532
00:35:53,120 --> 00:35:58,160
So no one even thought about trying to do it, but by having a copy, you were able to

533
00:35:58,160 --> 00:36:02,840
come up with new processes, and by having data science, you were able to come up with

534
00:36:02,840 --> 00:36:05,880
new processes that drive efficiency.

535
00:36:05,880 --> 00:36:08,360
But for the customer, nothing has changed.

536
00:36:08,360 --> 00:36:12,160
There's absolutely no new products for him.

537
00:36:12,160 --> 00:36:15,800
It could have been, you know, just a bunch of business people sitting around, you know,

538
00:36:15,800 --> 00:36:17,400
coming up with business rules.

539
00:36:17,400 --> 00:36:22,480
He doesn't notice the difference, but what's really great is when you can then come up

540
00:36:22,480 --> 00:36:28,600
with new products like you're really great, recommend their really great search.

541
00:36:28,600 --> 00:36:32,960
All these self-driving cars is obviously also an example, we don't have that, we're not

542
00:36:32,960 --> 00:36:33,960
working with that.

543
00:36:33,960 --> 00:36:39,760
But these are products that are genuinely new and wouldn't have been possible and are

544
00:36:39,760 --> 00:36:41,800
new for the customer too.

545
00:36:41,800 --> 00:36:46,600
And this is where the big future is at.

546
00:36:46,600 --> 00:36:51,160
It's interesting that your examples are recommenders and searches.

547
00:36:51,160 --> 00:36:58,000
But think of those as kind of these existing things that we do, much like the warehouse,

548
00:36:58,000 --> 00:37:03,520
we do them, you know, using either brute force or, you know, brute force things that

549
00:37:03,520 --> 00:37:07,520
feel like brute force in their sophistication.

550
00:37:07,520 --> 00:37:12,600
And not necessarily like, you know, wholly new kind of user experiences.

551
00:37:12,600 --> 00:37:17,280
Do you have some examples of the way that you're thinking about recommendations and search

552
00:37:17,280 --> 00:37:23,280
that illustrate, you know, where the new opportunities come in for you?

553
00:37:23,280 --> 00:37:24,280
Yeah.

554
00:37:24,280 --> 00:37:29,440
So it's a great question because, yeah, obviously, for example, for documents search,

555
00:37:29,440 --> 00:37:35,160
you can always have some strange business rules that come up with documents.

556
00:37:35,160 --> 00:37:40,840
But I guess you're old enough to remember, you know, what searching the internet was like

557
00:37:40,840 --> 00:37:42,560
before Google came around.

558
00:37:42,560 --> 00:37:44,960
It was completely different animal.

559
00:37:44,960 --> 00:37:48,280
Yes, there was search, but it was so frustrating.

560
00:37:48,280 --> 00:37:51,800
And it's the same way with like old speech recognition systems.

561
00:37:51,800 --> 00:37:57,120
Yes, it was so there were systems, but they were so frustrating that it's as if, you

562
00:37:57,120 --> 00:38:02,600
know, if something's unusable, then it's pointless, you know?

563
00:38:02,600 --> 00:38:06,600
So I'm saying, sure, you can always come up with something that does something.

564
00:38:06,600 --> 00:38:10,840
But if it's so frustrating, then it's pointless and it's the same with self-driving cars.

565
00:38:10,840 --> 00:38:17,440
I mean, even back in the day, they had these cars that somehow were able to tell where

566
00:38:17,440 --> 00:38:22,680
the line was and stay between it, but they were in no way shape or form safe.

567
00:38:22,680 --> 00:38:27,720
And so, you know, what's the point if it is this Russian roulette?

568
00:38:27,720 --> 00:38:35,920
But by using data science, you can cross this threshold between something that's unusable

569
00:38:35,920 --> 00:38:40,920
and something that's usable, and that's what I mean by enabling a new product, enabling

570
00:38:40,920 --> 00:38:45,400
a product that's usable, that's what I guess I mean.

571
00:38:45,400 --> 00:38:55,880
Okay, and so to extend this, there are different ways of searching, you know, the classic search

572
00:38:55,880 --> 00:38:59,880
is just you have, it's this is a document-based search.

573
00:38:59,880 --> 00:39:05,640
You have your text field, you type something in, blue dress or whatever, and then you get

574
00:39:05,640 --> 00:39:08,600
a list of blue dresses.

575
00:39:08,600 --> 00:39:13,080
And I think that there's definitely ways that we can improve this.

576
00:39:13,080 --> 00:39:17,200
So we came up, we came up, for example, with a little tinder, a tinder for fashion

577
00:39:17,200 --> 00:39:23,400
articles, ones where you swipe left, swipe right, and you get shown different stuff.

578
00:39:23,400 --> 00:39:27,800
And so it wasn't like, it wasn't all that usable, but it was a fun thing and it was like

579
00:39:27,800 --> 00:39:34,880
just a way of showing that search can be different than box at the top and then display

580
00:39:34,880 --> 00:39:36,720
results at the bottom.

581
00:39:36,720 --> 00:39:37,720
Right.

582
00:39:37,720 --> 00:39:44,480
I've also seen companies in this space experimenting with image-based search, you know,

583
00:39:44,480 --> 00:39:49,520
similarity, things like that, is that the general direction that you guys are headed

584
00:39:49,520 --> 00:39:51,000
with this kind of stuff?

585
00:39:51,000 --> 00:39:58,720
Oh yes, definitely, definitely, we, I mean, fashion, it's so, so I mean, if you're like

586
00:39:58,720 --> 00:40:03,080
searching, you know, Amazon, they start off with books, and then when you search for

587
00:40:03,080 --> 00:40:07,400
a book, it's fairly simple, because you don't, you don't judge a book by its cover, you

588
00:40:07,400 --> 00:40:09,520
search for the author and the title.

589
00:40:09,520 --> 00:40:14,640
But in fashion, you do judge a dress by, by its picture.

590
00:40:14,640 --> 00:40:21,760
And it's very difficult to, even for experts, to describe, address, use words to describe

591
00:40:21,760 --> 00:40:24,240
exactly what it's going to look like.

592
00:40:24,240 --> 00:40:28,440
And so, and then if you have a layperson and they're, they're trying to wait for our

593
00:40:28,440 --> 00:40:33,560
huge assortment and trying to find something fairly specific and, and this assortment

594
00:40:33,560 --> 00:40:38,000
with over 100,000 articles, then it's going to be very difficult for them to find the

595
00:40:38,000 --> 00:40:39,000
right article.

596
00:40:39,000 --> 00:40:45,320
And thus, we have more clever search, search things than just using metadata, just using

597
00:40:45,320 --> 00:40:51,720
some, some description that some, that some people have hand annotated, which obviously

598
00:40:51,720 --> 00:40:56,400
it works for books, it works for computers, you just sort of say, what sort of, what's

599
00:40:56,400 --> 00:40:59,760
a RAM you want, what sort of processor you want, and bam, you've got your results, but

600
00:40:59,760 --> 00:41:04,040
you can't do that with dresses and fashion articles.

601
00:41:04,040 --> 00:41:10,320
I guess when I think of how that process is done today, not necessarily for fashion,

602
00:41:10,320 --> 00:41:16,960
but, you know, with other e-commerce search experiences, it seems like the, you know,

603
00:41:16,960 --> 00:41:26,120
that search and research experience is largely driven by, as you said, metadata in the

604
00:41:26,120 --> 00:41:32,000
fashion space to the extent that it's currently, you know, still driven by metadata, where

605
00:41:32,000 --> 00:41:33,000
does that come from?

606
00:41:33,000 --> 00:41:38,200
Is that, I guess you already said, it's basically hand, it's all handcrafted, right?

607
00:41:38,200 --> 00:41:45,320
Yeah, yeah, it's handcrafted and it's just been, it's been a very open question as to how

608
00:41:45,320 --> 00:41:53,200
to extract data from unstructured, or how to extract insights, useful insights from unstructured

609
00:41:53,200 --> 00:41:59,400
data, and pictures are very much unstructured data, but like one thing that you can do that's

610
00:41:59,400 --> 00:42:05,280
fairly easy, even with today's understanding is it's fairly easy to come up with, with

611
00:42:05,280 --> 00:42:11,240
neural networks, they're able to say if fashion articles are similar or dissimilar based

612
00:42:11,240 --> 00:42:18,000
on the picture, and then you can, you can use this similarity measure to help improve

613
00:42:18,000 --> 00:42:22,720
your recommendation system, so then at the bottom it's always like, oh, customers who

614
00:42:22,720 --> 00:42:28,200
like this also clicked on this, you know, and then, then you can improve the recommendation

615
00:42:28,200 --> 00:42:34,480
experience that way, that's definitely an easy, low-hanging fruit, even with today's

616
00:42:34,480 --> 00:42:36,560
image recognition stuff.

617
00:42:36,560 --> 00:42:37,560
Okay.

618
00:42:37,560 --> 00:42:44,480
Well, let me ask you this, when you're working on a problem like the warehouse optimization

619
00:42:44,480 --> 00:42:52,480
problem, where there are existing processes, or if not existing processes, existing costs

620
00:42:52,480 --> 00:42:58,440
associated with that, and you're comparing that to something that is more or less wholly

621
00:42:58,440 --> 00:43:09,520
new like a new user experience for discovery or for searching for items, it strikes me

622
00:43:09,520 --> 00:43:13,680
that you have to take a very different approach and building out the business case for these

623
00:43:13,680 --> 00:43:21,000
two types of things, and that depending on the culture of an organization, the management

624
00:43:21,000 --> 00:43:25,880
team, et cetera, it may be more difficult to do one than the other.

625
00:43:25,880 --> 00:43:30,000
Do you have any insights on navigating that process based on your experience working

626
00:43:30,000 --> 00:43:36,520
across these different types of problems, and as you described it, kind of the maturity

627
00:43:36,520 --> 00:43:42,240
of starting from one type of problem and moving to the next and then moving to the next?

628
00:43:42,240 --> 00:43:48,160
Yeah, that's a really great question, and I would say that the most important thing

629
00:43:48,160 --> 00:43:56,520
is that you have management that's for thinking enough to know that these sort of things

630
00:43:56,520 --> 00:44:02,440
is not an easy win, and it's not a win that happens immediately, but it's something

631
00:44:02,440 --> 00:44:07,480
where you have to invest for a while before you get something good, and you really don't

632
00:44:07,480 --> 00:44:11,120
know exactly how long that's going to take.

633
00:44:11,120 --> 00:44:17,400
So management is really important, and then these managers, they then have to say, okay,

634
00:44:17,400 --> 00:44:23,480
we're going to not try and devote all of our resources just to the next release cycle,

635
00:44:23,480 --> 00:44:29,120
but we're also going to devote some resources to things that are not going to pay off immediately.

636
00:44:29,120 --> 00:44:32,920
And so I work in Salando Research, and that's what we do.

637
00:44:32,920 --> 00:44:38,240
That's what we try and focus on, is things that are more of long-term benefit and less

638
00:44:38,240 --> 00:44:39,240
short-term.

639
00:44:39,240 --> 00:44:44,160
And so it's really great that the Salando management team has decided that this is a really

640
00:44:44,160 --> 00:44:50,960
important thing, and this is really something that I find hard to find in a lot of companies,

641
00:44:50,960 --> 00:44:53,160
and so I'm really happy about this.

642
00:44:53,160 --> 00:45:00,000
And then from our perspective, it's helpful to not put all your eggs in one basket.

643
00:45:00,000 --> 00:45:07,320
So don't just focus on one deliverable, but focus on portfolio of deliverables.

644
00:45:07,320 --> 00:45:11,120
So we try and focus on four main things.

645
00:45:11,120 --> 00:45:18,120
We focus on prestige as one, so things like what I'm doing right now, with talks and podcasts

646
00:45:18,120 --> 00:45:23,120
and generating excitement for Salando and the great research we're doing.

647
00:45:23,120 --> 00:45:29,760
We focus on products, new products, we focus on papers, so academic publications to really

648
00:45:29,760 --> 00:45:35,880
sell the great research we're doing within the academic community, and we focus on patents,

649
00:45:35,880 --> 00:45:40,120
patenting, whenever we come up with new ideas, we patent them, because the patent portfolio

650
00:45:40,120 --> 00:45:43,120
is also very valuable.

651
00:45:43,120 --> 00:45:45,680
Interesting.

652
00:45:45,680 --> 00:45:50,920
So you mentioned prestige, patents, publications, and some other things.

653
00:45:50,920 --> 00:45:58,200
It sounds like from that that you guys are very active out in the machine learning community,

654
00:45:58,200 --> 00:46:02,960
as well as e-commerce communities, how can folks in the listening audience who want

655
00:46:02,960 --> 00:46:08,560
to learn more about the kinds of things you're doing, how can folks find you and find all

656
00:46:08,560 --> 00:46:10,560
that good stuff?

657
00:46:10,560 --> 00:46:11,560
That's a great question.

658
00:46:11,560 --> 00:46:16,840
We have a tech blog, so the Salando tech blog, and it's not just us that they're right

659
00:46:16,840 --> 00:46:21,360
to this blog, but there's lots of different techies at Salando who write to this.

660
00:46:21,360 --> 00:46:25,720
And so, and there's also Salando research page where we're different projects are detailed

661
00:46:25,720 --> 00:46:27,200
that we're working on.

662
00:46:27,200 --> 00:46:29,120
There's two great ways to get started.

663
00:46:29,120 --> 00:46:33,000
If you like what you see, you can always send us a job application.

664
00:46:33,000 --> 00:46:37,680
We're always looking for new, excited data scientists and researchers.

665
00:46:37,680 --> 00:46:41,200
So those are two great ways to get into what we're doing.

666
00:46:41,200 --> 00:46:42,200
Awesome.

667
00:46:42,200 --> 00:46:45,200
And I'll include links to those in the show notes.

668
00:46:45,200 --> 00:46:46,200
Yes.

669
00:46:46,200 --> 00:46:48,000
Calvin, I really enjoyed this conversation.

670
00:46:48,000 --> 00:46:49,000
Thank you so much.

671
00:46:49,000 --> 00:46:50,000
Yes.

672
00:46:50,000 --> 00:46:51,000
Yes.

673
00:46:51,000 --> 00:46:53,000
Thanks for taking the time.

674
00:46:53,000 --> 00:46:56,480
All right, everyone.

675
00:46:56,480 --> 00:46:58,320
That's our show for today.

676
00:46:58,320 --> 00:47:03,240
Thanks so much for listening and for your continued feedback and support.

677
00:47:03,240 --> 00:47:07,960
For the notes for this episode, to ask any questions or to let us know how you like the

678
00:47:07,960 --> 00:47:13,960
show, please, please, please leave a comment on the show notes page at twimolei.com slash

679
00:47:13,960 --> 00:47:16,800
talk slash 38.

680
00:47:16,800 --> 00:47:22,040
Thanks again to our sponsors, bonsai and wise.io at GE Digital.

681
00:47:22,040 --> 00:47:27,640
For more information about bonsai, visit bons.ai slash twimolei.

682
00:47:27,640 --> 00:47:33,320
And for more on GE Digital, visit GE.com slash digital.

683
00:47:33,320 --> 00:47:40,760
Once you're done with this show, take 30 seconds to head over to twimolei.com slash AISF to enter

684
00:47:40,760 --> 00:47:45,400
our giveaway for a free ticket to the AI conference in San Francisco.

685
00:47:45,400 --> 00:47:48,440
You could be one of two lucky winners.

686
00:47:48,440 --> 00:47:54,200
For more information on industrial AI, my report on the topic or the industrial AI podcast

687
00:47:54,200 --> 00:47:59,560
series, visit twimolei.com slash industrial AI.

688
00:47:59,560 --> 00:48:26,320
Thanks again for listening and catch you next time.

