1
00:00:00,000 --> 00:00:09,240
All right, everyone, I am on the line with Gary Ren.

2
00:00:09,240 --> 00:00:12,400
Gary is a machine learning engineer at DoorDash.

3
00:00:12,400 --> 00:00:15,160
Gary, welcome to the Twomla AI podcast.

4
00:00:15,160 --> 00:00:15,880
Hey, Sam.

5
00:00:15,880 --> 00:00:16,800
Thanks for having me.

6
00:00:16,800 --> 00:00:20,640
I'm glad to get a chance to speak with you.

7
00:00:20,640 --> 00:00:23,600
Yeah, imagine DoorDash is having a bit of a moment.

8
00:00:23,600 --> 00:00:27,440
Nowadays, you've been pretty, things been pretty crazy there.

9
00:00:27,440 --> 00:00:33,000
Yeah, there's definitely been an unprecedented need for our services lately.

10
00:00:33,000 --> 00:00:35,880
And yeah, we've definitely done, we're definitely doing our best

11
00:00:35,880 --> 00:00:40,160
to make sure that we're available for our consumers, for our merchants and our dashers.

12
00:00:40,160 --> 00:00:41,160
Awesome, awesome.

13
00:00:41,160 --> 00:00:47,040
Well, why don't we start by, as we typically do here on the show,

14
00:00:47,040 --> 00:00:49,200
having you share a little bit about your background

15
00:00:49,200 --> 00:00:52,280
and how you came to work in machine learning?

16
00:00:52,280 --> 00:00:52,960
Cool.

17
00:00:52,960 --> 00:00:55,760
Yeah, so I don't have any kind of super inspirational story

18
00:00:55,760 --> 00:00:58,200
about how I got into machine learning.

19
00:00:58,200 --> 00:01:03,000
But I will say that I first found out about machine learning when I was in college.

20
00:01:03,000 --> 00:01:07,040
I was immediately super interested because it seemed to combine computer science,

21
00:01:07,040 --> 00:01:10,160
which is what I was studying at the time, with math,

22
00:01:10,160 --> 00:01:12,880
which is a subject that I've always enjoyed.

23
00:01:12,880 --> 00:01:17,200
So after college, I joined the Microsoft being search relevance team.

24
00:01:17,200 --> 00:01:20,480
And while I was there, I got some really good hands-on experience

25
00:01:20,480 --> 00:01:23,800
applying machine learning and especially deep learning

26
00:01:23,800 --> 00:01:29,360
to search ranking and different natural language processing type of problems.

27
00:01:29,360 --> 00:01:32,160
And then I joined DoorDouch about two years ago.

28
00:01:32,160 --> 00:01:36,000
And since then, I've worked on a completely different set of problems,

29
00:01:36,000 --> 00:01:38,360
focusing on problems with logistics.

30
00:01:38,360 --> 00:01:41,160
And yeah, even though from my work experience,

31
00:01:41,160 --> 00:01:46,600
I haven't really used that much math for machine learning like I initially expected.

32
00:01:46,600 --> 00:01:50,640
All these different ML packages kind of take care of the math for you.

33
00:01:50,640 --> 00:01:54,480
But it's still been super cool to see how with some lines of code

34
00:01:54,480 --> 00:01:56,360
and some math in the background,

35
00:01:56,360 --> 00:02:02,320
you can create these models that can do everything from predict what users are searching for,

36
00:02:02,320 --> 00:02:06,160
to predict how long it will take for you to be delivered.

37
00:02:06,160 --> 00:02:09,400
So yeah, I'm fortunate enough to work on a range of machine learning problems.

38
00:02:09,400 --> 00:02:11,080
And yeah, I've really enjoyed it.

39
00:02:11,080 --> 00:02:11,760
Cool, cool.

40
00:02:11,760 --> 00:02:15,000
How long were you at Microsoft before DoorDouch?

41
00:02:15,000 --> 00:02:18,160
Yeah, I've brought two and a half years.

42
00:02:18,160 --> 00:02:23,920
It's interesting, I talked to a lot of folks at Microsoft and beyond.

43
00:02:23,920 --> 00:02:26,880
But Microsoft in particular,

44
00:02:26,880 --> 00:02:31,520
there's a ton of talented people that kind of got their start working on Bing.

45
00:02:31,520 --> 00:02:36,040
And I think we like to beat up on Bing's search engine.

46
00:02:36,040 --> 00:02:39,360
But the folks that were working on that team

47
00:02:39,360 --> 00:02:42,880
are doing pretty incredible things all over the place.

48
00:02:42,880 --> 00:02:46,320
Yeah, I definitely learn a lot from my time there at Bing.

49
00:02:46,320 --> 00:02:49,400
And there are tons of smart people working there as well.

50
00:02:49,400 --> 00:02:51,200
So it was a great experience for me.

51
00:02:51,200 --> 00:02:52,680
Awesome, awesome.

52
00:02:52,680 --> 00:03:00,880
And so I think we'll be following along a general kind of general discussion

53
00:03:00,880 --> 00:03:05,360
that you led at the recent Nvidia GTC conference

54
00:03:05,360 --> 00:03:11,920
talking about how machine learning powers on demand logistics at DoorDouch.

55
00:03:11,920 --> 00:03:17,640
But before we dig into the specifics of the logistics applications there,

56
00:03:17,640 --> 00:03:25,400
maybe tell us a little bit about the kind of the general landscape for ML at the company.

57
00:03:25,400 --> 00:03:30,120
Yeah, so I think to better understand how we're using machine learning at DoorDouch,

58
00:03:30,120 --> 00:03:33,360
it's best to start by first understanding our business,

59
00:03:33,360 --> 00:03:36,000
which consists of a three-sided marketplace.

60
00:03:36,000 --> 00:03:40,600
So this includes consumers, merchants and dashers.

61
00:03:40,600 --> 00:03:44,760
And each of these sites, they use DoorDouch for a different reason.

62
00:03:44,760 --> 00:03:49,560
For example, consumers want the convenience of being able to stay at home

63
00:03:49,560 --> 00:03:52,440
while still having access to all their favorite merchants.

64
00:03:52,440 --> 00:03:55,720
Dashers want flexible work opportunities.

65
00:03:55,720 --> 00:03:59,920
And merchants want to increase the reach and revenue of their business.

66
00:03:59,920 --> 00:04:03,200
And dashers are the folks that are delivering the food?

67
00:04:03,200 --> 00:04:04,040
Yep, sorry to clarify.

68
00:04:04,040 --> 00:04:06,520
So dashers are the drivers who deliver the food, correct?

69
00:04:06,520 --> 00:04:07,800
Got it, got it.

70
00:04:07,800 --> 00:04:08,720
OK.

71
00:04:08,720 --> 00:04:12,560
And so, yeah, so this three-sided marketplace leads to many interesting problems

72
00:04:12,560 --> 00:04:14,560
that machine learning is applied to.

73
00:04:14,560 --> 00:04:17,360
So for example, between consumers and merchants,

74
00:04:17,360 --> 00:04:21,040
there's a lot of your traditional e-commerce type of problems.

75
00:04:21,040 --> 00:04:25,520
For example, recommendations, search ranking,

76
00:04:25,520 --> 00:04:28,880
those are some things that are pretty standard in e-commerce.

77
00:04:28,880 --> 00:04:31,200
And those are problems that we have as well.

78
00:04:31,200 --> 00:04:33,760
And then between consumers and dashers,

79
00:04:33,760 --> 00:04:37,320
there's a lot of problems around balancing supply and demand.

80
00:04:37,320 --> 00:04:40,280
How do we make sure that we have enough dashers supply

81
00:04:40,280 --> 00:04:42,080
to meet the consumer demand?

82
00:04:42,080 --> 00:04:43,360
And some of the ways that we do that

83
00:04:43,360 --> 00:04:46,520
is by forecasting demand, forecasting supply.

84
00:04:46,520 --> 00:04:51,280
And there is leverage such as dynamic pricing to try and balance it too.

85
00:04:51,280 --> 00:04:53,480
And then between dashers and merchants,

86
00:04:53,480 --> 00:04:57,600
there's a lot of your traditional dispatch type of problems,

87
00:04:57,600 --> 00:05:00,080
such as the core Simon algorithm, which

88
00:05:00,080 --> 00:05:03,960
is how we find the optimal matching between dashers and deliveries.

89
00:05:03,960 --> 00:05:05,960
And so each of these three sides as well,

90
00:05:05,960 --> 00:05:08,560
they also individually have their own interesting problems

91
00:05:08,560 --> 00:05:10,480
that we can apply machine learning to.

92
00:05:10,480 --> 00:05:13,160
For example, for merchants, one challenge of problem

93
00:05:13,160 --> 00:05:15,680
is how do we predict how long it would take merchants

94
00:05:15,680 --> 00:05:17,680
to prepare the food?

95
00:05:17,680 --> 00:05:20,520
If it's a patai, if it's a pizza, if it's just ice cream,

96
00:05:20,520 --> 00:05:21,840
that's ready to go.

97
00:05:21,840 --> 00:05:24,480
How do we actually predict this as the merchant?

98
00:05:24,480 --> 00:05:26,080
Yeah, so we do ask them.

99
00:05:26,080 --> 00:05:27,520
But merchants, a lot of times, you know,

100
00:05:27,520 --> 00:05:29,800
it's very hectic, very busy in the kitchen.

101
00:05:29,800 --> 00:05:33,720
And they're not able to provide an accurate estimate either.

102
00:05:33,720 --> 00:05:36,360
And so it's super important.

103
00:05:36,360 --> 00:05:40,000
I think about one of my favorite restaurants here in town.

104
00:05:40,000 --> 00:05:41,800
It's a Jamaican restaurant.

105
00:05:41,800 --> 00:05:44,680
And they are particularly notorious for,

106
00:05:44,680 --> 00:05:45,960
oh, it'll take an hour.

107
00:05:45,960 --> 00:05:47,160
You get there.

108
00:05:47,160 --> 00:05:50,640
And you're waiting, you know, another hour, you know,

109
00:05:50,640 --> 00:05:52,760
for the food.

110
00:05:52,760 --> 00:05:54,400
So I need to apply machine learning to that

111
00:05:54,400 --> 00:05:55,680
is what I'm hearing.

112
00:05:55,680 --> 00:05:57,960
Yeah, and that's exactly what we do.

113
00:05:57,960 --> 00:06:01,200
We're definitely taking input from the merchants.

114
00:06:01,200 --> 00:06:03,160
And we also use our own historical data

115
00:06:03,160 --> 00:06:05,200
to try and augment that and come

116
00:06:05,200 --> 00:06:07,720
of the most accurate predictions possible.

117
00:06:07,720 --> 00:06:08,720
Mm-hmm.

118
00:06:08,720 --> 00:06:10,200
Cool.

119
00:06:10,200 --> 00:06:15,680
So the particular application that you presented on

120
00:06:15,680 --> 00:06:17,560
was on-demand logistics.

121
00:06:17,560 --> 00:06:19,760
Is this one that you personally work on,

122
00:06:19,760 --> 00:06:25,120
or is this just one of the many applications at DoorDash?

123
00:06:25,120 --> 00:06:27,320
Yeah, so this is one that I personally work on.

124
00:06:27,320 --> 00:06:29,800
So I work on the logistics team.

125
00:06:29,800 --> 00:06:31,920
And so logistics.

126
00:06:31,920 --> 00:06:33,480
Yeah, the way I'll explain it is,

127
00:06:33,480 --> 00:06:36,280
it's kind of the core engine that powers

128
00:06:36,280 --> 00:06:39,560
the fulfillment of deliveries on DoorDash.

129
00:06:39,560 --> 00:06:42,360
And so logistics includes many of the problems

130
00:06:42,360 --> 00:06:46,040
I mentioned before, such as balancing dashed supply

131
00:06:46,040 --> 00:06:50,200
and consumer demand, as well as the core assignment problem,

132
00:06:50,200 --> 00:06:52,680
which again is how we often find the matching

133
00:06:52,680 --> 00:06:54,520
between dashes and deliveries.

134
00:06:54,520 --> 00:06:56,520
Mm-hmm.

135
00:06:56,520 --> 00:07:00,440
And so kind of walk us through how

136
00:07:00,440 --> 00:07:03,440
to approach those kinds of problems.

137
00:07:03,440 --> 00:07:04,400
Mm-hmm.

138
00:07:04,400 --> 00:07:06,160
Yeah, so I'll say, I'll start by saying

139
00:07:06,160 --> 00:07:09,840
that the high-level goal of the logistics engine

140
00:07:09,840 --> 00:07:14,800
is to make sure that we have fast and efficient deliveries.

141
00:07:14,800 --> 00:07:17,520
And so what this means is that obviously consumers

142
00:07:17,520 --> 00:07:20,800
will hate it if their order takes a long time to be delivered.

143
00:07:20,800 --> 00:07:23,640
And so we want our deliveries to be as fast as possible.

144
00:07:23,640 --> 00:07:25,480
But at the same time, we want our marketplace

145
00:07:25,480 --> 00:07:29,000
to be operating as efficiently as possible, as well.

146
00:07:29,000 --> 00:07:33,560
And so the way that we do that is in a few different stages.

147
00:07:33,560 --> 00:07:36,320
So first is setting up the marketplace

148
00:07:36,320 --> 00:07:38,840
by balancing supply and demand.

149
00:07:38,840 --> 00:07:43,080
So you can imagine that if we have 100 deliveries

150
00:07:43,080 --> 00:07:45,720
but only 10 dashers, then no matter what

151
00:07:45,720 --> 00:07:48,440
else we do in the rest of our logistics system,

152
00:07:48,440 --> 00:07:50,280
we're now going to have fast deliveries.

153
00:07:50,280 --> 00:07:51,680
Because there's 100 deliveries out there

154
00:07:51,680 --> 00:07:54,280
and only 10 dashes available to fulfill them.

155
00:07:54,280 --> 00:07:57,760
And vice versa, if we have 100 dashers,

156
00:07:57,760 --> 00:08:00,880
the only 10 deliveries, then a lot of these dashers

157
00:08:00,880 --> 00:08:02,120
will be sitting around idle.

158
00:08:02,120 --> 00:08:05,360
And it won't be a very efficient use of their time.

159
00:08:05,360 --> 00:08:07,120
So balancing supply and demand and setting up

160
00:08:07,120 --> 00:08:10,360
the marketplace for success is kind of first step

161
00:08:10,360 --> 00:08:12,800
in our logistics system.

162
00:08:12,800 --> 00:08:15,800
The second step would be route planning.

163
00:08:15,800 --> 00:08:19,760
So once you have these dashers and once you have these deliveries,

164
00:08:19,760 --> 00:08:21,280
it's super important for us to plan out

165
00:08:21,280 --> 00:08:25,520
the optimal routes for each of these dashers and deliveries.

166
00:08:25,520 --> 00:08:28,800
And so you can imagine that there's thousands of thousands

167
00:08:28,800 --> 00:08:32,720
routes that we need to account for in real time.

168
00:08:32,720 --> 00:08:36,560
For example, between the dasher and the merchant

169
00:08:36,560 --> 00:08:39,040
and between the merchant and consumer.

170
00:08:39,040 --> 00:08:41,520
And so with the plan for all these routes in real time,

171
00:08:41,520 --> 00:08:45,560
and once these are ready, they all get fed into the final stage,

172
00:08:45,560 --> 00:08:48,360
which is where the optimal matching happens.

173
00:08:48,360 --> 00:08:51,520
So once we have all these deliveries, all these dashers,

174
00:08:51,520 --> 00:08:54,960
and all these data about these deliveries and dashers,

175
00:08:54,960 --> 00:08:56,720
how do we find the optimal matching

176
00:08:56,720 --> 00:08:59,480
between dashers and deliveries in order

177
00:08:59,480 --> 00:09:02,760
to have the fastest deliveries possible

178
00:09:02,760 --> 00:09:05,400
while having an efficient marketplace?

179
00:09:05,400 --> 00:09:07,160
And so yeah, those are good.

180
00:09:07,160 --> 00:09:09,200
I was just going to say a couple of questions jump out of me.

181
00:09:09,200 --> 00:09:12,480
One is you've referred a couple of times

182
00:09:12,480 --> 00:09:15,720
to a logistics engine or a logistics system.

183
00:09:15,720 --> 00:09:19,640
Is this kind of a single piece of technology

184
00:09:19,640 --> 00:09:21,920
or a single literally a single system,

185
00:09:21,920 --> 00:09:25,240
or is it a suite of different applications

186
00:09:25,240 --> 00:09:29,640
that are used to perform all these different tasks?

187
00:09:29,640 --> 00:09:32,200
Yeah, so it's a suite of different applications.

188
00:09:32,200 --> 00:09:34,760
So we have multiple systems that kind of take care

189
00:09:34,760 --> 00:09:37,360
of each of these individual components I mentioned.

190
00:09:37,360 --> 00:09:39,720
So we have one system that takes care of balance

191
00:09:39,720 --> 00:09:43,440
and supply demand, another that takes care of route planning,

192
00:09:43,440 --> 00:09:47,280
and another that takes care of the actual matching itself.

193
00:09:47,280 --> 00:09:52,280
And the way you described it happening in series,

194
00:09:54,840 --> 00:09:56,720
I'm envisioning something that,

195
00:09:56,720 --> 00:10:01,720
or well, the question is are you doing the balancing

196
00:10:02,760 --> 00:10:07,760
and matching and all this in batches, hourly or something?

197
00:10:08,040 --> 00:10:09,680
That doesn't seem like it would work, right?

198
00:10:09,680 --> 00:10:12,440
Or is there a way that you're doing it real time

199
00:10:12,440 --> 00:10:14,720
or what's the granularity that you're making

200
00:10:14,720 --> 00:10:16,120
these kinds of decisions?

201
00:10:16,120 --> 00:10:18,080
Yeah, that's a good question.

202
00:10:18,080 --> 00:10:21,040
So I'll start by talking about how we do the balancing

203
00:10:21,040 --> 00:10:22,120
for supply and demand.

204
00:10:23,080 --> 00:10:27,720
So for this, we actually do it over a pretty wide time range.

205
00:10:27,720 --> 00:10:30,440
So several days out, that's when we first start

206
00:10:30,440 --> 00:10:32,760
to try and balance a pandemic.

207
00:10:32,760 --> 00:10:35,560
So for example, starting today,

208
00:10:35,560 --> 00:10:38,920
we'll try to make predictions for what will happen next week.

209
00:10:38,920 --> 00:10:41,600
And based on that, we'll already start taking actions

210
00:10:41,600 --> 00:10:43,360
to try and balance a pandemic.

211
00:10:43,360 --> 00:10:45,080
For example, if we predict that

212
00:10:45,080 --> 00:10:48,000
we're gonna get a huge spike in demand next week,

213
00:10:48,000 --> 00:10:49,400
then we can take different actions

214
00:10:49,400 --> 00:10:52,240
to make sure that we try and get more dashes on the road.

215
00:10:52,240 --> 00:10:54,880
And the reason that we do it so far in advance

216
00:10:54,880 --> 00:10:58,240
is because for our dashers, it's useful for them

217
00:10:58,240 --> 00:11:01,560
to be able to know when it's gonna be busy in the future

218
00:11:01,560 --> 00:11:04,240
and better plan out their own schedules that way.

219
00:11:04,240 --> 00:11:07,480
And then once we make this initial prediction,

220
00:11:07,480 --> 00:11:12,120
we also continue to update these predictions as we go.

221
00:11:12,120 --> 00:11:14,080
And all the way up to real time.

222
00:11:14,080 --> 00:11:17,000
And so in real time, we continue to monitor

223
00:11:17,000 --> 00:11:18,440
the state of the market.

224
00:11:18,440 --> 00:11:20,200
And so we see that we try to check

225
00:11:20,200 --> 00:11:23,400
if there's an imbalance between dashers and deliveries.

226
00:11:23,400 --> 00:11:25,920
And if so, again, we take different actions

227
00:11:25,920 --> 00:11:27,280
to try and balance it.

228
00:11:27,280 --> 00:11:30,280
So in real time, if we notice that there's not

229
00:11:30,280 --> 00:11:32,880
a dashes on the road, we'll take different actions

230
00:11:32,880 --> 00:11:35,520
to maybe message dashers, telling them

231
00:11:35,520 --> 00:11:39,680
that it's very busy right now, or creating more incentives.

232
00:11:39,680 --> 00:11:43,080
And vice versa, if there's too many deliveries,

233
00:11:43,080 --> 00:11:46,760
then we have lovers such as search pricing,

234
00:11:46,760 --> 00:11:48,760
where we'll increase pricing,

235
00:11:48,760 --> 00:11:50,840
in order to hopefully curb them in.

236
00:11:50,840 --> 00:11:52,640
And we can also do messaging to dashers

237
00:11:52,640 --> 00:11:55,600
to let them know that, hey, it's not that busy right now.

238
00:11:55,600 --> 00:11:57,640
So it might not be the best time to dash.

239
00:11:57,640 --> 00:11:58,960
Yeah, okay.

240
00:12:00,520 --> 00:12:05,560
And so that is that part of the problem is done

241
00:12:05,560 --> 00:12:08,360
kind of over this extended time period.

242
00:12:09,360 --> 00:12:10,720
I'm imagining other parts of it,

243
00:12:10,720 --> 00:12:15,720
like the core matching has to happen kind of on the fly.

244
00:12:17,680 --> 00:12:20,640
Yeah, so core matching is definitely more real time.

245
00:12:21,480 --> 00:12:23,840
So as deliveries come in,

246
00:12:23,840 --> 00:12:26,600
as we predict that they'll be available to pick up,

247
00:12:26,600 --> 00:12:29,160
so kind of going back to the food preparation time

248
00:12:29,160 --> 00:12:31,040
that we were talking about before.

249
00:12:31,040 --> 00:12:34,440
Obviously, we don't want to assign delivery right away

250
00:12:34,440 --> 00:12:36,680
after the order has been submitted,

251
00:12:36,680 --> 00:12:39,200
because a lot of times the food takes an hour

252
00:12:39,200 --> 00:12:42,120
to be prepared, then we will be assigning a dasher

253
00:12:42,120 --> 00:12:43,480
way too early.

254
00:12:43,480 --> 00:12:46,880
And so once we have these raw inputs from the deliveries,

255
00:12:46,880 --> 00:12:49,640
we also make a bunch of different predictions,

256
00:12:49,640 --> 00:12:52,480
one of which is the food preparation time.

257
00:12:52,480 --> 00:12:55,800
And then again, all these raw data along these predictions

258
00:12:55,800 --> 00:12:58,680
get fed into our matching system,

259
00:12:58,680 --> 00:13:00,440
which we'll find the optimal matching.

260
00:13:00,440 --> 00:13:02,240
And yeah, this is all done in real time.

261
00:13:02,240 --> 00:13:05,520
We get inputs from deliveries and dashers in real time,

262
00:13:05,520 --> 00:13:07,200
make the predictions in real time,

263
00:13:07,200 --> 00:13:09,240
and also do the matching real time.

264
00:13:09,240 --> 00:13:10,880
One thing we are moving towards though,

265
00:13:10,880 --> 00:13:14,760
and that we are exploring is you can imagine that,

266
00:13:14,760 --> 00:13:17,040
for example, as we've grown,

267
00:13:17,040 --> 00:13:20,400
we've noticed patterns and where our demand

268
00:13:20,400 --> 00:13:22,480
is comes in throughout the day.

269
00:13:22,480 --> 00:13:25,200
So for example, if there's a really popular merchant,

270
00:13:25,200 --> 00:13:27,440
then it's not that hard to expect

271
00:13:27,440 --> 00:13:29,400
that that merchant will receive some orders

272
00:13:29,400 --> 00:13:32,080
during a Friday dinner, for example.

273
00:13:32,080 --> 00:13:34,040
And so one of the things that we're exploring

274
00:13:34,040 --> 00:13:37,640
is trying to anticipate these orders ahead of time.

275
00:13:37,640 --> 00:13:40,400
And then that way, we can better position our fleet

276
00:13:40,400 --> 00:13:42,400
and better make our assignments to account

277
00:13:42,400 --> 00:13:44,680
for these future deliveries.

278
00:13:44,680 --> 00:13:46,600
Yeah, I was going to ask about that.

279
00:13:46,600 --> 00:13:51,600
I noticed for scheduled ubers, for example,

280
00:13:52,840 --> 00:13:57,360
the impression that I get is not that it actually schedules

281
00:13:57,360 --> 00:14:01,800
the ride, but that it inserts the order for me at the time,

282
00:14:01,800 --> 00:14:04,800
you know, before I need the ride,

283
00:14:04,800 --> 00:14:06,600
but, you know, kind of real time.

284
00:14:06,600 --> 00:14:10,400
There's not really any notion of scheduling.

285
00:14:10,400 --> 00:14:12,680
And I don't know if DoorDash has a notion of scheduling,

286
00:14:12,680 --> 00:14:14,560
like I'd like my dinner at seven o'clock tonight

287
00:14:14,560 --> 00:14:17,200
and so figure out all the kind of working backwards.

288
00:14:17,200 --> 00:14:18,680
And I was curious if that's a,

289
00:14:20,960 --> 00:14:24,440
is that a, you know, based on,

290
00:14:26,480 --> 00:14:28,920
you know, a lot of experimentation on how to do that,

291
00:14:28,920 --> 00:14:30,320
or is it just a simplification

292
00:14:30,320 --> 00:14:32,280
that kind of works in the industry

293
00:14:32,280 --> 00:14:35,560
for these marketplace types of applications?

294
00:14:36,600 --> 00:14:39,720
Yeah, so we do have scheduled deliveries as well.

295
00:14:39,720 --> 00:14:40,560
Okay.

296
00:14:40,560 --> 00:14:42,120
And thanks so much to Wages ascribe.

297
00:14:42,120 --> 00:14:44,480
Yeah, we kind of just treat them as a regular delivery

298
00:14:44,480 --> 00:14:46,880
that happens sometimes in the future.

299
00:14:46,880 --> 00:14:47,720
Okay.

300
00:14:47,720 --> 00:14:50,680
And so for some of the future, predicting future deliveries

301
00:14:50,680 --> 00:14:54,120
work that I was mentioning, basically,

302
00:14:54,120 --> 00:14:55,840
you can think of as scheduled deliveries,

303
00:14:55,840 --> 00:14:58,000
a kind of future deliveries that we know

304
00:14:58,000 --> 00:15:01,320
with pretty much 100% certainty will happen.

305
00:15:01,320 --> 00:15:04,160
Whereas any prediction that we end up making

306
00:15:04,160 --> 00:15:06,280
will have some kind of confidence interval

307
00:15:06,280 --> 00:15:08,760
if that delivery will actually occur or not.

308
00:15:08,760 --> 00:15:11,520
And so we can treat them a pretty similar way.

309
00:15:11,520 --> 00:15:13,360
But yeah, in the end, they are all accounted

310
00:15:13,360 --> 00:15:15,200
for pretty dynamically.

311
00:15:15,200 --> 00:15:17,240
Again, we try to, we ultimately try to predict

312
00:15:17,240 --> 00:15:19,160
when the food will be ready to pick up

313
00:15:19,160 --> 00:15:21,240
and assign the dash of base on that time.

314
00:15:23,320 --> 00:15:27,760
So one of the most interesting aspects of your approach

315
00:15:27,760 --> 00:15:29,960
and you spend quite a bit of time

316
00:15:29,960 --> 00:15:31,600
talking about this in your presentation

317
00:15:31,600 --> 00:15:36,560
is that you are pairing machine learning

318
00:15:36,560 --> 00:15:38,720
with kind of traditional approaches

319
00:15:38,720 --> 00:15:40,960
to logistics optimization.

320
00:15:40,960 --> 00:15:43,800
So you know, let's dive into that a little bit.

321
00:15:43,800 --> 00:15:44,760
Yeah, awesome.

322
00:15:44,760 --> 00:15:47,280
Yeah, so definitely we do make a lot of use

323
00:15:47,280 --> 00:15:48,600
of combining machine learning

324
00:15:48,600 --> 00:15:51,000
and traditional operations research.

325
00:15:51,000 --> 00:15:54,120
And so I'll talk about how we apply this combination

326
00:15:54,120 --> 00:15:58,160
to both supply and demand as well as the optimal matching problem.

327
00:15:58,160 --> 00:16:00,840
So for supply and demand, like I mentioned,

328
00:16:00,840 --> 00:16:04,120
we try and forecast out supply and demand multiple days

329
00:16:04,120 --> 00:16:05,280
and events.

330
00:16:05,280 --> 00:16:07,680
And when we determine that we'll have more deliveries

331
00:16:07,680 --> 00:16:10,480
than dashers, we'll create these incentives

332
00:16:10,480 --> 00:16:12,720
to try and get more dashes on the road.

333
00:16:12,720 --> 00:16:15,200
And again, we do that upfront and in advance

334
00:16:15,200 --> 00:16:17,960
so that dashes have time to plan on their schedules.

335
00:16:17,960 --> 00:16:20,560
And so what this means is that we have to forecast out

336
00:16:20,560 --> 00:16:21,720
what the men will be.

337
00:16:21,720 --> 00:16:24,680
And forecast out what supply will be and determine

338
00:16:24,680 --> 00:16:26,640
what the right incentive is.

339
00:16:26,640 --> 00:16:29,200
And so this gets very challenging

340
00:16:29,200 --> 00:16:31,160
one because of the complexity.

341
00:16:31,160 --> 00:16:35,720
So for example, if you want to determine the optimal incentive

342
00:16:35,720 --> 00:16:39,240
for every single region and every single time of day,

343
00:16:39,240 --> 00:16:40,960
that obviously gets very complicated.

344
00:16:40,960 --> 00:16:42,880
And there's lots of possible combinations

345
00:16:42,880 --> 00:16:44,760
that you can choose.

346
00:16:44,760 --> 00:16:46,200
Another reason it's so challenging

347
00:16:46,200 --> 00:16:50,200
is because forecasting itself is always a challenging problem.

348
00:16:50,200 --> 00:16:53,200
Forecasting, future demand, forecasting, future supply.

349
00:16:53,200 --> 00:16:55,160
There are a lot of factors that go into it.

350
00:16:55,160 --> 00:16:56,920
And especially when you're predicting these things

351
00:16:56,920 --> 00:17:00,160
that are so heavily influenced by the real world,

352
00:17:00,160 --> 00:17:01,600
it makes it even harder.

353
00:17:01,600 --> 00:17:05,880
There's super high variance from things such as weather,

354
00:17:05,880 --> 00:17:10,360
traffic, special events, a pandemic.

355
00:17:10,360 --> 00:17:12,000
So all these things can have huge impact

356
00:17:12,000 --> 00:17:13,840
on our future supply demand.

357
00:17:13,840 --> 00:17:15,280
And so being able to handle all these things

358
00:17:15,280 --> 00:17:17,280
are super challenging.

359
00:17:17,280 --> 00:17:19,360
And so how we try to solve it is

360
00:17:19,360 --> 00:17:22,480
by combining machine learning and operations research.

361
00:17:22,480 --> 00:17:25,400
So with machine learning, we try to build our models

362
00:17:25,400 --> 00:17:29,600
that accurately forecast that demand a supply.

363
00:17:29,600 --> 00:17:33,600
And so once we have these models, what we can do

364
00:17:33,600 --> 00:17:36,240
is feed them into operations research system

365
00:17:36,240 --> 00:17:39,240
in order to find the optimal incentives.

366
00:17:39,240 --> 00:17:42,640
And so the way we do that is by framing it

367
00:17:42,640 --> 00:17:45,760
as a traditional operations research problem,

368
00:17:45,760 --> 00:17:47,920
where we have some objective.

369
00:17:47,920 --> 00:17:50,640
And so in this case, our objective

370
00:17:50,640 --> 00:17:54,080
would be to maximize our delivery quality.

371
00:17:54,080 --> 00:17:56,240
And we also have some constraints.

372
00:17:56,240 --> 00:18:00,840
For example, we can't create $20 incentives.

373
00:18:00,840 --> 00:18:03,240
We want to keep cost low as well.

374
00:18:03,240 --> 00:18:07,560
And so given this objective of maximizing delivery quality

375
00:18:07,560 --> 00:18:09,720
and given this constraint of cost,

376
00:18:09,720 --> 00:18:13,840
we can feed our inputs from our machine learning model

377
00:18:13,840 --> 00:18:15,800
into this system.

378
00:18:15,800 --> 00:18:18,960
And then we can ultimately solve for the optimal incentives

379
00:18:18,960 --> 00:18:21,320
by using integer programming.

380
00:18:21,320 --> 00:18:26,160
And so this basically treats the problem as a math problem,

381
00:18:26,160 --> 00:18:28,480
where you have some objective function,

382
00:18:28,480 --> 00:18:30,800
you have some constraints, and you solve it

383
00:18:30,800 --> 00:18:33,040
through these mathematical methods.

384
00:18:33,040 --> 00:18:34,960
And so yeah, super interesting, because otherwise,

385
00:18:34,960 --> 00:18:37,880
you can imagine that how would you

386
00:18:37,880 --> 00:18:41,560
pick the optimal incentives for every city that DoorDash

387
00:18:41,560 --> 00:18:43,840
operates in for every single time of day?

388
00:18:43,840 --> 00:18:45,480
It gets very challenging.

389
00:18:45,480 --> 00:18:46,760
There's so many combinations.

390
00:18:46,760 --> 00:18:49,320
And if you have human operators do it,

391
00:18:49,320 --> 00:18:52,880
they will have to manually go through every single region.

392
00:18:52,880 --> 00:18:54,560
They will somehow have to try and balance that,

393
00:18:54,560 --> 00:18:57,760
OK, show that at $1 here in San Francisco,

394
00:18:57,760 --> 00:19:01,000
or is it better to spend that extra dollar in San Jose?

395
00:19:01,000 --> 00:19:04,280
And so by feeding into, by using operations research,

396
00:19:04,280 --> 00:19:06,640
we're able to better make these trade-offs

397
00:19:06,640 --> 00:19:10,440
and ultimately come up the optimal set of incentives

398
00:19:10,440 --> 00:19:14,520
that, again, maximize the delivery quality.

399
00:19:14,520 --> 00:19:15,960
And yeah, sorry.

400
00:19:15,960 --> 00:19:16,760
Oh, no.

401
00:19:16,760 --> 00:19:24,080
I was just going to ask, you mentioned integer programming.

402
00:19:24,080 --> 00:19:26,320
Is it also linear, like you're using linear programming

403
00:19:26,320 --> 00:19:32,520
models, or is it nonlinear OR stuff?

404
00:19:32,520 --> 00:19:34,080
Yeah, so we have a mix.

405
00:19:34,080 --> 00:19:36,480
Some's linear, some's nonlinear.

406
00:19:36,480 --> 00:19:39,240
And sometimes we also do mixed-anger programming as well.

407
00:19:39,240 --> 00:19:40,400
OK.

408
00:19:40,400 --> 00:19:43,640
And so essentially, you've got kind of these tried-entry

409
00:19:43,640 --> 00:19:48,960
techniques for solving these systems of equations,

410
00:19:48,960 --> 00:19:51,520
where you have known quantities.

411
00:19:51,520 --> 00:19:54,360
But in your case, some of the quantities you don't actually

412
00:19:54,360 --> 00:19:56,560
know, so you use machine learning

413
00:19:56,560 --> 00:19:58,960
to try to predict what those quantities are.

414
00:19:58,960 --> 00:20:03,960
And then you kind of pump those into the traditional OR

415
00:20:03,960 --> 00:20:05,520
types of tools.

416
00:20:05,520 --> 00:20:06,720
Yep, exactly.

417
00:20:06,720 --> 00:20:09,680
And because of these natural errors in machine learning

418
00:20:09,680 --> 00:20:12,080
models, unfortunately, obviously,

419
00:20:12,080 --> 00:20:14,240
our predictions are not perfect.

420
00:20:14,240 --> 00:20:16,320
So because of that, it's super important for us

421
00:20:16,320 --> 00:20:20,000
to have real-time systems in place to kind of adjust

422
00:20:20,000 --> 00:20:21,640
for these errors.

423
00:20:21,640 --> 00:20:24,200
And so some examples are what I mentioned earlier

424
00:20:24,200 --> 00:20:28,160
where in real-time, we also have monitoring in place

425
00:20:28,160 --> 00:20:31,720
to see if there's imbalance in or supply in demand.

426
00:20:31,720 --> 00:20:34,880
And it will take different actions and response

427
00:20:34,880 --> 00:20:38,680
to essentially try and correct for the mistakes

428
00:20:38,680 --> 00:20:42,520
that are more predictive systems have made.

429
00:20:42,520 --> 00:20:46,720
And so when it's in the case of a monitoring system

430
00:20:46,720 --> 00:20:50,120
identifying an imbalance, does it

431
00:20:50,120 --> 00:20:56,240
is it trying to correct that by, does it just take an action?

432
00:20:56,240 --> 00:20:59,400
You've got some kind of program behavior

433
00:20:59,400 --> 00:21:01,440
that is based on what it observes?

434
00:21:01,440 --> 00:21:04,680
Or does it tweak the inputs and run it

435
00:21:04,680 --> 00:21:08,520
through the same system, hoping that you get a better

436
00:21:08,520 --> 00:21:10,560
output?

437
00:21:10,560 --> 00:21:12,280
Yeah, so currently the way that we do it

438
00:21:12,280 --> 00:21:16,760
is we basically, once we determine that there's an imbalance,

439
00:21:16,760 --> 00:21:20,280
we try to measure how much that imbalance is.

440
00:21:20,280 --> 00:21:23,200
And from there, we have a set of actions

441
00:21:23,200 --> 00:21:25,120
that we have available to us.

442
00:21:25,120 --> 00:21:27,280
And for each of these actions, we try

443
00:21:27,280 --> 00:21:30,440
to understand the impact of each of these actions.

444
00:21:30,440 --> 00:21:33,280
Again, that becomes like a prediction in some ways

445
00:21:33,280 --> 00:21:36,240
where we're predicting what the impact will be of different actions.

446
00:21:36,240 --> 00:21:38,680
For example, if we message dashers,

447
00:21:38,680 --> 00:21:41,360
how many more dashers will we get on the road versus

448
00:21:41,360 --> 00:21:43,560
if we add an extra dollar incentive?

449
00:21:43,560 --> 00:21:45,680
How many more dashers will we get on the road?

450
00:21:45,680 --> 00:21:47,680
And so we have all these different actions,

451
00:21:47,680 --> 00:21:50,120
estimates for the impact of each of these

452
00:21:50,120 --> 00:21:51,280
and based on that.

453
00:21:51,280 --> 00:21:53,800
And again, matching that with how much imbalance

454
00:21:53,800 --> 00:21:56,040
there is currently will pick the action

455
00:21:56,040 --> 00:21:58,680
that tries to fix the imbalance.

456
00:21:58,680 --> 00:22:00,840
Yeah, there's something that we're actively working on

457
00:22:00,840 --> 00:22:02,720
and something that we're building out.

458
00:22:02,720 --> 00:22:04,240
But that's kind of a general framework

459
00:22:04,240 --> 00:22:08,720
where we monitor and we determine how much imbalance there is

460
00:22:08,720 --> 00:22:11,400
and choose the action or the set of actions

461
00:22:11,400 --> 00:22:14,080
that we think will help us fix the imbalance.

462
00:22:14,080 --> 00:22:17,800
And do you incorporate aspects of control systems,

463
00:22:17,800 --> 00:22:18,800
control theory in there?

464
00:22:18,800 --> 00:22:22,880
I'm imagining you're monitoring, observing,

465
00:22:22,880 --> 00:22:26,000
you take some action based on what you think is going to happen.

466
00:22:26,000 --> 00:22:29,280
You kind of overshoot, you might want some dampening in there

467
00:22:29,280 --> 00:22:31,280
or you might need to overcompensate.

468
00:22:31,280 --> 00:22:36,600
Do you just think of systems in that way

469
00:22:36,600 --> 00:22:39,000
or are you just kind of taking a snapshot in time

470
00:22:39,000 --> 00:22:41,880
and if you're oscillating or not,

471
00:22:41,880 --> 00:22:43,200
you're not paying attention to that.

472
00:22:43,200 --> 00:22:44,880
You're just doing making the correction

473
00:22:44,880 --> 00:22:47,640
that needs to happen at a given time.

474
00:22:47,640 --> 00:22:49,640
Yeah, so we definitely, we frequently

475
00:22:49,640 --> 00:22:52,320
check the state of our markets in order

476
00:22:52,320 --> 00:22:55,480
to try and correct for these actions

477
00:22:55,480 --> 00:22:59,200
that maybe we went too far in one direction.

478
00:22:59,200 --> 00:23:03,320
And so yeah, we very frequently check the state of the market.

479
00:23:03,320 --> 00:23:06,480
And if we notice that say we measure dashers

480
00:23:06,480 --> 00:23:09,280
but that result in us having too many dashers on the road

481
00:23:09,280 --> 00:23:12,680
actually, at that point, yeah, we can take additional actions

482
00:23:12,680 --> 00:23:16,120
to try and either reduce the number of dashers on the road

483
00:23:16,120 --> 00:23:20,440
or maybe curb demand at that point.

484
00:23:20,440 --> 00:23:24,120
And so, yeah, and so another approach

485
00:23:24,120 --> 00:23:26,680
that we're exploring as well is framing it

486
00:23:26,680 --> 00:23:29,640
as a reinforcement learning problem.

487
00:23:29,640 --> 00:23:33,480
So you can imagine this problem fits pretty well

488
00:23:33,480 --> 00:23:35,440
into the reinforcement learning framework

489
00:23:35,440 --> 00:23:37,160
where you have some state,

490
00:23:37,160 --> 00:23:39,640
which is essentially the state of our marketplace,

491
00:23:39,640 --> 00:23:42,920
how many dashers there are, how many deliveries there are.

492
00:23:42,920 --> 00:23:44,320
You have a set of actions,

493
00:23:44,320 --> 00:23:46,240
which are these different levers that we have

494
00:23:46,240 --> 00:23:48,160
to try and correct for supply and demand.

495
00:23:49,120 --> 00:23:51,760
And then you have your reward.

496
00:23:51,760 --> 00:23:53,280
In our case, it will be metrics

497
00:23:53,280 --> 00:23:57,520
about delivery quality and efficiency of the marketplace.

498
00:23:57,520 --> 00:23:59,560
And so given these settings,

499
00:23:59,560 --> 00:24:02,920
it fits pretty nicely into reinforcement learning framework

500
00:24:02,920 --> 00:24:07,920
where we can explore and exploit, try out different actions,

501
00:24:07,920 --> 00:24:11,480
see what the reward is, what the impact is of those actions.

502
00:24:11,480 --> 00:24:14,200
And based on that, we can update our models

503
00:24:14,200 --> 00:24:17,000
to one, have better estimates of what the impact

504
00:24:17,000 --> 00:24:18,320
of different actions are,

505
00:24:18,320 --> 00:24:21,240
and two, also allow models to intelligently

506
00:24:21,240 --> 00:24:24,360
take what the best action is at any given state.

507
00:24:24,360 --> 00:24:27,160
And so yeah, this is something we're exploring.

508
00:24:27,160 --> 00:24:29,920
There's other problems with the logistics as well,

509
00:24:29,920 --> 00:24:33,440
that fits pretty nicely into the reinforcement learning framework.

510
00:24:33,440 --> 00:24:35,280
So we think that will be a pretty powerful tool

511
00:24:35,280 --> 00:24:36,440
for us moving forward.

512
00:24:37,520 --> 00:24:39,600
You mentioned that you,

513
00:24:39,600 --> 00:24:42,800
it sounds like you have kind of boiled

514
00:24:42,800 --> 00:24:45,480
all of your customer,

515
00:24:45,480 --> 00:24:50,240
sat metrics into a delivery quality metric.

516
00:24:50,240 --> 00:24:54,280
Is that a metric that you use across the board

517
00:24:54,280 --> 00:24:56,600
in assessing the performance of these kind of systems

518
00:24:56,600 --> 00:25:01,360
or is it specific to the reinforcement learning implementation

519
00:25:01,360 --> 00:25:03,200
that you're looking at?

520
00:25:03,200 --> 00:25:05,840
Yeah, so it's not specific to the reinforcement learning

521
00:25:05,840 --> 00:25:06,680
implementation.

522
00:25:07,680 --> 00:25:11,400
We do have these shared metrics that we commonly look at.

523
00:25:11,400 --> 00:25:13,480
For example, how fast does it take

524
00:25:13,480 --> 00:25:15,280
for a delivery to be delivered?

525
00:25:15,280 --> 00:25:17,320
From time when you place an order

526
00:25:17,320 --> 00:25:19,200
to when it arrives at your doorstep,

527
00:25:19,200 --> 00:25:22,720
we want to minimize that time as much as possible.

528
00:25:22,720 --> 00:25:24,480
And there's other consumer facing metrics

529
00:25:24,480 --> 00:25:25,680
as well that we care about.

530
00:25:25,680 --> 00:25:27,760
For example, cancellations.

531
00:25:27,760 --> 00:25:30,720
We want to reduce cancellations as much as possible,

532
00:25:30,720 --> 00:25:33,840
whether it's because the merchant was actually close

533
00:25:33,840 --> 00:25:37,120
or maybe the consumer got sick of waiting for so long.

534
00:25:37,120 --> 00:25:39,120
And so a lot of these metrics are pretty common

535
00:25:39,120 --> 00:25:41,960
and are shared across the board by different teams,

536
00:25:41,960 --> 00:25:43,280
whenever they work on something that

537
00:25:43,280 --> 00:25:45,400
could impact these metrics.

538
00:25:45,400 --> 00:25:47,400
But again, depending on the project,

539
00:25:47,400 --> 00:25:50,680
there could also be more specific metrics that you look at.

540
00:25:50,680 --> 00:25:53,680
You can think of these delivery times, cancellations,

541
00:25:53,680 --> 00:25:56,920
metrics like that as more of output metrics.

542
00:25:56,920 --> 00:25:59,040
But a lot of times we might want a more granular look

543
00:25:59,040 --> 00:26:01,880
at what the input metrics look like.

544
00:26:01,880 --> 00:26:04,400
And so some examples would be maybe

545
00:26:04,400 --> 00:26:07,560
in self looking at delivery times directly.

546
00:26:07,560 --> 00:26:10,280
Maybe we want to focus on looking at how long it took

547
00:26:10,280 --> 00:26:11,920
to drop off to happen.

548
00:26:11,920 --> 00:26:13,880
So say we're working on a product that

549
00:26:13,880 --> 00:26:16,160
tries to speed up the drop off process.

550
00:26:16,160 --> 00:26:17,840
How long it takes the dash to drop off

551
00:26:17,840 --> 00:26:19,880
the delivery to the consumer.

552
00:26:19,880 --> 00:26:21,440
And so in that case, it will be useful to look

553
00:26:21,440 --> 00:26:24,840
at this more specific metric.

554
00:26:24,840 --> 00:26:27,400
And so tell me a little bit about your experiences

555
00:26:27,400 --> 00:26:30,200
with the reinforcement learning approach.

556
00:26:30,200 --> 00:26:32,120
What have you found there?

557
00:26:32,120 --> 00:26:35,360
Yeah, so it's been still in a more exploratory face

558
00:26:35,360 --> 00:26:36,640
at this point.

559
00:26:36,640 --> 00:26:39,360
And I can maybe talk a bit more about some of the results

560
00:26:39,360 --> 00:26:42,000
that we got when we tried to apply reinforcement learning

561
00:26:42,000 --> 00:26:44,320
to the Simon problem.

562
00:26:44,320 --> 00:26:47,080
So again, here, it was a pretty natural fit

563
00:26:47,080 --> 00:26:49,920
because we have these states, which, again,

564
00:26:49,920 --> 00:26:54,960
is all the existing deliveries and dashers at any given time.

565
00:26:54,960 --> 00:26:56,840
We have these different actions, which

566
00:26:56,840 --> 00:26:59,360
would be all the different possible matching

567
00:26:59,360 --> 00:27:01,520
between dashes and deliveries.

568
00:27:01,520 --> 00:27:03,160
And so what we've actually tried is,

569
00:27:03,160 --> 00:27:07,800
because as you can imagine, if you treat every single combination

570
00:27:07,800 --> 00:27:11,480
of dashed delivery pair as the different actions,

571
00:27:11,480 --> 00:27:14,320
that action space becomes very huge.

572
00:27:14,320 --> 00:27:17,080
So even with 15 deliveries and 15 dashers,

573
00:27:17,080 --> 00:27:20,120
there's actually over one trillion possible combinations.

574
00:27:20,120 --> 00:27:22,840
And so obviously, working with that large of action spaces

575
00:27:22,840 --> 00:27:24,200
is very challenging.

576
00:27:24,200 --> 00:27:26,560
And so what we did was actually, we tried to simplify

577
00:27:26,560 --> 00:27:29,680
and reduce action space by, instead

578
00:27:29,680 --> 00:27:33,680
of using the different combinations of matching as the actions,

579
00:27:33,680 --> 00:27:36,640
we just used different variants of the Simon system,

580
00:27:36,640 --> 00:27:40,080
of the Simon algorithm, as the different actions.

581
00:27:40,080 --> 00:27:41,480
And so those were actions.

582
00:27:41,480 --> 00:27:45,160
And again, our reward in this case was delivery speeds

583
00:27:45,160 --> 00:27:47,680
and marketplace efficiency.

584
00:27:47,680 --> 00:27:50,480
And so once we sell the problem this way,

585
00:27:50,480 --> 00:27:54,760
we tried using pretty standard reinforcement learning methods.

586
00:27:54,760 --> 00:27:59,000
Specifically, we tried using deep reinforcement learning

587
00:27:59,000 --> 00:28:02,200
where our agent was a deep neural network

588
00:28:02,200 --> 00:28:04,200
that took in a bunch of features

589
00:28:04,200 --> 00:28:06,560
and tried to learn for any given state

590
00:28:06,560 --> 00:28:08,480
what was the optimal action to take.

591
00:28:08,480 --> 00:28:10,960
And then again, in this case, the optimal action

592
00:28:10,960 --> 00:28:14,560
is the optimal variant of the Simon algorithm.

593
00:28:14,560 --> 00:28:17,800
So yeah, we've done some exploratory work with this.

594
00:28:17,800 --> 00:28:19,720
We have a blog post about this on our website,

595
00:28:19,720 --> 00:28:21,800
actually, as well with more details.

596
00:28:21,800 --> 00:28:23,960
But we did see pretty problems and results

597
00:28:23,960 --> 00:28:26,240
where we saw some few seconds improvements

598
00:28:26,240 --> 00:28:28,800
and delivery speeds as well as efficiency.

599
00:28:28,800 --> 00:28:31,480
And so a few seconds doesn't sound like much.

600
00:28:31,480 --> 00:28:33,800
But when you scale it up to millions of deliveries.

601
00:28:33,800 --> 00:28:35,920
I want to leave my pizza.

602
00:28:35,920 --> 00:28:37,400
Yeah, definitely.

603
00:28:37,400 --> 00:28:39,880
But yeah, when you scale it up to millions of deliveries,

604
00:28:39,880 --> 00:28:42,760
it definitely adds up.

605
00:28:42,760 --> 00:28:43,280
Interesting.

606
00:28:43,280 --> 00:28:46,960
And so what are the challenges?

607
00:28:46,960 --> 00:28:50,640
What's keeping you from putting that into production?

608
00:28:50,640 --> 00:28:52,480
Yeah, so I think one is we definitely

609
00:28:52,480 --> 00:28:54,320
just need to keep doing more work

610
00:28:54,320 --> 00:28:57,040
to improve each other components within that reinforcement

611
00:28:57,040 --> 00:29:02,320
learning system, improving the deep neural network agent,

612
00:29:02,320 --> 00:29:05,720
improving the different features that we have.

613
00:29:05,720 --> 00:29:08,080
And of course, our system right now,

614
00:29:08,080 --> 00:29:12,720
we don't have a lot of these infrastructure pieces set up.

615
00:29:12,720 --> 00:29:15,040
So it would have to require some restructuring

616
00:29:15,040 --> 00:29:17,640
and we're working on the system, which again, right now

617
00:29:17,640 --> 00:29:20,960
is very much based on using machine learning

618
00:29:20,960 --> 00:29:23,120
plus operations research.

619
00:29:23,120 --> 00:29:25,360
And so yeah, there's definitely a lot of investment

620
00:29:25,360 --> 00:29:28,200
that needs to be made to move away from the current framework

621
00:29:28,200 --> 00:29:29,600
that we have.

622
00:29:29,600 --> 00:29:31,920
But again, yeah, we're always exploring

623
00:29:31,920 --> 00:29:34,160
trying new techniques to do things,

624
00:29:34,160 --> 00:29:35,960
including reinforcement learning.

625
00:29:35,960 --> 00:29:38,800
And as we do more of these explorations,

626
00:29:38,800 --> 00:29:41,520
at some point, if we feel that the improvements

627
00:29:41,520 --> 00:29:44,160
that we'll get is worth this long-term investment,

628
00:29:44,160 --> 00:29:47,400
we'll definitely make this switch then.

629
00:29:47,400 --> 00:29:56,720
Is it possible to, in thinking about kind of the way

630
00:29:56,720 --> 00:29:58,960
you've paired this machine learning system

631
00:29:58,960 --> 00:30:01,880
and the operations research system?

632
00:30:01,880 --> 00:30:04,600
Is it a future direction or of interest

633
00:30:04,600 --> 00:30:08,320
to try to kind of collapse this down

634
00:30:08,320 --> 00:30:10,400
to a single machine learning system?

635
00:30:10,400 --> 00:30:13,760
Is that something that is worth exploration

636
00:30:13,760 --> 00:30:15,920
or if not, why not?

637
00:30:15,920 --> 00:30:22,200
Yeah, I think it is something worth exploring.

638
00:30:22,200 --> 00:30:25,600
I do feel that the challenging part of doing that

639
00:30:25,600 --> 00:30:29,280
would be that there's certain aspects of the problem

640
00:30:29,280 --> 00:30:33,800
that it's just very naturally suited for operations research.

641
00:30:33,800 --> 00:30:36,680
And what I mean by that is whenever you have a problem

642
00:30:36,680 --> 00:30:40,240
where you have a very clear objective function

643
00:30:40,240 --> 00:30:43,040
that you're either trying to maximize or minimize

644
00:30:43,040 --> 00:30:47,440
and use a very clear constraints, it's

645
00:30:47,440 --> 00:30:50,160
much easier to frame as operations research problem

646
00:30:50,160 --> 00:30:52,280
because that's exactly the kind of problems

647
00:30:52,280 --> 00:30:54,480
that they're meant to solve.

648
00:30:54,480 --> 00:30:57,960
Where you have some objective, you have some constraints,

649
00:30:57,960 --> 00:31:01,080
and you basically frame as a math problem

650
00:31:01,080 --> 00:31:03,560
that's much easier to solve.

651
00:31:03,560 --> 00:31:07,120
And so I do think there could be potential

652
00:31:07,120 --> 00:31:10,840
for maybe having some kind of like one shot ML model

653
00:31:10,840 --> 00:31:13,960
that can kind of do everything end to end.

654
00:31:13,960 --> 00:31:17,720
But right now, I haven't found any great ways

655
00:31:17,720 --> 00:31:21,680
of using ML to completely solve these type of problems

656
00:31:21,680 --> 00:31:23,920
where you have objective, but then you also

657
00:31:23,920 --> 00:31:27,560
have these sort of constraints that you must abide by.

658
00:31:27,560 --> 00:31:31,080
And so for us, we found that yeah, combining machine learning

659
00:31:31,080 --> 00:31:34,600
to try and make these predictions, augment the raw data

660
00:31:34,600 --> 00:31:38,840
that we have and feeding it into an optimization system

661
00:31:38,840 --> 00:31:41,960
that can take care of handling these constraints for us,

662
00:31:41,960 --> 00:31:45,480
take care of maximizing and minimizing the objective function.

663
00:31:45,480 --> 00:31:49,200
We found that this approach has worked really well for us.

664
00:31:49,200 --> 00:31:55,440
And the operations research elements of this,

665
00:31:55,440 --> 00:31:58,320
do they, I'm imagining with the, you know,

666
00:31:58,320 --> 00:31:59,880
the kind of the machine learning world,

667
00:31:59,880 --> 00:32:02,040
where, you know, this is all very new.

668
00:32:02,040 --> 00:32:04,880
We're kind of constantly iterating our systems and models

669
00:32:04,880 --> 00:32:06,760
and things like that.

670
00:32:06,760 --> 00:32:12,000
Is your OR system kind of equal in that way?

671
00:32:12,000 --> 00:32:14,760
Are you kind of constantly, you know, tweaking

672
00:32:14,760 --> 00:32:16,200
and iterating, or is it, you know,

673
00:32:16,200 --> 00:32:19,360
because it's a kind of more mature approach,

674
00:32:19,360 --> 00:32:23,280
is it something that once you've identified your constraints

675
00:32:23,280 --> 00:32:25,240
and build this pipeline for your inputs,

676
00:32:25,240 --> 00:32:26,560
it kind of just does this thing

677
00:32:26,560 --> 00:32:29,600
and you don't have to worry about it as much.

678
00:32:29,600 --> 00:32:30,800
Yeah, that's a good question.

679
00:32:30,800 --> 00:32:33,920
So it is definitely a more mature field, like you said.

680
00:32:34,840 --> 00:32:38,520
But our team is definitely always trying new improvements to it.

681
00:32:38,520 --> 00:32:41,440
Some of it could be very small tweaks to the system.

682
00:32:41,440 --> 00:32:43,440
For example, tweaking different settings,

683
00:32:43,440 --> 00:32:47,000
tweaking different parameters, tweaking different ways

684
00:32:47,000 --> 00:32:49,200
of calculating the objective function.

685
00:32:49,200 --> 00:32:51,040
And so we're always trying these things.

686
00:32:51,040 --> 00:32:54,280
And yeah, you'll be surprised sometimes, even the smallest changes

687
00:32:54,280 --> 00:32:57,200
can lead to some of the biggest gains.

688
00:32:57,200 --> 00:32:59,680
Some of the most improvements that we've gotten

689
00:32:59,680 --> 00:33:03,400
over the past year or so have been from very simple changes

690
00:33:03,400 --> 00:33:05,320
on two different systems.

691
00:33:05,320 --> 00:33:07,760
So I can't go into the details, unfortunately,

692
00:33:07,760 --> 00:33:09,760
but some examples are basically just tweaking

693
00:33:09,760 --> 00:33:13,840
a single parameter, say going from like four to five

694
00:33:13,840 --> 00:33:16,320
and that bands up leading to a pretty big result.

695
00:33:16,320 --> 00:33:21,120
And so yeah, so we always do tweaks like that.

696
00:33:21,120 --> 00:33:24,040
And we also, we're always exploring brand new ways

697
00:33:24,040 --> 00:33:26,840
of doing the operations research piece as well.

698
00:33:26,840 --> 00:33:31,160
So actually, the switch to using mixed integer programming

699
00:33:31,160 --> 00:33:34,600
for our dispatch system, that switch was actually made

700
00:33:34,600 --> 00:33:36,680
not too long ago.

701
00:33:36,680 --> 00:33:41,680
So we used to use a simpler algorithm that wasn't as efficient

702
00:33:41,920 --> 00:33:45,080
because it could only do a single matching at a time.

703
00:33:45,080 --> 00:33:47,640
And kind of recently, we transitioned

704
00:33:47,640 --> 00:33:50,040
to this mixed integer programming approach

705
00:33:50,040 --> 00:33:53,600
where we can handle multiple deliveries, multiple dashers

706
00:33:53,600 --> 00:33:55,920
and create multiple matching at a time.

707
00:33:55,920 --> 00:34:00,240
And so yeah, so yeah, so we've always explored new options.

708
00:34:00,240 --> 00:34:03,680
And yeah, I wouldn't be surprised if sometime down the line,

709
00:34:03,680 --> 00:34:07,200
we find some new way of doing this optimization

710
00:34:07,200 --> 00:34:09,160
that nets us some really big gains.

711
00:34:10,120 --> 00:34:12,720
And the mixed and mixed integer programming

712
00:34:12,720 --> 00:34:16,120
does that relate to this idea of multiple inputs

713
00:34:16,120 --> 00:34:16,960
and multiple outputs?

714
00:34:16,960 --> 00:34:18,160
Or I forget what that's specifically,

715
00:34:18,160 --> 00:34:21,280
is that partial some floating point, some integer

716
00:34:21,280 --> 00:34:23,440
or is it related to the inputs outputs?

717
00:34:23,440 --> 00:34:24,280
Yeah, exactly.

718
00:34:24,280 --> 00:34:26,880
So it's related to the variables in the optimization form.

719
00:34:26,880 --> 00:34:29,520
So some of them integers and some of them are floats.

720
00:34:29,520 --> 00:34:30,760
Okay, okay.

721
00:34:32,560 --> 00:34:37,560
And so how does the, how does incorporating floats

722
00:34:37,560 --> 00:34:42,560
into your problem allow you to kind of what I heard

723
00:34:44,200 --> 00:34:49,200
was like optimize multiple variables in parallel?

724
00:34:51,400 --> 00:34:55,200
Yeah, so that component isn't what ultimately

725
00:34:55,200 --> 00:34:58,960
and allows us to make multiple matching in parallel.

726
00:34:58,960 --> 00:35:01,760
So the main change is moving towards this

727
00:35:01,760 --> 00:35:05,760
just general mixed integer slash integer programming approach.

728
00:35:05,760 --> 00:35:10,760
And so before, where again, our system

729
00:35:12,120 --> 00:35:14,680
could only make one pair of matching at a time.

730
00:35:14,680 --> 00:35:16,520
And the reason that this was the case

731
00:35:16,520 --> 00:35:18,120
was because we were using this algorithm

732
00:35:18,120 --> 00:35:20,240
called the Hungarian algorithm.

733
00:35:20,240 --> 00:35:21,240
Okay.

734
00:35:21,240 --> 00:35:25,720
Where one kind of runs pretty slow,

735
00:35:25,720 --> 00:35:28,400
especially when you're running it at scale.

736
00:35:29,400 --> 00:35:32,400
And then yeah, again, it only does one matching at a time.

737
00:35:32,400 --> 00:35:36,360
And so instead by formulating a problem as a mixed-anger program

738
00:35:36,360 --> 00:35:40,120
problem, we're able to not just speed up

739
00:35:40,120 --> 00:35:42,840
how fast variable solve these problems.

740
00:35:42,840 --> 00:35:45,160
But again, also have multiple matching.

741
00:35:45,160 --> 00:35:47,880
And once we frame at this problem,

742
00:35:47,880 --> 00:35:50,240
we can continue to have machine learning

743
00:35:51,320 --> 00:35:54,800
generate predictions to use as different inputs in this system.

744
00:35:54,800 --> 00:35:57,800
For example, we can predict food preparation times.

745
00:35:57,800 --> 00:36:00,800
We can predict how long we'll take the delivery to be delivered.

746
00:36:00,800 --> 00:36:04,280
And based on that, we can create our cost functions,

747
00:36:04,280 --> 00:36:07,320
our objective functions, and optimize that way.

748
00:36:07,320 --> 00:36:08,320
Okay.

749
00:36:08,320 --> 00:36:09,160
Very cool.

750
00:36:09,160 --> 00:36:10,000
Very cool.

751
00:36:11,760 --> 00:36:15,760
Were there other points that you covered

752
00:36:15,760 --> 00:36:18,520
in your presentation that we should make sure to touch on?

753
00:36:19,520 --> 00:36:24,520
Yeah, so I would say one thing that I wanted to stress

754
00:36:24,960 --> 00:36:27,000
as well is kind of just how challenging

755
00:36:27,000 --> 00:36:28,360
a lot of these problems are.

756
00:36:28,360 --> 00:36:31,360
So I think one thing that I've touched on

757
00:36:31,360 --> 00:36:35,800
is the high variance of our systems.

758
00:36:37,000 --> 00:36:40,000
So because we operate in a real world,

759
00:36:40,000 --> 00:36:45,000
lots of factors such as weather, such as traffic,

760
00:36:45,920 --> 00:36:50,360
special events, yeah, one fun example is one game

761
00:36:50,360 --> 00:36:51,880
of throwing things to be on.

762
00:36:51,880 --> 00:36:54,640
Every Sunday evening, we'll see huge spike in demand.

763
00:36:55,640 --> 00:36:58,000
And so even though the last couple of seasons,

764
00:36:58,000 --> 00:37:01,680
maybe one that great, we still had a huge surge in demand.

765
00:37:01,680 --> 00:37:03,520
And people are definitely tuning in.

766
00:37:03,520 --> 00:37:06,600
Yeah, people are still hungry, people are still tuning in.

767
00:37:06,600 --> 00:37:09,200
And I like this one, we have like the Super Bowl.

768
00:37:09,200 --> 00:37:12,840
People definitely tend to order delivery.

769
00:37:12,840 --> 00:37:14,440
And so counting for all these different factors

770
00:37:14,440 --> 00:37:16,800
has been super challenging for us.

771
00:37:16,800 --> 00:37:19,240
That's kind of interesting from the perspective of,

772
00:37:19,240 --> 00:37:22,800
we tend to think about you kind of build this model

773
00:37:22,800 --> 00:37:26,200
and then you put it in a production

774
00:37:26,200 --> 00:37:28,160
and you want to keep an eye on it and make sure

775
00:37:28,160 --> 00:37:30,480
that the data that it sees, you know,

776
00:37:30,480 --> 00:37:32,840
looks like the data that you trained it on.

777
00:37:32,840 --> 00:37:37,640
But it sounds like you've got all these real world factors

778
00:37:37,640 --> 00:37:40,240
that are making the data that the models are seeing

779
00:37:40,240 --> 00:37:42,360
in production, you know, look very different.

780
00:37:42,360 --> 00:37:45,000
Like how do you approach, is there a different way

781
00:37:45,000 --> 00:37:47,000
you need to think about model monitoring

782
00:37:47,000 --> 00:37:49,000
in a high variance environment?

783
00:37:50,160 --> 00:37:52,960
Yeah, I would say you just need to be very careful

784
00:37:52,960 --> 00:37:56,680
and very thorough how you monitor your models.

785
00:37:56,680 --> 00:37:59,600
So I think, yeah, definitely.

786
00:37:59,600 --> 00:38:02,320
Yeah, so I think, so I think one general point

787
00:38:02,320 --> 00:38:04,960
that I want to bring up to is one challenge

788
00:38:04,960 --> 00:38:07,480
I found with machine learning in the industry

789
00:38:07,480 --> 00:38:11,960
is it's not just about finding the right hyper parameters

790
00:38:11,960 --> 00:38:14,720
or finding the right model algorithm to use.

791
00:38:15,680 --> 00:38:18,680
It's also involves a lot of general engineering principles

792
00:38:18,680 --> 00:38:21,920
as well to deploy machine learning

793
00:38:21,920 --> 00:38:25,960
to solve your problems in a reliable and scalable way.

794
00:38:25,960 --> 00:38:29,400
There's a lot of systems that you have to set up in place.

795
00:38:29,400 --> 00:38:32,640
Yeah, one example would be how do you make sure

796
00:38:32,640 --> 00:38:37,880
that you monitor any degradation in your models?

797
00:38:37,880 --> 00:38:39,720
How do you make sure that there's consistency

798
00:38:39,720 --> 00:38:42,080
between the data that you saw during training

799
00:38:42,080 --> 00:38:45,200
and the data that you see during prediction?

800
00:38:45,200 --> 00:38:47,360
How do we manage and run experiments

801
00:38:47,360 --> 00:38:50,560
with different versions of many different models?

802
00:38:50,560 --> 00:38:52,960
How do we periodically retrain these models?

803
00:38:52,960 --> 00:38:55,440
As they degrade, how do we make sure that they get retrained

804
00:38:55,440 --> 00:38:57,920
and updated with the latest data?

805
00:38:57,920 --> 00:38:59,800
And of course, yeah, how do we protect against

806
00:38:59,800 --> 00:39:01,280
incorrect predictions?

807
00:39:01,280 --> 00:39:04,400
In cases such as, yeah, when a pandemic hits,

808
00:39:04,400 --> 00:39:07,800
our models are always going to struggle at predicting that.

809
00:39:07,800 --> 00:39:10,960
So how do we make sure that we account for these

810
00:39:10,960 --> 00:39:13,520
incorrect predictions and adjust accordingly?

811
00:39:13,520 --> 00:39:16,040
And so we've invested a lot of time and effort

812
00:39:16,040 --> 00:39:18,520
into building out engineering systems

813
00:39:18,520 --> 00:39:20,880
that can take care of these things for us.

814
00:39:20,880 --> 00:39:23,840
So setting up monitoring of our model predictions,

815
00:39:23,840 --> 00:39:26,480
monitoring of our model inputs,

816
00:39:26,480 --> 00:39:31,400
making sure that the data that the model sees

817
00:39:31,400 --> 00:39:33,800
is always what it expects.

818
00:39:33,800 --> 00:39:37,240
And if we notice anything wrong, anything that deviates

819
00:39:37,240 --> 00:39:39,680
from what's expected, whether it's the model output

820
00:39:39,680 --> 00:39:42,120
or the input data into the models,

821
00:39:42,120 --> 00:39:44,840
we can take different actions to try and fix that.

822
00:39:44,840 --> 00:39:48,120
So one example is if we see that the model accuracy

823
00:39:48,120 --> 00:39:52,160
is slowly degrade over time, then we can retrain the model.

824
00:39:52,160 --> 00:39:54,080
And we have systems that have been placed as well

825
00:39:54,080 --> 00:39:56,600
so that these models are automatically retrained.

826
00:39:56,600 --> 00:39:58,200
And so when it's time to replace it,

827
00:39:58,200 --> 00:40:01,200
it's a pretty simple switch where we just plug

828
00:40:01,200 --> 00:40:03,600
and play in the new model.

829
00:40:03,600 --> 00:40:06,400
Other cases, it might be more complicated.

830
00:40:06,400 --> 00:40:10,280
So for example, if, yeah, when there's a pandemic again,

831
00:40:10,280 --> 00:40:13,480
our model obviously didn't generate very accurate predictions

832
00:40:13,480 --> 00:40:15,400
in those cases.

833
00:40:15,400 --> 00:40:18,600
And so that might prompt us to look into,

834
00:40:18,600 --> 00:40:20,760
maybe there's some features that we want to add

835
00:40:20,760 --> 00:40:24,960
that will help us better correct for any errors we have.

836
00:40:24,960 --> 00:40:28,720
And maybe, aside from just improving the model itself,

837
00:40:28,720 --> 00:40:30,520
maybe that tells us that we need to build

838
00:40:30,520 --> 00:40:33,040
more real-time systems in place.

839
00:40:33,040 --> 00:40:35,840
And these can be augmented with machine learning

840
00:40:35,840 --> 00:40:39,560
or they could just be using simple heuristics

841
00:40:39,560 --> 00:40:43,960
that try and detect model errors

842
00:40:43,960 --> 00:40:47,080
and then take different actions to account for them.

843
00:40:47,080 --> 00:40:48,440
And so this kind of goes back as well

844
00:40:48,440 --> 00:40:50,840
to how we balance up the time demand.

845
00:40:50,840 --> 00:40:53,040
Where, again, we have all these predictions.

846
00:40:53,040 --> 00:40:54,880
We do all these things ahead of time.

847
00:40:54,880 --> 00:40:57,480
But ultimately, in real-time, we know

848
00:40:57,480 --> 00:40:59,920
that we're not going to have a perfect system.

849
00:40:59,920 --> 00:41:03,040
And there's still going to be imbalance real-time.

850
00:41:03,040 --> 00:41:05,880
And so we spend a lot of time in building

851
00:41:05,880 --> 00:41:08,960
on this real-time monitoring, this real-time system

852
00:41:08,960 --> 00:41:12,960
that can take actions to correct for any issues that we see.

853
00:41:12,960 --> 00:41:13,960
OK.

854
00:41:13,960 --> 00:41:20,920
In the case of the onset of coronavirus did,

855
00:41:20,920 --> 00:41:24,480
I'm imagining you saw your models not working the way

856
00:41:24,480 --> 00:41:28,800
that they otherwise would have was

857
00:41:28,800 --> 00:41:35,600
were your existing model monitoring and retraining

858
00:41:35,600 --> 00:41:38,280
tech and procedures kind of enough?

859
00:41:38,280 --> 00:41:42,920
Or did you find you had to do a lot of manual overrides?

860
00:41:42,920 --> 00:41:48,880
To kind of make it through because it was unprecedented times?

861
00:41:48,880 --> 00:41:51,640
Yeah, so we definitely used a mix of relying

862
00:41:51,640 --> 00:41:55,560
on our existing systems that automates a lot of this

863
00:41:55,560 --> 00:42:01,360
monitoring, retraining, plus some manual actions

864
00:42:01,360 --> 00:42:03,360
on top of it as well.

865
00:42:03,360 --> 00:42:06,920
So a lot of times, like the day of, for example,

866
00:42:06,920 --> 00:42:09,680
when Shelter Place first started,

867
00:42:09,680 --> 00:42:12,720
or when the stimulus checks first went out,

868
00:42:12,720 --> 00:42:16,240
those are things that we're not able to, our systems

869
00:42:16,240 --> 00:42:19,640
are not always able to react as quickly as we would like.

870
00:42:19,640 --> 00:42:22,120
For example, if we were to retrain the model,

871
00:42:22,120 --> 00:42:24,080
we would need new data to come in first

872
00:42:24,080 --> 00:42:25,880
before we can retrain it.

873
00:42:25,880 --> 00:42:28,040
And so in those cases, we definitely

874
00:42:28,040 --> 00:42:32,200
have operators who will, again, help

875
00:42:32,200 --> 00:42:34,080
with monitoring our systems.

876
00:42:34,080 --> 00:42:37,200
And if they notice any drastic changes

877
00:42:37,200 --> 00:42:40,280
that our automated systems are not accounting for

878
00:42:40,280 --> 00:42:43,120
and are not adjusting well enough for,

879
00:42:43,120 --> 00:42:46,360
they will take additional actions on top of that.

880
00:42:46,360 --> 00:42:49,360
And so this is something that we always have in place.

881
00:42:49,360 --> 00:42:53,840
It's not something that we just do because of COVID.

882
00:42:53,840 --> 00:42:57,680
There's always interesting cases here and there

883
00:42:57,680 --> 00:43:01,240
where we have these super drastic events that

884
00:43:01,240 --> 00:43:05,200
requires additional manual intervention.

885
00:43:05,200 --> 00:43:09,200
And so we do still rely on a mix of automated systems,

886
00:43:09,200 --> 00:43:11,360
as well as human intervention.

887
00:43:11,360 --> 00:43:12,000
Got it.

888
00:43:12,000 --> 00:43:13,080
Got it.

889
00:43:13,080 --> 00:43:14,160
Cool.

890
00:43:14,160 --> 00:43:15,720
Well, Gary, thanks so much for taking

891
00:43:15,720 --> 00:43:18,280
the time to share some of that with us.

892
00:43:18,280 --> 00:43:18,560
Yeah.

893
00:43:18,560 --> 00:43:19,080
Thanks, Sam.

894
00:43:19,080 --> 00:43:19,880
Thanks for having me.

895
00:43:19,880 --> 00:43:20,360
Awesome.

896
00:43:20,360 --> 00:43:21,280
Thank you.

897
00:43:21,280 --> 00:43:22,200
Cool.

898
00:43:22,240 --> 00:43:25,120
for your own convenience

899
00:43:25,400 --> 00:43:29,420
to live a happy life,

900
00:43:29,420 --> 00:43:32,660
a happy life with your wife

901
00:43:33,500 --> 00:43:35,520
I'm tired

902
00:43:38,800 --> 00:43:40,700
I need you

903
00:43:43,120 --> 00:43:46,640
I don't want to give you my away

904
00:43:48,660 --> 00:43:50,000
Just listen

905
00:43:50,000 --> 00:43:51,740
or you'll just come

