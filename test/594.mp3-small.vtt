WEBVTT

00:00.000 --> 00:09.720
All right, everyone, welcome to another episode of the TwinMole AI Podcast.

00:09.720 --> 00:14.840
I am your host, Sam Charrington, and today I'm joined by Basi Filiman.

00:14.840 --> 00:19.840
Basi is vice president and general manager of machine learning and AI at Amazon.

00:19.840 --> 00:23.360
Before we get going, be sure to take a moment to hit that subscribe button wherever you're

00:23.360 --> 00:24.880
listening to today's show.

00:24.880 --> 00:26.840
Basi, welcome to the podcast.

00:26.840 --> 00:28.360
Thanks for having me, Sam.

00:28.360 --> 00:30.320
I'm super excited for this discussion.

00:30.320 --> 00:35.440
For those who, well, you don't know yet, but you're about to know, this is a very special

00:35.440 --> 00:43.400
interview because it is the first in-person interview I've done since NeurIPS in Vancouver

00:43.400 --> 00:45.400
in 2019.

00:45.400 --> 00:53.320
I happen to be in New York for some meetings with AWS, as was Basi, and here we are, and

00:53.320 --> 00:59.600
we're going to spend some time today talking about the recently announced Amazon code whisperer,

00:59.600 --> 01:04.320
Coding Companion, and as a bonus, Basi will be doing a demo for me that you'll be able

01:04.320 --> 01:07.520
to catch on YouTube towards the end of our interview.

01:07.520 --> 01:10.880
Basi, let's get started with some background.

01:10.880 --> 01:13.120
Tell us a little bit about your role at AWS.

01:13.120 --> 01:20.320
Yeah, so I'm vice president at AWS and I'm responsible for our AI services.

01:20.320 --> 01:22.360
My background is machine learning.

01:22.360 --> 01:27.600
Back in the 90s, I did a PhD in computer science from the University of Maryland, and I chose

01:27.600 --> 01:29.160
to do it in machine learning.

01:29.160 --> 01:31.400
It wasn't a common thing to do at that time.

01:31.400 --> 01:36.480
A lot of my friends were asking me, what the heck is machine learning?

01:36.480 --> 01:38.000
Like, why are you doing machine learning?

01:38.000 --> 01:43.160
You should be doing databases or you should be doing operating systems.

01:43.160 --> 01:45.640
But I have to say that I'm the one with the last laugh.

01:45.640 --> 01:48.400
I'm kind of glad that I did it at that time.

01:48.400 --> 01:50.320
It's serving me really well right now.

01:50.320 --> 01:56.880
In your role at AWS, what aspects of ML and AI are you responsible for?

01:56.880 --> 02:01.720
Yeah, I'm responsible for a lot of the services that we have at the top layer of the stack.

02:01.720 --> 02:05.480
Are you familiar, Sam, with the three layers of the stack, the way we think about machine

02:05.480 --> 02:06.480
learning?

02:06.480 --> 02:07.480
Absolutely.

02:07.480 --> 02:08.480
Yeah, so.

02:08.480 --> 02:13.520
But we can recap that infrastructure at the bottom, developer or data scientist, focus

02:13.520 --> 02:18.680
tools in the middle, and cognitive services, for lack of a better word, or AI services

02:18.680 --> 02:19.680
at the top.

02:19.680 --> 02:20.680
Right, right.

02:20.680 --> 02:23.400
And I'm responsible for the top layer there, AI services layer.

02:23.400 --> 02:24.680
It's not just cognitive.

02:24.680 --> 02:28.400
There's a set of cognitive language services at the top layer.

02:28.400 --> 02:30.880
There's also a bunch of industrial services.

02:30.880 --> 02:34.960
So there's a whole variety of services at the top layer of the stack.

02:34.960 --> 02:39.680
The difference, though, with the middle layer is that the top layer is more a managed experience

02:39.680 --> 02:44.440
and people using those services don't have to be experts in machine learning.

02:44.440 --> 02:49.120
All they need to know is, here's my application and here's how I'm going to make it smarter

02:49.120 --> 02:55.280
and I need this capability that I could just plug into my application to make it smarter.

02:55.280 --> 02:58.800
And then they can just go and use it just like they do today.

02:58.800 --> 03:04.480
They access a web service for compute or they access a web service for storage.

03:04.480 --> 03:09.760
They can now access an AI service in the same exact way and they can insert it into their

03:09.760 --> 03:13.320
own applications and make their applications faster.

03:13.320 --> 03:19.040
So let's dig in a little bit into the distinction between cognitive and industry.

03:19.040 --> 03:27.000
So the non-cognitive services would be things like, I know AWS has, for example, medical

03:27.000 --> 03:28.280
transcription.

03:28.280 --> 03:32.800
Would you consider that non-cognitive or are you thinking like a call center AI or?

03:32.800 --> 03:33.800
Okay, okay.

03:33.800 --> 03:36.720
Let me describe that to you in more detail.

03:36.720 --> 03:42.560
When we started out, the first few services we launched, I would call them foundational

03:42.560 --> 03:50.120
to any machine learning business or unit and they're foundational in the sense that they

03:50.120 --> 03:53.560
capture a lot of the cognitive things that humans are able to do.

03:53.560 --> 03:57.640
So to give you an example, we started with Lex.

03:57.640 --> 04:00.640
Lex is sort of the guts of Alexa.

04:00.640 --> 04:04.400
Essentially it's the two ways removed from Alexa and what's inside is Lex.

04:04.400 --> 04:08.600
Not many people know that, but now they do, it all makes sense.

04:08.600 --> 04:14.400
And Lex is our conversational AI platform and what people can do with it is they could

04:14.400 --> 04:18.960
build their own Alexa's if they wanted to or they could build a chatbot and insert it

04:18.960 --> 04:24.880
into their website and so that Lex is something that would understand both text input as well

04:24.880 --> 04:25.960
as speech input.

04:25.960 --> 04:31.120
So they build the bot just once and then they can insert it into a call center conversation

04:31.120 --> 04:36.960
so that it can take the call and maybe take care of the customer that's calling.

04:36.960 --> 04:39.600
So that's Lex, which is a conversational platform.

04:39.600 --> 04:41.920
That's definitely a cognitive service.

04:41.920 --> 04:43.880
We call it a language service.

04:43.880 --> 04:47.160
I think Gartner calls it a language service too.

04:47.160 --> 04:51.960
So we also have Polly, Polly is our text to speech service.

04:51.960 --> 04:55.520
Alexa's voice is actually a Polly voice.

04:55.520 --> 05:02.000
But customers now have the capability to have their own voices and they can pick from one

05:02.000 --> 05:05.640
of the many languages that we support and the different kinds of voices we may have

05:05.640 --> 05:09.480
for each of the languages and then they could just use it for various applications and a

05:09.480 --> 05:14.440
common one they use it for is they just put this thing on a web page and so when people

05:14.440 --> 05:19.400
are driving their cars, they can just listen to what's on the web page and Polly is going

05:19.400 --> 05:21.520
to narrate it for you.

05:21.520 --> 05:23.040
So that's another cognitive service.

05:23.040 --> 05:28.280
Then we've got translate, Amazon translate, which is document translation.

05:28.280 --> 05:33.520
You can go from one language to another and we've gotten to very high quality these days

05:33.520 --> 05:35.020
in terms of translation.

05:35.020 --> 05:37.440
So you could do a lot of cool things with that.

05:37.440 --> 05:41.080
Then we've got transcribe, which is a speech to text.

05:41.080 --> 05:46.640
We talked about text to speech before with Polly, but this one is speech to text.

05:46.640 --> 05:53.440
And so this is useful for you to understand what's being said in a conversation.

05:53.440 --> 05:56.040
So that is another cognitive service.

05:56.040 --> 06:00.240
And then we've got yet another one called Comprehend, which is a natural language processing service.

06:00.240 --> 06:04.440
And it's got all kinds of things you could do with it like sentiment, given a piece of

06:04.440 --> 06:08.200
unstructured text, it'll tell you what the sentiment is.

06:08.200 --> 06:09.760
Is it a negative sentiment?

06:09.760 --> 06:10.880
Is it a positive sentiment?

06:10.880 --> 06:16.320
So customers often, they use it for reviews, like the capture reviews and then they run

06:16.320 --> 06:22.200
it through Comprehend and they understand, like, are people excited about whatever it

06:22.200 --> 06:25.440
is that the review was for or are they unhappy about it?

06:25.440 --> 06:27.560
And we've got things like targeted sentiment.

06:27.560 --> 06:33.960
So in the same sentence, you could say that the food was great, but the service was lousy.

06:33.960 --> 06:37.920
And so that's multiple sentiments within the same sentence.

06:37.920 --> 06:40.560
That's the kind of stuff you could do with Comprehend.

06:40.560 --> 06:45.160
You could also do things with Comprehend where you can extract entities of interest from

06:45.160 --> 06:50.920
unstructured text, like let's say you see there's an article on one company acquiring

06:50.920 --> 06:56.480
another company, you could now just look at that news article and you can extract things

06:56.480 --> 07:02.440
like which was the company that was acquired, who was the CEO of that company, what was

07:02.440 --> 07:06.200
the transaction value, all of those kinds of things can be extracted.

07:06.200 --> 07:08.560
So that's kind of what Comprehend does.

07:08.560 --> 07:11.760
It helps you understand unstructured text, right?

07:11.760 --> 07:15.680
So these are sort of the language or the cognitive services that we have.

07:15.680 --> 07:18.280
And that's what we started with at the beginning.

07:18.280 --> 07:22.360
These are the basic foundational blocks you would need to build anything else.

07:22.360 --> 07:30.620
And then more recently, we've added domain specific services, like let me take one industrial

07:30.620 --> 07:35.280
service for example, Monitron is an example of it.

07:35.280 --> 07:41.560
And this is an AWS service that's, it includes a piece of hardware that comes with it.

07:41.560 --> 07:45.680
The hardware is essentially a temperature and vibration sensor.

07:45.680 --> 07:51.040
And it's meant for shop floor technicians that want to monitor their equipment on the

07:51.040 --> 07:52.480
factory floor.

07:52.480 --> 07:54.040
And they want to do predictive maintenance.

07:54.040 --> 07:58.440
So they buy this piece of hardware from us and they attach it to some portion of the

07:58.440 --> 08:02.840
machine that they want to monitor.

08:02.840 --> 08:07.840
And what we do is we learn the behavior of that part of the machine in terms of vibration

08:07.840 --> 08:12.040
and temperature, which is what the sensors are in that unit.

08:12.040 --> 08:17.920
And so over time, we'll be able to tell the person, the user, the customer if there's

08:17.920 --> 08:20.360
a deviation in behavior.

08:20.360 --> 08:27.880
And because vibration is something that it predicts, it's something that it'll tell

08:27.880 --> 08:32.120
you before things are going to fail, it has that predictive nature.

08:32.120 --> 08:37.040
So we're able to actually detect issues way before they actually happen.

08:37.040 --> 08:41.880
So for example, our fulfillment centers, we have conveyor belts in our fulfillment centers

08:41.880 --> 08:44.480
to move the products around.

08:44.480 --> 08:47.320
And so it's very important for those belts to keep running.

08:47.320 --> 08:49.520
And there's a lot of rotating parts there.

08:49.520 --> 08:56.000
And we use Monitron there to monitor the health of the whole conveyor system.

08:56.000 --> 09:01.280
And we've been able to catch failures like two weeks before they actually happened.

09:01.280 --> 09:08.600
So this essentially allows customers to plan the maintenance rather than react.

09:08.600 --> 09:13.600
It's going to be chaos if it just happens and they are not prepared for it.

09:13.600 --> 09:18.880
So that's a very clear, it's not cognitive.

09:18.880 --> 09:22.200
It's something that is specific to the domain.

09:22.200 --> 09:27.440
And it's a large enough segment there and lots of customers have moving parts and they

09:27.440 --> 09:31.640
have equipment that they can't afford to fail.

09:31.640 --> 09:35.440
And so that's a place where things like Monitron is being used.

09:35.440 --> 09:40.640
And to come back to your question on the medical transcription thing, that's just an extension

09:40.640 --> 09:42.400
of the transcription that we have.

09:42.400 --> 09:44.040
It just applies to the medical domain.

09:44.040 --> 09:49.960
So I would say that that is a cognitive service because it has to do with speech and it has

09:49.960 --> 09:53.200
to do with understanding speech.

09:53.200 --> 09:54.520
So those are the kinds of things we have.

09:54.520 --> 09:57.920
We have also other kinds of services up there at the top layer of the stack.

09:57.920 --> 10:03.040
We've got things like Contact Lens for Amazon Connect.

10:03.040 --> 10:07.320
And what Contact Lens does is it's a higher level abstraction.

10:07.320 --> 10:09.800
It uses transcribe underneath the scenes.

10:09.800 --> 10:12.280
It uses comprehend underneath the scenes.

10:12.280 --> 10:15.280
But it was built for the call center.

10:15.280 --> 10:19.880
And if you're a call center customer, what you're interested in is you just want to

10:19.880 --> 10:22.480
know, why are customers calling me?

10:22.480 --> 10:24.080
You want to know that.

10:24.080 --> 10:27.520
You want to know how every call is going.

10:27.520 --> 10:30.760
And by the way, you want to know this real time as it's happening, but you may also want

10:30.760 --> 10:34.920
to do it post call, which is called post call analytics.

10:34.920 --> 10:36.520
You want to know how your agents are doing.

10:36.520 --> 10:37.520
How are they responding?

10:37.520 --> 10:39.160
Are they actually helping the customer?

10:39.160 --> 10:42.240
Are they saying the right things at the right time?

10:42.240 --> 10:47.200
So you could do all of those things and that's what Contact Lens does.

10:47.200 --> 10:52.560
It actually implements the actual, it takes the business problem and just implements it

10:52.560 --> 10:55.560
using a combination of these foundational services that I talked about.

10:55.560 --> 10:59.760
So we've also got some of those at the top layer of the stack.

10:59.760 --> 11:08.000
And then I've got one more thing and it's called Amazon Kendra and that's about search.

11:08.000 --> 11:14.880
It's about enterprise search where you've got, if you're an enterprise, you've got a lot

11:14.880 --> 11:17.040
of documents within your enterprise.

11:17.040 --> 11:21.080
And these documents are typically siloed.

11:21.080 --> 11:25.200
They're not like the documents on the web where everything's linked to each other and

11:25.200 --> 11:29.720
you can figure out what people are clicking on and keep track of which documents are more

11:29.720 --> 11:31.120
interesting.

11:31.120 --> 11:32.400
Instead here, they're all siloed.

11:32.400 --> 11:36.600
They're sitting in different systems, like they're sitting in SharePoint maybe or they're

11:36.600 --> 11:44.480
sitting on your Wiki pages or they're sitting inside Salesforce.

11:44.480 --> 11:51.080
And so it's a much harder problem for employees to find things that they actually want to

11:51.080 --> 11:54.120
find within an enterprise.

11:54.120 --> 12:00.240
If you've ever tried the search systems that are at enterprises, they are pretty horrible.

12:00.240 --> 12:06.440
And the one that we used to have inside Amazon wasn't very good either before Kendra.

12:06.440 --> 12:08.840
This is a space that I know fairly well.

12:08.840 --> 12:13.760
Having worked at a startup that tried to solve this problem 20-something years ago.

12:13.760 --> 12:14.760
Okay.

12:14.760 --> 12:15.760
Okay.

12:15.760 --> 12:16.760
All right.

12:16.760 --> 12:18.760
But it's like you're giving the pitch that we used to give back then.

12:18.760 --> 12:19.760
Okay.

12:19.760 --> 12:24.240
It's one of these problems that just hasn't been solved and probably won't ever be solved

12:24.240 --> 12:28.080
in the enterprise because it's such a difficult problem.

12:28.080 --> 12:29.080
Absolutely.

12:29.080 --> 12:32.880
It's a difficult problem, but I think the technology is there where we were able to solve it in

12:32.880 --> 12:33.880
a very good way.

12:33.880 --> 12:36.760
And I'll tell you the kinds of things you can do with Kendra.

12:36.760 --> 12:40.880
So Kendra is again, another higher level abstraction where it just focuses on the business problem,

12:40.880 --> 12:42.040
which is search.

12:42.040 --> 12:46.000
You need to be able to help people find what they're looking for and documents are sitting

12:46.000 --> 12:47.640
in different places.

12:47.640 --> 12:49.840
So you can't use all the usual techniques.

12:49.840 --> 12:54.320
So what Kendra does, number one is it allows you to suck in all of the data from all of

12:54.320 --> 12:55.320
these systems.

12:55.320 --> 12:57.320
There's connectors, managed connectors.

12:57.320 --> 13:00.520
All you have to do is to provide credentials and it's going to suck in all of the data

13:00.520 --> 13:05.960
and also keep the access rights along with it so that they're not going to show up in

13:05.960 --> 13:10.480
search results for people that are not authorized to see certain kinds of documents.

13:10.480 --> 13:15.200
So it keeps, it not only sucks the data from these different systems, but it also keeps

13:15.200 --> 13:18.640
all the permissions intact so that it knows what to show and what not to show.

13:18.640 --> 13:24.600
The second thing Kendra does is it understands all of the documents like a human would after

13:24.600 --> 13:25.600
reading it.

13:25.600 --> 13:30.200
So now anyone can ask a question and I'm not talking about keyword search.

13:30.200 --> 13:32.000
I'm talking about semantic search here.

13:32.000 --> 13:38.000
So I could actually say, where is the IT help desk at this Amazon building, right?

13:38.000 --> 13:40.160
I can just ask that question.

13:40.160 --> 13:44.320
And the answer is not going to be like a hundred links where I need to click on every single

13:44.320 --> 13:48.240
document and then hope I find this information in there.

13:48.240 --> 13:51.880
Kendra is actually going to tell me it's the fourth floor, right up there.

13:51.880 --> 13:55.840
And of course it's going to have all the links as well, the documents below like you're used

13:55.840 --> 14:00.160
to in a traditional search, but you don't have to go digging for the answer.

14:00.160 --> 14:03.300
If it's confident, it will show you the answer right up there.

14:03.300 --> 14:08.680
And also in terms of relevance in the documents being the right documents, given we can't

14:08.680 --> 14:11.680
use a lot of signals that are available on the web.

14:11.680 --> 14:14.480
We use a lot of clever techniques there.

14:14.480 --> 14:20.720
It's pre-trained on various domains, so it's going to perform really well out of the box.

14:20.720 --> 14:26.120
So there's a lot of our customers that love the ease of setting this up.

14:26.120 --> 14:28.800
We've also made it very easy to set up.

14:28.800 --> 14:34.400
You can ingest all of your documents with these connectors and immediately you've got

14:34.400 --> 14:38.440
a search application that you can just go in and try it out.

14:38.440 --> 14:41.880
And then of course you can embed that into your own websites and things like that.

14:41.880 --> 14:45.680
So that's what, and underneath the scenes, if you're interested in Kendra, underneath

14:45.680 --> 14:48.320
the scenes there's a whole bunch of NLP models.

14:48.320 --> 14:50.360
That's what makes it happen.

14:50.360 --> 14:52.760
You said it was a hard problem and that's rightfully so.

14:52.760 --> 14:56.960
Yeah, we were using Verity and I think we started looking at autonomy.

14:56.960 --> 15:02.560
These are all text search engines and the problem that you described of a user getting

15:02.560 --> 15:08.640
back tons of links that matched but relevance was the difficult problem.

15:08.640 --> 15:13.000
And we were nowhere near at that time summarization in some of the things that you've described.

15:13.000 --> 15:14.000
Absolutely.

15:14.000 --> 15:16.920
And underneath the scenes there's a whole bunch of models.

15:16.920 --> 15:24.600
There's a document ranking model, there's an FAQ model, there's a question answering

15:24.600 --> 15:29.360
model, and all of these models sort of work together and all of the complexity is not,

15:29.360 --> 15:33.320
I mean, the user doesn't have to deal with all of that complexity and putting all of

15:33.320 --> 15:34.320
this together.

15:34.320 --> 15:37.040
We make sure that these things work seamlessly together.

15:37.040 --> 15:42.760
And of course Kendra has continuous learning, it gets better as more people use it.

15:42.760 --> 15:46.640
There's explicit feedback, there's a thumbs up, thumbs down on the search results.

15:46.640 --> 15:49.360
If somebody does click it, we'll keep track of it.

15:49.360 --> 15:51.760
It gets better for the enterprise.

15:51.760 --> 15:57.320
Or implicitly we can track, okay, they are clicking on this document from the results.

15:57.320 --> 16:00.680
So maybe it wasn't the first one, it was the third one.

16:00.680 --> 16:05.440
And so those kinds of things make sure that it gets better over time, which is another

16:05.440 --> 16:07.720
thing, it's continuous learning.

16:07.720 --> 16:12.680
So that's another thing that's made it possible for customers to find information that they

16:12.680 --> 16:15.760
actually want to find, make their employees more productive.

16:15.760 --> 16:21.960
So that's sort of the top layer of the stack is essentially a whole bunch of AI services.

16:21.960 --> 16:25.640
There's some foundational ones, like I said, and then there's some that are specific to

16:25.640 --> 16:32.560
domains like healthcare and industrial manufacturing domains.

16:32.560 --> 16:37.760
And then there's a lot of applications, sort of things, things that solve business problems

16:37.760 --> 16:38.760
directly.

16:38.760 --> 16:46.640
So you've described this pretty broad set of services, we want to jump into talking about

16:46.640 --> 16:47.640
Code Whisperer.

16:47.640 --> 16:52.160
Code Whisperer is not the first AWS service that's dealing with code, right?

16:52.160 --> 16:56.240
It was Code Guru and possibly others.

16:56.240 --> 17:02.320
Talk a little bit about what AWS has been doing with code and kind of how Code Whisperer

17:02.320 --> 17:03.560
came about.

17:03.560 --> 17:04.960
Yeah.

17:04.960 --> 17:16.120
So we've always known that AI ML is going to help a whole variety of different areas.

17:16.120 --> 17:20.640
It's going to find its way into many different areas and it's going to make things easier

17:20.640 --> 17:22.360
in those areas.

17:22.360 --> 17:28.440
I remember I think Werner Vogels, who's our CTO, he wrote a blog article on how AI ML

17:28.440 --> 17:32.800
has the potential to completely change the way developers do their everyday, go about

17:32.800 --> 17:38.640
their everyday work that they do.

17:38.640 --> 17:41.680
So the journey actually started in 2019.

17:41.680 --> 17:46.840
And if you look at, I think I should start with what is a developer's workflow look like?

17:46.840 --> 17:50.800
That's a great place to start and then I can sort of tell you how we went about tackling

17:50.800 --> 17:53.120
all of those different pieces.

17:53.120 --> 17:58.400
So what a developer first does, of course, is he writes code.

17:58.400 --> 18:00.800
That's the first sort of step, he writes code.

18:00.800 --> 18:07.640
And then the next thing that they do is get the code reviewed by peers and some people

18:07.640 --> 18:14.400
may even use some automated systems to kind of scan the code and help find things, right?

18:14.400 --> 18:21.440
So that piece, you get it reviewed and once you've reviewed the code, you deploy it, you

18:21.440 --> 18:26.160
deploy the whole thing and then you monitor it as the application is serving the customers

18:26.160 --> 18:28.840
that it's meant to serve, right?

18:28.840 --> 18:34.760
And at that time, you're monitoring your applications for cost and performance and then you'll maybe

18:34.760 --> 18:36.600
find opportunities to make those better.

18:36.600 --> 18:43.240
So those are sort of like key pieces of a workflow, developer's workflow.

18:43.240 --> 18:49.960
When we started in 2019, we launched our very first service that is related to developers

18:49.960 --> 18:52.280
and writing code.

18:52.280 --> 18:58.280
And the one we decided to launch at that time, it was CodeGuru in 2019.

18:58.280 --> 19:04.440
And what CodeGuru does is it helps you find bugs in your code and it helps you find lines

19:04.440 --> 19:08.840
of code that are very expensive, expensive in terms of the amount of compute it would

19:08.840 --> 19:09.840
need.

19:09.840 --> 19:13.080
So that's the kind of stuff that CodeGuru helps.

19:13.080 --> 19:20.240
And so you could think of CodeGuru then as taking care of the quality of the code, the

19:20.240 --> 19:25.320
reviewing part, it helps in that part of the workflow.

19:25.320 --> 19:29.560
And is it considered an ML service or an AI service?

19:29.560 --> 19:31.520
Yeah, it is considered an AI service.

19:31.520 --> 19:37.240
So in the AI service groups at the top layer of the stack, we also have a developer focused

19:37.240 --> 19:38.240
set of services.

19:38.240 --> 19:42.120
CodeGuru was the first one, which we launched in 2019.

19:42.120 --> 19:46.720
The second one we launched was a year later and that's DevOpsGuru.

19:46.720 --> 19:51.360
And this is to tackle the monitoring the application once you've deployed it and you're monitoring

19:51.360 --> 19:56.040
it and then you're trying to find places to optimize it, right?

19:56.040 --> 20:00.040
And so that's what DevOpsGuru does and we launched that in 2020.

20:00.040 --> 20:05.640
And finally, we've now tackled the writing code part, which is what CodeWhisperer is

20:05.640 --> 20:07.720
all about.

20:07.720 --> 20:10.480
And let me set up the problem a little bit more.

20:10.480 --> 20:18.000
I mean, writing code is majority of what a developer would do and I'm still, I've always

20:18.000 --> 20:21.600
been a very passionate developer and I still write code.

20:21.600 --> 20:25.680
Not as much as I like to, but I still write a lot of code.

20:25.680 --> 20:32.080
And so the best way to set up this problem is to talk through my own experience here.

20:32.080 --> 20:38.640
So what I tend to do with the limited amount of time that I can get these days, I may pick

20:38.640 --> 20:44.240
a pet project that either that I want to automate and I'm doing it mainly to learn because I

20:44.240 --> 20:46.880
know that there's new frameworks all the time.

20:46.880 --> 20:49.960
And so when I hear about something, I want so many new frameworks.

20:49.960 --> 20:50.960
That's right.

20:50.960 --> 20:51.960
That's right.

20:51.960 --> 20:52.960
That's right.

20:52.960 --> 20:53.960
So I just want to learn.

20:53.960 --> 20:56.440
I want to be in touch with the technology because then, you know, I can interact better

20:56.440 --> 21:01.080
with my people because that's what they do all day long.

21:01.080 --> 21:06.320
So what I tried to do, this was about, this was maybe a year and a half or a year and

21:06.320 --> 21:07.840
a half ago.

21:07.840 --> 21:13.240
I was hearing a lot about React as a framework for front-end development.

21:13.240 --> 21:20.880
And the last time I'd done any front-end programming was back in, I mean, the 2011-2012 time frame

21:20.880 --> 21:27.560
when, you know, there was this, you know, Microsoft had this Windows presentation foundation.

21:27.560 --> 21:33.280
There was this concept of XAML, which would separate design from actual implementation,

21:33.280 --> 21:36.800
the design of how the user interface would look like from the actual implementation

21:36.800 --> 21:41.840
of what would happen when you actually trigger those buttons and those drop-downs, right?

21:41.840 --> 21:45.040
And so that was the last time I'd done any kind of front-end programming.

21:45.040 --> 21:47.200
But then I've heard, I heard so much about React.

21:47.200 --> 21:48.200
Everybody talk about it.

21:48.200 --> 21:49.760
So I said, okay, I need to learn this too.

21:49.760 --> 21:51.640
I need to see what it is.

21:51.640 --> 21:54.600
And so I picked a project that I wanted to just implement.

21:54.600 --> 21:58.160
I thought it was going to just be a weekend project.

21:58.160 --> 22:01.760
And so I learned about React.

22:01.760 --> 22:08.880
I knew Java, but JavaScript, I've not done a lot of JavaScript or TypeScript, but it

22:08.880 --> 22:10.040
was close enough.

22:10.040 --> 22:15.920
And so the first issue was, of course, programming language and the syntax and how things are.

22:15.920 --> 22:16.920
They're all different.

22:16.920 --> 22:21.440
There are so many programming languages these days and new ones coming up all the time.

22:21.440 --> 22:27.640
And each one has its own area where it shines and other areas where it's not so great.

22:27.640 --> 22:30.200
So that's the first place there's a difference.

22:30.200 --> 22:33.520
It's a different language that's used there.

22:33.520 --> 22:39.240
But then the framework itself, the concepts behind React and how do you use it for doing

22:39.240 --> 22:40.240
fun?

22:40.240 --> 22:41.240
And that was another thing.

22:41.240 --> 22:43.000
But it wasn't enough for me to just learn about React.

22:43.000 --> 22:48.200
The moment I, once I finished learning about React, I needed to learn about React Router,

22:48.200 --> 22:52.960
which is the thing that would route incoming calls.

22:52.960 --> 22:53.960
But that wasn't enough.

22:53.960 --> 22:58.680
I needed to learn about React Redux, right?

22:58.680 --> 23:01.760
And even that wasn't enough because I like to test my code.

23:01.760 --> 23:06.840
I like to, I shouldn't even say test, I'd like to specify the behavior of the code first

23:06.840 --> 23:08.920
and then actually go and implement the code.

23:08.920 --> 23:10.760
So I needed to have some testing framework.

23:10.760 --> 23:13.760
So just, I needed to learn about just.

23:13.760 --> 23:17.240
And that was also not enough because there's another testing framework for React called

23:17.240 --> 23:20.040
Enzyme, which is very popular.

23:20.040 --> 23:22.520
So by the, there were all these different frameworks.

23:22.520 --> 23:27.480
And by the time I'd gone, I'd just spent a whole bunch of weekends learning a lot of

23:27.480 --> 23:28.480
these things.

23:28.480 --> 23:30.080
And I still haven't written anything meaningful.

23:30.080 --> 23:35.560
I've not made any progress on what I wanted to build, right?

23:35.560 --> 23:40.560
And so, so that's, that's a big problem that there's just so many different things that

23:40.560 --> 23:42.240
developer needs to know.

23:42.240 --> 23:48.440
And now if you take this to the cloud world, you know, with AWS, we've had 250 plus services

23:48.440 --> 23:50.800
I think today on AWS.

23:50.800 --> 23:53.400
That's about 10,000 plus APIs.

23:53.400 --> 23:54.400
Yeah.

23:54.400 --> 23:55.400
Right.

23:55.400 --> 23:57.760
And by the time we finish this conversation, there'll be a few more.

23:57.760 --> 23:58.760
All right.

23:58.760 --> 24:03.280
So, so what is a, how, what does a developer, how does he do this?

24:03.280 --> 24:04.280
Right?

24:04.280 --> 24:06.280
And typically what people do is they go to stack overflow.

24:06.280 --> 24:07.280
Yeah.

24:07.280 --> 24:08.280
Okay.

24:08.280 --> 24:13.120
And then you're going to look for snippets of code that you can copy paste, right?

24:13.120 --> 24:19.120
So that's the, that's the life of a developer and it's, it's, it's, it's gotten harder.

24:19.120 --> 24:22.840
And so that's kind of where code whisperer comes in.

24:22.840 --> 24:30.520
And what code whisperer is, is it's an ML powered coding companion, a pair programming

24:30.520 --> 24:36.880
companion, if you will, that just helps developers be more productive.

24:36.880 --> 24:43.720
And it doesn't matter where you are in your journey as a developer, what, what code whisperer

24:43.720 --> 24:48.400
helps you accomplish, it helps you magnify your impact, no matter where you are in the

24:48.400 --> 24:49.400
journey.

24:49.400 --> 24:55.760
Right, and so I think that's the core, that's the core reason why we built it.

24:55.760 --> 24:56.760
Yeah.

24:56.760 --> 25:01.720
I've got to ask my, my suspicion is that, you know, most folks listening to this podcast,

25:01.720 --> 25:09.680
if not all, have heard of co-pilot, which is kind of collaboration between open AI and

25:09.680 --> 25:18.800
GitHub, which preceded code whisperer by sometimes six months, maybe, did they scoop

25:18.800 --> 25:25.640
you or no, I mean, you actually helped me set this up really nicely with your previous

25:25.640 --> 25:26.640
question, right?

25:26.640 --> 25:30.480
Like, so you, I talked to you about the journey we were on developer tools.

25:30.480 --> 25:33.440
We started in 2019 with code guru, right?

25:33.440 --> 25:36.800
So for me, this is a continuation of that, of that whole journey.

25:36.800 --> 25:42.840
So you can, you can, you can argue who came first with that story in place, right?

25:42.840 --> 25:47.920
But let me tell you about things that we're doing differently with code whisperer.

25:47.920 --> 25:52.080
We did a few things very differently with code whisperer.

25:52.080 --> 25:57.360
The first thing we did differently, if you look at things, the other tools that are out

25:57.360 --> 26:04.400
there that do things that are similar, you'll often, often you'll see, you'll see headlines

26:04.400 --> 26:10.160
like a lot of the code, about 40% of the code that's generated has security problems.

26:10.160 --> 26:11.160
Security issues.

26:11.160 --> 26:14.120
Security and licensing are the things that come up.

26:14.120 --> 26:15.120
Right.

26:15.120 --> 26:18.120
So I'm going to tackle security first, but then I'll come to licensing.

26:18.120 --> 26:21.400
So you're, you're, you're hitting the, you're hitting all the sweet spots right now.

26:21.400 --> 26:23.240
So yeah, so it's on security.

26:23.240 --> 26:31.680
So what we do is as part of code whisperer, which by the way, it's part of the AWS toolkit

26:31.680 --> 26:34.600
and the toolkit is a plugin to all the major IDs.

26:34.600 --> 26:37.640
So it's, we've got plugs into which was studio code.

26:37.640 --> 26:40.000
It also plugs into all the JetBrains IDs.

26:40.000 --> 26:47.240
So it's, I think PyCharm for Python and IntelliJ for Java and the WebStorm.

26:47.240 --> 26:50.760
And primarily to do completion for APIs and that kind of thing.

26:50.760 --> 26:51.760
Yes.

26:51.760 --> 26:56.240
And it's this, or initially, if not, yeah, we're not talking about completion, like,

26:56.240 --> 27:00.800
you know, like the way IntelliSense used to, used to be, we're talking about like 20 lines

27:00.800 --> 27:02.400
of code and 25 lines of code.

27:02.400 --> 27:07.400
So when we get to the demo at the end, you'll see, you'll see, I was speaking more generally

27:07.400 --> 27:13.840
about the IDE toolkit, that preceded code whisperer, correct?

27:13.840 --> 27:14.840
Or is that?

27:14.840 --> 27:17.440
Oh, the AWS toolkit has been there for a long time.

27:17.440 --> 27:18.440
Yeah.

27:18.440 --> 27:19.440
Right.

27:19.440 --> 27:23.560
And that was primarily created to make those IDEs aware of the AWS API.

27:23.560 --> 27:24.560
Exactly.

27:24.560 --> 27:25.560
Exactly.

27:25.560 --> 27:26.560
Right.

27:26.560 --> 27:27.560
For completion and things like that.

27:27.560 --> 27:28.560
Exactly.

27:28.560 --> 27:29.560
Okay, now I get it.

27:29.560 --> 27:30.560
This is like completion at another level.

27:30.560 --> 27:31.560
That's right.

27:31.560 --> 27:32.560
Which you will show us.

27:32.560 --> 27:33.560
Absolutely.

27:33.560 --> 27:34.560
Absolutely.

27:34.560 --> 27:35.560
Yeah.

27:35.560 --> 27:36.560
That's true.

27:36.560 --> 27:39.880
So what you just need to do is just download the AWS toolkit and they have it as part of

27:39.880 --> 27:40.960
these IDs.

27:40.960 --> 27:44.920
We also integrated code whisperer into our Lambda console.

27:44.920 --> 27:48.360
So Lambda is our serverless service.

27:48.360 --> 27:52.520
So it's where you just type in code and there's no servers to manage.

27:52.520 --> 27:55.920
Your code just runs and gives you the results, right?

27:55.920 --> 27:58.680
And so there's a lot of code that's being written on the Lambda console.

27:58.680 --> 28:00.400
So it's plugged in there.

28:00.400 --> 28:01.400
It's also plugged.

28:01.400 --> 28:02.400
Is it built into Cloud9 yet?

28:02.400 --> 28:03.400
Yes, it is.

28:03.400 --> 28:04.400
Okay.

28:04.400 --> 28:05.800
So it comes with integration into Cloud9 as well.

28:05.800 --> 28:08.200
That's our web-based ID.

28:08.200 --> 28:12.760
So we were on a topic and I digressed and went into this one.

28:12.760 --> 28:14.360
Yeah, the differentiators, right?

28:14.360 --> 28:18.920
So the first one is the security thing.

28:18.920 --> 28:22.200
For us at AWS, security is like job zero.

28:22.200 --> 28:26.560
I'm sure you've heard a lot about how seriously we take security.

28:26.560 --> 28:30.960
And we think we need to help because security is a very specialized skill.

28:30.960 --> 28:39.600
Most companies have a separate group of experts that are just there for this topic in general.

28:39.600 --> 28:43.800
And so we have what's called a security scan that's built into code whisperer.

28:43.800 --> 28:53.320
So you could write code and then you could accept a lot of the code whisperer suggestions

28:53.320 --> 28:54.880
and you can also edit it further.

28:54.880 --> 28:58.480
But at the very end, we've got the security scan thing that you can hit.

28:58.480 --> 29:02.840
And it's going to tell you if there are any security issues in the code that it's scanned.

29:02.840 --> 29:06.080
So that's the first thing that we've done differently.

29:06.080 --> 29:11.320
We want to make sure that the code we generated, the code that ends up coming out at the other

29:11.320 --> 29:18.880
end, we want to help in as many ways as we can to make sure that it doesn't have any

29:18.880 --> 29:20.080
security issues.

29:20.080 --> 29:25.960
And presumably that security scan is also an ML model that's trained to recognize potential

29:25.960 --> 29:26.960
security issues?

29:26.960 --> 29:27.960
Absolutely.

29:27.960 --> 29:28.960
Yeah.

29:28.960 --> 29:29.960
Yeah.

29:29.960 --> 29:32.840
Code guru had this capability when we launched it in 2019.

29:32.840 --> 29:36.440
And so we're using a lot of that here as well.

29:36.440 --> 29:39.560
So that's the first area where it's different.

29:39.560 --> 29:46.360
And the second area where it's different is in terms of the code it generates, I'm sure

29:46.360 --> 29:53.960
you've heard of like AI systems like in with games like chess and go, these they come up

29:53.960 --> 29:57.760
with new moves that they've never seen before or new strategies they've never seen before

29:57.760 --> 30:02.560
and to a large extent, that's what happens when code whisperer is generating code.

30:02.560 --> 30:04.560
It's generating code is not seen before.

30:04.560 --> 30:10.600
But there may be instances where the code that it generates is close enough to something

30:10.600 --> 30:11.800
that it's seen before.

30:11.800 --> 30:14.880
And code whisperer, of course, is trained on billions of lines, more than billions of

30:14.880 --> 30:20.600
lines of code from public repositories, you know, from Amazon repositories code repositories

30:20.600 --> 30:25.600
from documentation and forums, public forums, and that's it's trained on a lot of stuff.

30:25.600 --> 30:32.440
So it may have seen something similar before and then what code whisperer will do is it

30:32.440 --> 30:38.960
provides what we call a reference tracker, where it lists the license under which that

30:38.960 --> 30:42.160
other similar piece of code was provided.

30:42.160 --> 30:48.840
So this way developers know that the code that is there could potentially have that

30:48.840 --> 30:52.280
license so they can decide whether they want to include that piece of code, they want to

30:52.280 --> 30:57.280
accept that suggestion or they don't want to, it depends on, you know, what the company

30:57.280 --> 31:00.800
rules are, it depends on things like that.

31:00.800 --> 31:03.280
So that's the second thing that we're doing differently.

31:03.280 --> 31:11.400
And the third thing that we're doing differently is like, we talked about the number of AWS

31:11.400 --> 31:12.800
services, right?

31:12.800 --> 31:16.440
And so first class support for AWS APIs.

31:16.440 --> 31:21.280
We know what the most common patterns are in terms of application developers and how

31:21.280 --> 31:23.080
they use the cloud.

31:23.080 --> 31:30.640
And now you can, without having to learn about the 10,000 plus APIs, without having to worry

31:30.640 --> 31:35.560
about any of that, your intent, you just express your intent, as you will see later, you express

31:35.560 --> 31:42.760
your intent either in the form of a good name for the function or in the form of a comment.

31:42.760 --> 31:48.080
And we're just going to give you the best pieces of code that would make the most sense

31:48.080 --> 31:49.880
in that point.

31:49.880 --> 31:51.880
So those are some of the differences.

31:51.880 --> 32:00.920
We're also pretty, we do some aggressive filtering on potential harmful stuff.

32:00.920 --> 32:06.120
And so we're also, we've taken a lot of effort to minimize any issues there as well.

32:06.120 --> 32:12.240
So these are all the differences for Code Whisperer at this point in time.

32:12.240 --> 32:18.960
You talked about the sources of code that Code Whisperer was trained on.

32:18.960 --> 32:20.640
You spoke about them broadly.

32:20.640 --> 32:25.000
Is GitHub included in that set of repositories?

32:25.000 --> 32:30.840
Anything that's public and has the right license, that's what we use.

32:30.840 --> 32:36.080
Are there specific licenses or types of licenses that you filtered on?

32:36.080 --> 32:41.680
Definitely the pieces of code that are public and are available for consumption.

32:41.680 --> 32:46.480
Those are part of the training corpus as well as all of the Amazon code internally that

32:46.480 --> 32:51.480
we've had from over many years, that's part of it as well.

32:51.480 --> 32:58.600
And anything that's public and like documentation that's public, those are all pieces of code

32:58.600 --> 33:00.120
that goes into the training.

33:00.120 --> 33:09.320
I'm imagining that if you're scouring the web, crawling the web, looking for code that

33:09.320 --> 33:15.880
even the identifying code, identifying the licenses associated with that code presents

33:15.880 --> 33:17.760
interesting machine learning problems.

33:17.760 --> 33:18.760
Absolutely.

33:18.760 --> 33:19.760
Yeah.

33:19.760 --> 33:22.680
There's a lot of classification problems right there, right?

33:22.680 --> 33:27.760
A whole class of classification problems just on figuring out which are the ones that

33:27.760 --> 33:30.160
you want to use and which are the ones you don't want to use.

33:30.160 --> 33:34.560
And of course, we've used every technique that we've already have.

33:34.560 --> 33:38.840
I've talked about many of our AI services at the top layer of the stack.

33:38.840 --> 33:42.160
Comprehend for example has a document classification API.

33:42.160 --> 33:47.480
Essentially, what you do there is that you decide what you want to call your category

33:47.480 --> 33:52.080
and you give it examples of a certain document that belong to that category, some number

33:52.080 --> 33:56.640
of documents that belong to that category, define a category two, another set of documents

33:56.640 --> 33:59.800
that belong to that category and then you could define a third category called other

33:59.800 --> 34:04.440
where you give it a whole bunch of documents that have no particular category.

34:04.440 --> 34:09.760
And then Comprehend will train a custom model for you and you don't have to be an ML expert

34:09.760 --> 34:10.760
for it.

34:10.760 --> 34:12.240
It's accessible through the APIs.

34:12.240 --> 34:17.360
And then you have now an endpoint where you can send it new documents and it's going

34:17.360 --> 34:21.640
to tell you is it class one or class two or class three.

34:21.640 --> 34:27.000
So we have a lot of these techniques already in place and we've used that a lot for these

34:27.000 --> 34:28.000
kinds of things.

34:28.000 --> 34:29.000
Okay.

34:29.000 --> 34:30.000
Okay.

34:30.000 --> 34:37.920
Presumably this is based on a large language model like other implementations of code generation.

34:37.920 --> 34:46.520
In the textual context of LLMs, one of the big conversations is around bias and kind

34:46.520 --> 34:48.160
of responsible use of those.

34:48.160 --> 34:49.160
Yeah.

34:49.160 --> 34:52.680
Do those same kinds of issues surface when we're talking about code?

34:52.680 --> 34:53.680
And if so, how?

34:53.680 --> 34:54.680
Yeah.

34:54.680 --> 35:00.320
So if you look at a lot of the transformer models, they've got, you know, they're built

35:00.320 --> 35:01.320
on top of each other.

35:01.320 --> 35:03.960
So there's various checkpoints.

35:03.960 --> 35:08.120
Basically you would have a large language model that's trained on just text.

35:08.120 --> 35:10.980
And then you would, that would be a checkpoint.

35:10.980 --> 35:13.960
And then you would take that and then now train it on code, right?

35:13.960 --> 35:20.880
So if there's issues with that core-based model, they're probably going to linger on.

35:20.880 --> 35:29.040
And so we've got, if you go to Amazon.science, it's one of the websites.

35:29.040 --> 35:35.720
And you'll see that we published just in the last year alone, we published about 400 papers

35:35.720 --> 35:40.640
on responsible AI that deals with all of these topics, which we take very seriously, things

35:40.640 --> 35:43.280
like bias and fairness.

35:43.280 --> 35:50.880
We have, in my team, we've got the person that wrote the book on algorithmic bias.

35:50.880 --> 35:56.680
He's a professor at UPenn, his name is Michael Kearns, you'll meet him later today.

35:56.680 --> 36:03.760
And so we've got all of those experts helping us avoid the pitfalls as much as possible.

36:03.760 --> 36:08.120
Now this is, of course, an emerging, it's a thing that's still progressing.

36:08.120 --> 36:13.960
It's not like we know exactly what we need to do here, but we've got the best minds

36:13.960 --> 36:19.560
looking at these topics and helping us figure out how best to deal with those situations.

36:19.560 --> 36:25.320
I didn't mention some very aggressive filtering that we're doing to prevent those kinds of

36:25.320 --> 36:26.320
situations.

36:26.320 --> 36:31.760
So these are things where implemented with the guidance of folks like Michael.

36:31.760 --> 36:42.200
Imagining the kind of classic profanity in comments is one example, but are there other,

36:42.200 --> 36:48.360
I was kind of trying to get some examples of the way bias types of issues might surface

36:48.360 --> 36:51.160
in a code-specific context.

36:51.160 --> 36:53.840
Are there examples that come to mind of that?

36:53.840 --> 36:57.960
Yeah, generally, let's say you're writing a function that takes an agenda and makes

36:57.960 --> 36:59.760
a decision based on the gender.

36:59.760 --> 37:04.240
There could be areas where bias could creep in, and so you've got to explicitly look for

37:04.240 --> 37:08.760
situations like that and make sure you don't generate codes along those paths.

37:08.760 --> 37:09.880
That's one.

37:09.880 --> 37:12.680
Another one is, of course, keys, right?

37:12.680 --> 37:15.680
So we're talking about APIs in the cloud.

37:15.680 --> 37:23.320
A common thing that I see happen a lot is just keys, where your secret keys and developers

37:23.320 --> 37:28.840
tend to sometimes just put it into the source file, including the ones checked into GitHub.

37:28.840 --> 37:30.840
There's a lot of your keys are in there.

37:30.840 --> 37:32.080
Unfortunately, that does happen.

37:32.080 --> 37:38.640
And now if you're learning from all of that, and let's say you do want to generate that

37:38.640 --> 37:43.800
line, you could leak a potential key.

37:43.800 --> 37:48.120
And so we've taken a lot of care to prevent those kinds of situations, and I'll probably

37:48.120 --> 37:52.040
be able to show you that as well when we actually get to the demo in the end.

37:52.040 --> 37:53.040
Awesome.

37:53.040 --> 38:00.200
Well, this may be a great segue to the demo before we do any additional thoughts you want

38:00.200 --> 38:02.320
to share before we jump into the demo.

38:02.320 --> 38:10.040
No, I just think that I told you that I'm a very passionate developer and I still am.

38:10.040 --> 38:16.840
I really think that this is just the beginning of what we're going to be able to do.

38:16.840 --> 38:20.840
And this is going to make developers' lives a lot more easier, and I think they can focus

38:20.840 --> 38:26.040
most developers that I know, they want to focus on the higher value problem.

38:26.040 --> 38:31.760
They're less interested in the boilerplate, you know, things that a framework may dictate.

38:31.760 --> 38:34.520
And that's the bad part of writing code.

38:34.520 --> 38:39.040
It's the real cool part is the business logic.

38:39.040 --> 38:42.280
That's the cool parts that you want to actually write.

38:42.280 --> 38:46.520
And so I think this is going to be, this is going to be in a space to watch going forward.

38:46.520 --> 38:50.120
There's going to be a lot of innovation coming on this topic.

38:50.120 --> 38:53.880
And I just, I'm very excited for what's to come in this area.

38:53.880 --> 39:00.880
Just to probe into that a little bit, do you have a gut feel for where you think the innovation

39:00.880 --> 39:06.000
will come first or kind of what the, you know, what the path looks like?

39:06.000 --> 39:10.560
We've got some ideas on where the path looks like, and I'm sure you know that like 90%

39:10.560 --> 39:14.000
of what we do, it is driven by our customers.

39:14.000 --> 39:16.040
It's what they're asking us for.

39:16.040 --> 39:23.080
And about 10% of the time we think on their behalf and we do something based on that.

39:23.080 --> 39:29.800
The obvious next steps will just be support for the more popular languages.

39:29.800 --> 39:36.640
I think we're currently support TypeScript, JavaScript, Java, Python is what we support.

39:36.640 --> 39:40.720
So obviously there's going to be an element of supporting some of the key languages.

39:40.720 --> 39:45.320
That's definitely going to be one that's going to be there.

39:45.320 --> 39:49.920
But I think it's just going to get better and better in terms of, in terms of the actual

39:49.920 --> 39:52.840
code that's generated.

39:52.840 --> 39:57.480
Today developers can accept, you know, they can accept, there's going to be options.

39:57.480 --> 40:05.880
So when Code Whisperer generates code, it gives you X number of options.

40:05.880 --> 40:10.400
You can actually stroll through it and see which one sort of fit your style and what

40:10.400 --> 40:12.800
you want to include.

40:12.800 --> 40:17.360
Those suggestions will get better over time and I think it'll just make people's lives

40:17.360 --> 40:19.440
a lot easier.

40:19.440 --> 40:24.120
And best practices, you know, we can capture best practices.

40:24.120 --> 40:30.600
I mentioned already, we kind of know the patterns of how AWS APIs are accessed for application

40:30.600 --> 40:32.600
development.

40:32.600 --> 40:37.480
And if you use, there's best practices in terms of how you put them together, how you

40:37.480 --> 40:39.480
do error checking and things like that.

40:39.480 --> 40:45.480
And so those things can come more and more out of the box and this will make it easier

40:45.480 --> 40:51.880
for even, you know, developers that are earlier in their journey to generate pieces of code

40:51.880 --> 40:53.720
that are pretty robust.

40:53.720 --> 40:57.680
So that's pretty much what I can share at this point in time.

40:57.680 --> 40:58.680
Awesome.

40:58.680 --> 40:59.680
Awesome.

40:59.680 --> 41:01.200
Well, let's jump into the demo.

41:01.200 --> 41:02.200
Okay.

41:02.200 --> 41:03.200
All right.

41:03.200 --> 41:04.200
What are we looking at here, Vasi?

41:04.200 --> 41:05.200
All right.

41:05.200 --> 41:09.880
We're looking at JetBrains PyCharm and I picked this one because Python is not a language

41:09.880 --> 41:16.080
that I like, but that's exactly why, you know, CodeWhisperer is very useful.

41:16.080 --> 41:17.080
So let me...

41:17.080 --> 41:20.040
You just alienated a large portion of our audience.

41:20.040 --> 41:21.040
I know.

41:21.040 --> 41:22.040
I know.

41:22.040 --> 41:23.040
I know.

41:23.040 --> 41:24.040
I know.

41:24.040 --> 41:25.040
I know.

41:25.040 --> 41:26.040
I just don't like...

41:26.040 --> 41:27.040
You might be able to redeem yourself by saying you love Julia.

41:27.040 --> 41:28.040
Okay.

41:28.040 --> 41:29.040
All right.

41:29.040 --> 41:30.040
All right.

41:30.040 --> 41:34.840
Anyway, so I'm going to be doing a series of demos and each one sort of takes it up

41:34.840 --> 41:35.840
a notch a little bit.

41:35.840 --> 41:39.560
That's what I'm going to try and do here.

41:39.560 --> 41:44.360
So the first one, it's kind of going to be a utility kind of thing that I think most

41:44.360 --> 41:48.960
developers want to do what they end up doing at some point, right?

41:48.960 --> 41:53.400
So CodeWhisperer is enabled and the AWS toolkit has been installed.

41:53.400 --> 41:56.320
You guys can see it on the left side of the screen.

41:56.320 --> 42:08.040
So I'm going to just start by saying a function to convert a JSON file to...

42:08.040 --> 42:16.440
And you see CodeWhisperer just popped up, even my comment, all right?

42:16.440 --> 42:19.280
So I'm just going to accept that.

42:19.280 --> 42:22.400
And I want to specify a few more things, right?

42:22.400 --> 42:30.480
I want to say things like the keys of the JSON file are the column names.

42:30.480 --> 42:33.160
Again, you see that CodeWhisperer popped that up.

42:33.160 --> 42:35.280
I'm going to accept that as well.

42:35.280 --> 42:38.920
And then I don't care about the values much.

42:38.920 --> 42:42.600
And now let's see what CodeWhisperer does.

42:42.600 --> 42:47.000
It just generates the function name.

42:47.000 --> 42:50.240
I'm just going to accept it.

42:50.240 --> 42:58.160
And there is a set of code, a bunch of code that it just popped up.

42:58.160 --> 43:01.520
And then you can see this little thing at the bottom.

43:01.520 --> 43:02.520
And those are the choices.

43:02.520 --> 43:04.240
It says one of four.

43:04.240 --> 43:12.440
And so I could probably go through the various options it's given me and try and pick the

43:12.440 --> 43:14.320
one that I like the most.

43:14.320 --> 43:18.360
And I'm probably going to pick this one.

43:18.360 --> 43:19.800
You can see what it's doing here.

43:19.800 --> 43:24.080
It's taking the keys, it's writing the header with the keys, just like we said.

43:24.080 --> 43:25.440
And then it's writing all the rows.

43:25.440 --> 43:28.240
So I'm just going to pick that.

43:28.240 --> 43:30.960
And so I guess that's kind of done.

43:30.960 --> 43:33.160
I don't want to print anything.

43:33.160 --> 43:40.600
And then if we just go in here to an empty area and then see what else it's going to,

43:40.600 --> 43:45.720
you can see that what it did here is now it's saying a function to convert a CSV file to

43:45.720 --> 43:46.720
a JSON file.

43:46.720 --> 43:48.800
So it's the opposite of what we just did.

43:48.800 --> 43:54.320
Which is a common thing that most developers do, like they write a transformation from

43:54.320 --> 43:55.480
one side to the other.

43:55.480 --> 43:58.760
And it's very likely you want the transformation from the other side as well.

43:58.760 --> 44:02.640
So we can continue doing that.

44:02.640 --> 44:04.840
And we'll see what happens here.

44:04.840 --> 44:10.760
I don't want that thing.

44:10.760 --> 44:13.760
And there's the function name, CSV to JSON.

44:13.760 --> 44:15.240
I accept it.

44:15.240 --> 44:17.880
And then I keep going.

44:17.880 --> 44:20.520
And again, I've got a bunch of options here.

44:20.520 --> 44:24.120
You can see it uses a dict reader on the CSV data.

44:24.120 --> 44:26.040
And then it's dumping it into the JSON file.

44:26.040 --> 44:28.880
I could just accept that and be done with it.

44:28.880 --> 44:33.480
So that's sort of the first little demo that I wanted to start with so that you get used

44:33.480 --> 44:34.840
to the interface.

44:34.840 --> 44:37.960
You kind of see what happens.

44:37.960 --> 44:45.040
What I'll do next is I'll go to a more obscure API.

44:45.040 --> 44:50.680
And I say obscure because most developers that use AWS, they've used the S3, the typical

44:50.680 --> 44:55.960
examples are upload a file to S3, or they're doing some EC2 stuff.

44:55.960 --> 45:01.000
And so Transcribe is one of my services, the speech to text service.

45:01.000 --> 45:05.360
Unless you are an AI developer, or unless you're a developer that wants AI in your app,

45:05.360 --> 45:09.440
you probably won't know about it.

45:09.440 --> 45:12.240
And so this is a situation exactly like that.

45:12.240 --> 45:17.600
So what I'll start with, and because we're going to be demonstrating use of an AWS API

45:17.600 --> 45:30.920
here, I'll start with variables for AWS credentials.

45:30.920 --> 45:33.360
And you can see there's the access key.

45:33.360 --> 45:36.280
But you also see that it's not giving me the key itself.

45:36.280 --> 45:41.960
And even though it may have seen some keys in the training data, there's a secret key

45:41.960 --> 45:45.040
probably a region.

45:45.040 --> 45:48.320
And I guess I don't care anymore.

45:48.320 --> 45:59.560
Then the next thing I'll do is write a function to transcribe, I have to type write, transcribe

45:59.560 --> 46:08.120
a German, it popped up audiophile, but I want to say a German audiophile to text.

46:08.120 --> 46:11.940
You can see it popped that as well, right?

46:11.940 --> 46:15.880
So it's giving me the name of the function, I accepted it.

46:15.880 --> 46:20.160
And this is going to be more elaborate.

46:20.160 --> 46:24.160
So we just wait for it.

46:24.160 --> 46:27.680
You can see a lot of stuff happening here.

46:27.680 --> 46:32.120
The bottle client is created with the transcribe thing, that's typically how you can see that

46:32.120 --> 46:36.800
the access keys and the secret keys in the region from above, the variables are being

46:36.800 --> 46:41.320
used to generate that variable.

46:41.320 --> 46:48.320
And then you can see the cool thing here, it understands the locale, it's DDE.

46:48.320 --> 46:53.760
And so you don't have to look up the documentation.

46:53.760 --> 46:56.800
There's a transcribe start transcription job, right?

46:56.800 --> 47:00.160
And then here it returns the job, right?

47:00.160 --> 47:06.760
And so there's probably more options, there's probably more options down there.

47:06.760 --> 47:07.760
But I'm just going to...

47:07.760 --> 47:14.480
Yeah, speaking of options, if you knew a little bit about transcribe and say previously, defined

47:14.480 --> 47:19.600
a variable with a channel type, which is one of those parameters that transcribe will take,

47:19.600 --> 47:21.560
would it have inserted that in the right place?

47:21.560 --> 47:22.560
Yes, absolutely.

47:22.560 --> 47:27.400
So the way CodeWhisperer works is it gets context in the call.

47:27.400 --> 47:31.280
And the context for it depends on where the cursor is.

47:31.280 --> 47:39.720
It's code around that cursor, and it could even be code in other files in the project.

47:39.720 --> 47:42.880
And so it uses that to figure out what's the best way to do it.

47:42.880 --> 47:47.420
And some of the options may include it, some of the options may not include it, right?

47:47.420 --> 47:49.480
So that's kind of how it works.

47:49.480 --> 47:52.200
So let me accept this.

47:52.200 --> 48:01.280
And maybe what I... rather than returning the transcribe job, maybe what I could do is just

48:01.280 --> 48:07.480
delete this thing here and see what it would generate.

48:07.480 --> 48:09.440
Maybe it would generate the same thing.

48:09.440 --> 48:12.600
But okay, wait for the transcription to complete.

48:12.600 --> 48:16.400
Okay, while true.

48:16.400 --> 48:18.040
And let's see what happens.

48:18.040 --> 48:19.040
Yeah.

48:19.040 --> 48:25.000
So it's actually parsing that thing, going into it multiple levels to figure out the

48:25.000 --> 48:30.160
status, sleeping for a while, and so on and so forth.

48:30.160 --> 48:32.400
So you could keep going with this.

48:32.400 --> 48:34.960
It's discoverability of these APIs.

48:34.960 --> 48:36.080
It's now a lot easier.

48:36.080 --> 48:38.440
You don't have to go to Stack Overflow and look for the snippet.

48:38.440 --> 48:41.200
The snippet's right there on the ID.

48:41.200 --> 48:45.160
So that's the second demo that I wanted to show, and I wanted to show how it would work

48:45.160 --> 48:47.280
on an AWS API.

48:47.280 --> 48:50.480
That's not very common for people to know about.

48:50.480 --> 48:55.240
Then the last thing that I probably would do, and this is where we... let's actually

48:55.240 --> 48:59.640
create something that we actually run and see if it works, right?

48:59.640 --> 49:11.920
And so... and what I'm going to try and do is write a function to plot sine of... sine

49:11.920 --> 49:28.440
of X, and let's say two star cosine of X, come on, with red and blue dashes for the range

49:28.440 --> 49:30.640
minus pi to pi, all right?

49:30.640 --> 49:31.640
That's a lot of stuff.

49:31.640 --> 49:38.000
And granted that, you know, we always have to pray to the demo gods, so to speak.

49:38.000 --> 49:43.200
But you would think that given the nature of what's happening, you'd be fairly robust

49:43.200 --> 49:45.200
to typos.

49:45.200 --> 49:47.800
Is that what you find in general?

49:47.800 --> 49:51.520
In general, when I'm writing code, I'm writing it for the next person that's going to be

49:51.520 --> 49:53.480
looking at it more than anything else.

49:53.480 --> 49:59.040
So there's this whole philosophy, and I could talk about it for hours.

49:59.040 --> 50:05.480
A good code basis is one where... let's say you have a new developer in the team, that

50:05.480 --> 50:09.760
person can add a new feature in the shortest amount of time.

50:09.760 --> 50:14.480
And I think that's possible only if your code base is self-explanatory.

50:14.480 --> 50:19.000
It's decoupled, isolated, things, responsibilities are isolated.

50:19.000 --> 50:23.920
So yeah, even if I... you could say, okay, why can't we correct the typos?

50:23.920 --> 50:26.000
Maybe that would be a future thing that we do.

50:26.000 --> 50:27.120
It should be possible to do.

50:27.120 --> 50:30.760
I don't see a reason why that won't work.

50:30.760 --> 50:32.920
But in general, the context is a lot of stuff.

50:32.920 --> 50:37.640
And so if let's say there's a spelling error... in fact, you know what I'm going to do right

50:37.640 --> 50:38.640
now?

50:38.640 --> 50:40.200
Let me actually take this.

50:40.200 --> 50:41.520
Let me actually mess around with it.

50:41.520 --> 50:43.880
I don't want that argument, right?

50:43.880 --> 50:44.880
So it generated that.

50:44.880 --> 50:46.600
I'm actually going to change that.

50:46.600 --> 50:48.560
And now let's see what it does.

50:48.560 --> 50:50.440
It just generated all that stuff, right?

50:50.440 --> 50:54.600
And you can see it's using minus pi to pi.

50:54.600 --> 51:01.720
It's got the red dash on sign and the blue on the... let me just accept it.

51:01.720 --> 51:06.920
And then if I go here, yeah, so it's calling that function.

51:06.920 --> 51:13.840
So now if I just run this thing, let's see what happens if it's even correct and there

51:13.840 --> 51:14.840
it is.

51:14.840 --> 51:15.840
All right.

51:15.840 --> 51:19.280
So you see the program actually running.

51:19.280 --> 51:26.000
So that's kind of the last thing that I wanted to show that it can do things that are pretty

51:26.000 --> 51:27.000
elaborate.

51:27.000 --> 51:33.360
And in the end, though, the developer is responsible for the code and I think the person needs

51:33.360 --> 51:38.240
to know what to accept, you know, with the options.

51:38.240 --> 51:40.580
How does he want to take this further?

51:40.580 --> 51:45.760
So that's why we call it a... it's more of a companion than... it's not the thing leading

51:45.760 --> 51:46.760
the way.

51:46.760 --> 51:51.600
It's the thing that's helping you not have to go look things up in multiple places.

51:51.600 --> 51:52.600
Yeah.

51:52.600 --> 51:55.640
It's your typo, not quite a whisperer.

51:55.640 --> 51:56.640
Right.

51:56.640 --> 52:00.080
But I think that's definitely something that we should be able to handle.

52:00.080 --> 52:04.000
So you've just given me a good idea for our roadmap.

52:04.000 --> 52:05.320
Cool.

52:05.320 --> 52:09.160
That's all I had to show.

52:09.160 --> 52:13.400
Well, Vasi, great conversation and great demo.

52:13.400 --> 52:19.000
Thanks so much for taking the time to share with us a bit about Code Whisperer and more

52:19.000 --> 52:23.720
broadly the AI services portfolio and the way you think about all those things.

52:23.720 --> 52:24.720
It was a pleasure.

52:24.720 --> 52:25.720
Thanks for having me, Sam.

52:25.720 --> 52:26.720
Thank you.

52:26.720 --> 52:27.720
All right.

52:27.720 --> 52:55.720
Thank you.

