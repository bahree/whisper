WEBVTT

00:00.000 --> 00:09.720
 All right, everyone, welcome to another episode of the TwiML AI podcast.

00:09.720 --> 00:12.360
 I am your host, Sam Charrington.

00:12.360 --> 00:14.560
 And today I'm joined by Vasi Filaman.

00:14.560 --> 00:19.820
 Vasi is vice president and general manager of machine learning and AI at Amazon.

00:19.820 --> 00:23.360
 Before we get going, be sure to take a moment to hit that subscribe button wherever you're

00:23.360 --> 00:24.880
 listening to today's show.

00:24.880 --> 00:26.820
 Vasi, welcome to the podcast.

00:26.820 --> 00:28.080
 Thanks for having me, Sam.

00:28.080 --> 00:30.320
 I'm super excited for this discussion.

00:30.320 --> 00:35.440
 For those who, well, you don't know yet, but you're about to know, this is a very special

00:35.440 --> 00:43.400
 interview because it is the first in-person interview I've done since NeurIPS in Vancouver

00:43.400 --> 00:45.400
 in 2019.

00:45.400 --> 00:52.020
 I happen to be in New York for some meetings with AWS, as was Vasi.

00:52.020 --> 00:56.560
 And here we are, and we're going to spend some time today talking about the recently

00:56.560 --> 01:00.840
 announced Amazon Code Whisperer coding companion.

01:00.840 --> 01:05.400
 And as a bonus, Vasi will be doing a demo for me that you'll be able to catch on YouTube

01:05.400 --> 01:07.640
 towards the end of our interview.

01:07.640 --> 01:10.880
 Vasi, let's get started with some background.

01:10.880 --> 01:13.040
 Tell us a little bit about your role at AWS.

01:13.040 --> 01:20.320
 Yeah, so I'm vice president at AWS, and I'm responsible for our AI services.

01:20.320 --> 01:22.360
 My background is machine learning.

01:22.360 --> 01:27.240
 Back in the 90s, I did a PhD in computer science from the University of Maryland.

01:27.240 --> 01:29.200
 And I chose to do it in machine learning.

01:29.200 --> 01:31.880
 It wasn't a common thing to do at that time.

01:31.880 --> 01:36.600
 A lot of my friends were asking me, what the heck is machine learning?

01:36.600 --> 01:38.020
 Like, why are you doing machine learning?

01:38.020 --> 01:43.160
 You should be doing databases, or you should be doing operating systems.

01:43.160 --> 01:45.960
 But I have to say that I'm the one with the last laugh.

01:45.960 --> 01:48.440
 I'm kind of glad that I did it at that time.

01:48.440 --> 01:50.360
 It's serving me really well right now.

01:50.360 --> 01:56.800
 And your role at AWS, what aspects of ML and AI are you responsible for?

01:56.800 --> 02:01.720
 Yeah, I'm responsible for a lot of the services that we have at the top layer of the stack.

02:01.720 --> 02:05.520
 Are you familiar, Sam, with the three layers of the stack, the way we think about machine

02:05.520 --> 02:06.520
 learning?

02:06.520 --> 02:07.520
 Absolutely.

02:07.520 --> 02:08.520
 Yeah, so...

02:08.520 --> 02:09.840
 But we can recap.

02:09.840 --> 02:15.360
 That's infrastructure at the bottom, developer or data scientist, focus tools in the middle,

02:15.360 --> 02:19.400
 and cognitive services, for lack of a better word, or AI services at the top.

02:19.400 --> 02:20.400
 Right, right.

02:20.400 --> 02:23.400
 And I'm responsible for the top layer there, the AI services layer.

02:23.400 --> 02:24.680
 It's not just cognitive.

02:24.680 --> 02:28.400
 There's a set of cognitive language services at the top layer.

02:28.400 --> 02:30.880
 There's also a bunch of industrial services.

02:30.880 --> 02:34.960
 So there's a whole variety of services at the top layer of the stack.

02:34.960 --> 02:40.040
 The difference, though, with the middle layer is that the top layer is more a managed experience,

02:40.040 --> 02:44.440
 and people using those services don't have to be experts in machine learning.

02:44.440 --> 02:50.520
 All they need to know is, here's my application, and here's how I'm going to make it smarter,

02:50.520 --> 02:55.280
 and I need this capability that I could just plug into my application to make it smarter.

02:55.280 --> 02:58.800
 And then they can just go and use it just like they do today.

02:58.800 --> 03:04.480
 They access a web service for compute, or they access a web service for storage.

03:04.480 --> 03:09.760
 They can now access an AI service in the same exact way, and they can insert it into their

03:09.760 --> 03:13.320
 own applications and make their applications faster.

03:13.320 --> 03:19.040
 So let's dig in a little bit into the distinction between cognitive and industry.

03:19.040 --> 03:27.360
 So the non-cognitive services would be things like, I know AWS has, for example, medical

03:27.360 --> 03:28.360
 transcription.

03:28.360 --> 03:32.480
 Would you consider that non-cognitive, or are you thinking like the call center AI?

03:32.480 --> 03:33.800
 Okay, okay.

03:33.800 --> 03:36.720
 Let me describe that to you in more detail.

03:36.720 --> 03:42.600
 When we started out, the first few services we launched, I would call them foundational

03:42.600 --> 03:47.080
 to any machine learning business or unit.

03:47.080 --> 03:52.320
 And they're foundational in the sense that they capture a lot of the cognitive things

03:52.320 --> 03:53.580
 that humans are able to do.

03:53.580 --> 03:57.520
 So to give you an example, we started with Lex.

03:57.520 --> 04:00.680
 Lex is sort of the guts of Alexa.

04:00.680 --> 04:04.440
 Essentially it's the two A's removed from Alexa, and what's inside is Lex.

04:04.440 --> 04:06.360
 Not many people know that, but now they do, I'm sure.

04:06.360 --> 04:07.840
 It all makes sense now.

04:07.840 --> 04:08.840
 Right, right.

04:08.840 --> 04:14.400
 So Lex is our conversational AI platform, and what people can do with it is they could

04:14.400 --> 04:18.880
 build their own Alexas if they wanted to, or they could build a chat bot and insert

04:18.880 --> 04:21.160
 it into their website.

04:21.160 --> 04:25.980
 And so Lex is something that would understand both text input as well as speech input.

04:25.980 --> 04:31.120
 So they build a bot just once, and then they can insert it into a call center conversation

04:31.120 --> 04:37.000
 so that it can take the call and maybe take care of the customer that's calling.

04:37.000 --> 04:39.620
 So that's Lex, which is our conversational part.

04:39.620 --> 04:41.960
 That's definitely a cognitive service.

04:41.960 --> 04:43.920
 We call it a language service.

04:43.920 --> 04:47.200
 I think Gartner calls it a language service too.

04:47.200 --> 04:48.760
 So we also have Polly.

04:48.760 --> 04:51.960
 Polly is our text to speech service.

04:51.960 --> 04:55.580
 Alexa's voice is actually a Polly voice.

04:55.580 --> 05:00.160
 But customers now have the capability to have their own voices.

05:00.160 --> 05:04.920
 They can pick from one of the many languages that we support and the different kinds of

05:04.920 --> 05:08.800
 voices we may have for each of the languages, and then they could just use it for various

05:08.800 --> 05:09.800
 applications.

05:09.800 --> 05:13.800
 And a common one they use it for is they just put this thing on a webpage.

05:13.800 --> 05:18.560
 And so when people are driving their cars, they can just listen to what's on the webpage

05:18.560 --> 05:21.560
 and Polly is going to narrate it for you.

05:21.560 --> 05:23.080
 So that's another cognitive service.

05:23.080 --> 05:28.300
 Then we've got Amazon Translate, which is a document translation.

05:28.300 --> 05:30.760
 You can go from one language to another.

05:30.760 --> 05:35.060
 And we've gotten to very high quality these days in terms of translation.

05:35.060 --> 05:37.480
 So you could do a lot of cool things with that.

05:37.480 --> 05:41.120
 Then we've got Transcribe, which is a speech to text.

05:41.120 --> 05:46.680
 We talked about text to speech before with Polly, but this one is speech to text.

05:46.680 --> 05:53.480
 And so this is useful for you to understand what's being said in a conversation.

05:53.480 --> 05:56.080
 So that is another cognitive service.

05:56.080 --> 06:00.000
 And then we've got yet another one called Comprehend, which is a natural language processing

06:00.000 --> 06:01.000
 service.

06:01.000 --> 06:03.920
 And it's got all kinds of things you could do with it, like sentiment.

06:03.920 --> 06:08.240
 Given a piece of unstructured text, it'll tell you what the sentiment is.

06:08.240 --> 06:09.800
 Is it a negative sentiment?

06:09.800 --> 06:10.920
 Is it a positive sentiment?

06:10.920 --> 06:16.360
 So customers often, they use it for reviews, like they capture reviews and then they run

06:16.360 --> 06:18.080
 it through Comprehend.

06:18.080 --> 06:23.560
 And they understand like, are people excited about whatever it is that the review was for

06:23.560 --> 06:25.480
 or are they unhappy about it?

06:25.480 --> 06:27.600
 And we've got things like targeted sentiment.

06:27.600 --> 06:33.980
 So in the same sentence, you could say that the food was great, but the service was lousy.

06:33.980 --> 06:37.940
 And so that's multiple sentiments within the same sentence.

06:37.940 --> 06:40.600
 That's the kind of stuff you could do with Comprehend.

06:40.600 --> 06:45.180
 You could also do things with Comprehend where you can extract entities of interest from

06:45.180 --> 06:46.320
 unstructured text.

06:46.320 --> 06:52.220
 Like let's say you see there's an article on one company acquiring another company.

06:52.220 --> 06:57.960
 You could now just look at that news article and you can extract things like which was

06:57.960 --> 07:02.340
 the company that was acquired, who was the CEO of that company?

07:02.340 --> 07:04.200
 What was the transaction value?

07:04.200 --> 07:06.200
 All of those kinds of things can be extracted.

07:06.200 --> 07:08.560
 So that's kind of what Comprehend does.

07:08.560 --> 07:11.760
 It helps you understand unstructured text, right?

07:11.760 --> 07:15.680
 So these are sort of the language or the cognitive services that we have.

07:15.680 --> 07:18.280
 And that's what we started with at the beginning.

07:18.280 --> 07:22.360
 These are the basic foundational blocks you would need to build anything else.

07:22.360 --> 07:28.840
 And then more recently, we've added domain specific services.

07:28.840 --> 07:35.320
 Like let me take one industrial service, for example, Monitron is an example of it.

07:35.320 --> 07:41.560
 And this is an AWS service that includes a piece of hardware that comes with it.

07:41.560 --> 07:45.700
 The hardware is essentially a temperature and vibration sensor.

07:45.700 --> 07:51.040
 And it's meant for shop floor technicians that want to monitor their equipment on the

07:51.040 --> 07:52.480
 factory floor.

07:52.480 --> 07:54.040
 And they want to do predictive maintenance.

07:54.040 --> 07:58.440
 So they buy this piece of hardware from us and they attach it to some portion of the

07:58.440 --> 08:02.920
 machine that they want to monitor.

08:02.920 --> 08:07.860
 And what we do is we learn the behavior of that part of the machine in terms of vibration

08:07.860 --> 08:12.080
 and temperature, which is what the sensors are in that unit.

08:12.080 --> 08:17.920
 And so over time, we'll be able to tell the person, the user, the customer, if there's

08:17.920 --> 08:20.360
 a deviation in behavior.

08:20.360 --> 08:29.040
 And because vibration is something that it predicts, it'll tell you before things are

08:29.040 --> 08:30.040
 going to fail.

08:30.040 --> 08:32.140
 It has that predictive nature.

08:32.140 --> 08:37.060
 So we're able to actually detect issues way before they actually happen.

08:37.060 --> 08:41.940
 So for example, our fulfillment centers, we have conveyor belts in our fulfillment centers

08:41.940 --> 08:44.520
 to move the products around.

08:44.520 --> 08:47.340
 And so it's very important for those belts to keep running.

08:47.340 --> 08:49.600
 And there's a lot of rotating parts there.

08:49.600 --> 08:56.040
 And we use Monotron there to monitor the health of the whole conveyance system.

08:56.040 --> 09:01.280
 And we've been able to catch failures like two weeks before they actually happened.

09:01.280 --> 09:08.600
 So this essentially allows customers to plan the maintenance rather than react.

09:08.600 --> 09:13.600
 It's going to be chaos if it just happens and they are not prepared for it.

09:13.600 --> 09:17.400
 So that's a very clear.

09:17.400 --> 09:18.880
 It's not cognitive.

09:18.880 --> 09:22.200
 It's something that is specific to the domain.

09:22.200 --> 09:24.760
 And it's a large enough segment there.

09:24.760 --> 09:27.360
 And lots of customers have moving parts.

09:27.360 --> 09:31.620
 And they have equipment that they can't afford to fail.

09:31.620 --> 09:35.440
 And so that's a place where things like Monotron is being used.

09:35.440 --> 09:40.640
 And to come back to your question on the medical transcription thing, that's just an extension

09:40.640 --> 09:42.400
 of the transcription that we have.

09:42.400 --> 09:44.040
 It just applies to the medical domain.

09:44.040 --> 09:49.960
 So I would say that that is a cognitive service because it has to do with speech and it has

09:49.960 --> 09:53.200
 to do with understanding speech.

09:53.200 --> 09:54.520
 So those are the kinds of things we have.

09:54.520 --> 09:57.920
 We have also other kinds of services up there at the top layer of the stack.

09:57.920 --> 10:03.040
 We've got things like Contact Lens for Amazon Connect.

10:03.040 --> 10:07.320
 And what Contact Lens does is it's a higher level abstraction.

10:07.320 --> 10:09.800
 It uses transcribe underneath the scenes.

10:09.800 --> 10:12.280
 It uses comprehend underneath the scenes.

10:12.280 --> 10:15.280
 But it was built for the call center.

10:15.280 --> 10:20.400
 And if you're a call center customer, what you're interested in is you just want to know

10:20.400 --> 10:22.440
 why are customers calling me?

10:22.440 --> 10:24.060
 You want to know that.

10:24.060 --> 10:26.080
 You want to know how every call is going.

10:26.080 --> 10:27.080
 Is it going?

10:27.080 --> 10:30.060
 And by the way, you want to know this real time as it's happening.

10:30.060 --> 10:34.880
 But you may also want to do it post call, which is called post call analytics.

10:34.880 --> 10:36.520
 You want to know how your agents are doing.

10:36.520 --> 10:37.520
 How are they responding?

10:37.520 --> 10:39.040
 Are they actually helping the customer?

10:39.040 --> 10:42.220
 Are they saying the right things at the right time?

10:42.220 --> 10:47.200
 So you could do all of those things and that's what Contact Lens does.

10:47.200 --> 10:52.560
 It actually implements the actual, it takes the business problem and just implements it

10:52.560 --> 10:55.540
 using a combination of these foundational services that I talked about.

10:55.540 --> 10:59.760
 So we've also got some of those at the top layer of the stack.

10:59.760 --> 11:08.000
 And then I've got one more thing and it's called Amazon Kendra and that's about search.

11:08.000 --> 11:14.680
 It's about enterprise search where you've got, if you're an enterprise, you've got a

11:14.680 --> 11:21.080
 lot of documents within your enterprise and these documents are typically siloed.

11:21.080 --> 11:24.920
 They're not like the documents on the web where everything's linked to each other and

11:24.920 --> 11:29.240
 you know, you can figure out what people are clicking on and keep track of which documents

11:29.240 --> 11:31.120
 are more interesting.

11:31.120 --> 11:32.380
 Instead here, they're all siloed.

11:32.380 --> 11:36.600
 They're sitting in different systems, like they're sitting in SharePoint maybe, or they're

11:36.600 --> 11:44.480
 sitting on your Wiki pages or they're sitting inside Salesforce.

11:44.480 --> 11:51.120
 And so it's a much harder problem for employees to find things that they actually want to

11:51.120 --> 11:54.120
 find within an enterprise.

11:54.120 --> 12:00.240
 If you've ever tried the search systems that are at enterprises, they are pretty horrible.

12:00.240 --> 12:06.480
 And the one that we used to have inside Amazon wasn't very good either before Kendra.

12:06.480 --> 12:10.660
 This is a space that I know fairly well, having worked at a startup that tried to solve this

12:10.660 --> 12:15.640
 problem 20 something years ago.

12:15.640 --> 12:19.360
 But it's like you're giving the pitch that we used to give back then.

12:19.360 --> 12:23.520
 It's one of these problems that just, you know, hasn't been solved and probably won't

12:23.520 --> 12:28.040
 ever be solved in the enterprise because it's such a difficult problem.

12:28.040 --> 12:29.040
 Absolutely.

12:29.040 --> 12:32.280
 It's a difficult problem, but I think the technology is there where we were able to

12:32.280 --> 12:33.680
 solve it in a very good way.

12:33.680 --> 12:36.800
 And I'll tell you the kinds of things you can do with Kendra.

12:36.800 --> 12:40.880
 So Kendra is again, another higher level abstraction where it just focuses on the business problem,

12:40.880 --> 12:42.080
 which is search, right?

12:42.080 --> 12:46.040
 You need to be able to help people find what they're looking for and documents are sitting

12:46.040 --> 12:49.860
 in different places so you can't use all the usual techniques.

12:49.860 --> 12:54.400
 So what Kendra does, number one is it allows you to suck in all of the data from all of

12:54.400 --> 12:55.400
 these systems.

12:55.400 --> 12:57.320
 There's connectors, managed connectors.

12:57.320 --> 13:00.540
 All you have to do is to provide credentials and it's going to suck in all of the data

13:00.540 --> 13:05.280
 and also keep the access rights along with it so that you're not going to show up.

13:05.280 --> 13:08.840
 They're not going to show up in search results for people that are not authorized to see

13:08.840 --> 13:10.520
 certain kinds of documents.

13:10.520 --> 13:15.240
 So it keeps, it not only sucks the data from these different systems, but it also keeps

13:15.240 --> 13:18.640
 all the permissions intact so that it knows what to show and what not to show.

13:18.640 --> 13:24.640
 The second thing Kendra does is it understands all of the documents like a human would after

13:24.640 --> 13:25.640
 reading it.

13:25.640 --> 13:30.240
 So now anyone can ask a question and I'm not talking about keyword search.

13:30.240 --> 13:32.040
 I'm talking about semantic search here.

13:32.040 --> 13:38.040
 So I could actually say, where is the IT help desk at this Amazon building, right?

13:38.040 --> 13:43.200
 I can just ask that question and the answer is not going to be like a hundred links where

13:43.200 --> 13:48.160
 I need to click on every single document and then hope I find this information in there.

13:48.160 --> 13:51.880
 Kendra is actually going to tell me it's the fourth floor, right up there.

13:51.880 --> 13:55.560
 And of course it's going to have all the links as well, the documents below, like you're

13:55.560 --> 14:00.160
 used to in a traditional search, but you don't have to go digging for the answer.

14:00.160 --> 14:03.300
 If it's confident, it'll show you the answer right up there.

14:03.300 --> 14:08.680
 And also in terms of relevance and the documents being the right documents, given we can't

14:08.680 --> 14:13.240
 use a lot of signals that are available on the web, we use a lot of clever techniques

14:13.240 --> 14:14.240
 there.

14:14.240 --> 14:20.700
 It's pre-trained on various domains, so it's going to perform really well out of the box.

14:20.700 --> 14:26.120
 So there's a lot of our customers that love the ease of setting this up.

14:26.120 --> 14:29.760
 We've also made it very easy to set up.

14:29.760 --> 14:33.720
 You can ingest all of your documents with these connectors and immediately you've got

14:33.720 --> 14:38.440
 a search application that you can just go in and try it out.

14:38.440 --> 14:43.120
 And then of course you can embed that into your own websites and things like that.

14:43.120 --> 14:46.160
 And underneath the scenes, if you're interested in Kendra, underneath the scenes, there's

14:46.160 --> 14:48.360
 a whole bunch of NLP models.

14:48.360 --> 14:50.400
 That's what makes it happen.

14:50.400 --> 14:52.680
 You said it was a hard problem and that's rightfully so.

14:52.680 --> 14:57.000
 Yeah, we were using Verity and I think we started looking at Autonomy.

14:57.000 --> 15:02.600
 These are all text search engines and the problem that you described of a user getting

15:02.600 --> 15:08.680
 back tons of links that match, but relevance was the difficult problem.

15:08.680 --> 15:12.680
 And we were nowhere near at that time summarization and some of the things that you described.

15:12.680 --> 15:13.680
 Absolutely.

15:13.680 --> 15:16.920
 And underneath the scenes, there's a whole bunch of models.

15:16.920 --> 15:24.600
 There's a document ranking model, there's an FAQ model, there's a question answering

15:24.600 --> 15:25.600
 model.

15:25.600 --> 15:31.100
 And all of these models sort of work together and all of the complexities, the user doesn't

15:31.100 --> 15:33.960
 have to deal with all of that complexity and putting all of this together.

15:33.960 --> 15:37.000
 We make sure that these things work seamlessly together.

15:37.000 --> 15:42.640
 And of course Kendra has continuous learning, it gets better as more people use it.

15:42.640 --> 15:46.640
 There's explicit feedback, there's a thumbs up, thumbs down on the search results.

15:46.640 --> 15:49.320
 If somebody does click it, we'll keep track of it.

15:49.320 --> 15:55.000
 It gets better for the enterprise or implicitly we can track, okay, they are clicking on this

15:55.000 --> 15:57.280
 document from the results.

15:57.280 --> 16:00.680
 So maybe it wasn't the first one, it was the third one.

16:00.680 --> 16:05.240
 And so those kinds of things make sure that it gets better over time, which is another

16:05.240 --> 16:06.240
 thing.

16:06.240 --> 16:07.680
 It's continuous learning.

16:07.680 --> 16:12.640
 So that's another thing that's made it possible for customers to find information that they

16:12.640 --> 16:15.720
 actually want to find it, making their employees more productive.

16:15.720 --> 16:21.940
 So that's sort of the top layer of the stack is essentially a whole bunch of AI services.

16:21.940 --> 16:25.600
 There's some foundational ones, like I said, and then there's some that are specific to

16:25.600 --> 16:32.640
 domains like healthcare and industrial manufacturing domains.

16:32.640 --> 16:37.840
 And then there's a lot of applications sort of things, things that solve business problems

16:37.840 --> 16:38.840
 directly.

16:38.840 --> 16:39.840
 Mm-hmm.

16:39.840 --> 16:40.840
 Mm-hmm.

16:40.840 --> 16:42.880
 So you've described this pretty broad set of services.

16:42.880 --> 16:43.880
 Yeah.

16:43.880 --> 16:47.680
 We want to jump into talking about Code Whisperer.

16:47.680 --> 16:52.160
 Code Whisperer is not the first AWS service that's dealing with code, right?

16:52.160 --> 16:54.920
 There was CodeGuru and possibly others.

16:54.920 --> 16:56.260
 Yes.

16:56.260 --> 17:02.240
 Talk a little bit about what AWS has been doing with code and kind of how Code Whisperer

17:02.240 --> 17:03.240
 came about.

17:03.240 --> 17:04.240
 Mm-hmm.

17:04.240 --> 17:05.240
 Mm-hmm.

17:05.240 --> 17:06.240
 Yeah.

17:06.240 --> 17:16.160
 So we've always known that AI ML is going to help a whole variety of different areas.

17:16.160 --> 17:20.680
 It's going to find its way into many different areas, and it's going to make things easier

17:20.680 --> 17:22.440
 in those areas.

17:22.440 --> 17:28.560
 I remember I think Werner Vogels, who's our CTO, he wrote a blog article on how AI ML

17:28.560 --> 17:36.120
 has the potential to completely change the way developers go about their everyday work

17:36.120 --> 17:38.680
 that they do.

17:38.680 --> 17:45.600
 So the journey actually started in 2019, and I think I should start with what does a developer's

17:45.600 --> 17:46.880
 workflow look like?

17:46.880 --> 17:50.840
 That's a great place to start, and then I can sort of tell you how we went about tackling

17:50.840 --> 17:53.160
 all of those different pieces.

17:53.160 --> 17:58.440
 So what a developer first does, of course, is he writes code.

17:58.440 --> 17:59.680
 That's the first sort of step.

17:59.680 --> 18:07.240
 He writes code, and then the next thing that they do is get the code reviewed by peers,

18:07.240 --> 18:13.080
 and some people may even use some automated systems to kind of scan the code and help

18:13.080 --> 18:14.460
 find things.

18:14.460 --> 18:16.520
 So there's that piece.

18:16.520 --> 18:21.440
 You get it reviewed, and once you've reviewed the code, you deploy it.

18:21.440 --> 18:26.200
 You deploy the whole thing, and then you monitor it as the application is serving the customers

18:26.200 --> 18:28.880
 that it's meant to serve.

18:28.880 --> 18:34.560
 And at that time, you're monitoring your applications for cost and performance, and then you'll

18:34.560 --> 18:36.640
 maybe find opportunities to make those better.

18:36.640 --> 18:43.240
 So those are sort of key pieces of a developer's workflow.

18:43.240 --> 18:45.340
 We started in 2019.

18:45.340 --> 18:52.440
 We launched our very first service that is related to developers and writing code, and

18:52.440 --> 18:58.320
 the one we decided to launch at that time, it was CodeGuru in 2019.

18:58.320 --> 19:04.440
 And what CodeGuru does is it helps you find bugs in your code, and it helps you find lines

19:04.440 --> 19:08.880
 of code that are very expensive, expensive in terms of the amount of compute it would

19:08.880 --> 19:09.880
 need.

19:09.880 --> 19:13.080
 So that's the kind of stuff that CodeGuru helped.

19:13.080 --> 19:20.400
 And so you could think of CodeGuru then as taking care of the quality of the code, the

19:20.400 --> 19:25.320
 reviewing part, it helps in that part of the workflow.

19:25.320 --> 19:26.320
 And then...

19:26.320 --> 19:29.440
 And is it considered an ML service or an AI service?

19:29.440 --> 19:31.520
 Yeah, it is considered an AI service.

19:31.520 --> 19:32.720
 So we do have...

19:32.720 --> 19:37.240
 So in the AI service groups at the top layer of the stack, we also have a developer-focused

19:37.240 --> 19:38.240
 set of services.

19:38.240 --> 19:42.160
 CodeGuru was the first one, which we launched in 2019.

19:42.160 --> 19:46.720
 The second one we launched was a year later, and that's DevOpsGuru.

19:46.720 --> 19:51.360
 And this is to tackle the monitoring the application once you've deployed it and you're monitoring

19:51.360 --> 19:56.040
 it and then you're trying to find places to optimize it, right?

19:56.040 --> 20:00.080
 And so that's what DevOpsGuru does, and we launched that in 2020.

20:00.080 --> 20:05.660
 And finally, we've now tackled the writing code part, which is what CodeWhisperer is

20:05.660 --> 20:07.800
 all about.

20:07.800 --> 20:10.400
 And let me set up the problem a little bit more.

20:10.400 --> 20:13.840
 I mean, writing code is the majority of what a developer would do.

20:13.840 --> 20:17.600
 And I'm still...

20:17.600 --> 20:21.600
 I've always been a very passionate developer and I still write code.

20:21.600 --> 20:25.680
 Not as much as I like to, but I still write a lot of code.

20:25.680 --> 20:32.080
 And so the best way to set up this problem is to talk through my own experience here.

20:32.080 --> 20:38.640
 So what I tend to do with the limited amount of time that I can get these days, I may pick

20:38.640 --> 20:44.240
 a pet project either that I want to automate, and I'm doing it mainly to learn because I

20:44.240 --> 20:46.880
 know that there's new frameworks all the time.

20:46.880 --> 20:49.000
 And so when I hear about something, I want to...

20:49.000 --> 20:50.000
 So many new frameworks.

20:50.000 --> 20:51.000
 That's right.

20:51.000 --> 20:52.000
 That's right.

20:52.000 --> 20:53.000
 That's right.

20:53.000 --> 20:54.000
 So I just want to learn.

20:54.000 --> 20:56.760
 I want to be in touch with the technology because then I can interact better with my

20:56.760 --> 21:01.160
 people because that's what they do all day long.

21:01.160 --> 21:07.880
 So what I tried to do, this was maybe a year and a half or a year and a half ago.

21:07.880 --> 21:13.240
 I was hearing a lot about React as a framework for front end development.

21:13.240 --> 21:20.840
 And the last time I've done any front end programming was back in the 2011, 2012 timeframe

21:20.840 --> 21:24.640
 when there was this...

21:24.640 --> 21:27.560
 Microsoft had this Windows Presentation Foundation.

21:27.560 --> 21:33.280
 There was this concept of XAML, which would separate design from actual implementation.

21:33.280 --> 21:36.880
 The design of how the user interface would look like from the actual implementation of

21:36.880 --> 21:41.840
 what would happen when you actually trigger those buttons and those dropdowns.

21:41.840 --> 21:45.040
 And so that was the last time I'd done any kind of front end programming.

21:45.040 --> 21:47.200
 But then I heard so much about React.

21:47.200 --> 21:48.200
 Everybody talk about it.

21:48.200 --> 21:49.760
 So I said, okay, I need to learn this too.

21:49.760 --> 21:52.200
 I need to see what it is.

21:52.200 --> 21:54.600
 So I picked a project that I wanted to just implement.

21:54.600 --> 21:58.140
 I thought it was going to just be a weekend project.

21:58.140 --> 22:01.800
 And so I learned about React.

22:01.800 --> 22:09.320
 I knew JavaScript, I've not done a lot of JavaScript or TypeScript, but it was close

22:09.320 --> 22:10.320
 enough.

22:10.320 --> 22:15.920
 And so the first issue was, of course, programming language and the syntax and how things are.

22:15.920 --> 22:16.920
 They're all different.

22:16.920 --> 22:21.440
 There are so many programming languages these days and new ones coming up all the time.

22:21.440 --> 22:27.640
 And each one has its own area where it shines and other areas where it's not so great.

22:27.640 --> 22:30.880
 So that's the first place there's a difference.

22:30.880 --> 22:33.520
 It's a different language that's used there.

22:33.520 --> 22:39.240
 But then the framework itself, the concepts behind React and how do you use it for doing

22:39.240 --> 22:41.000
 front end, that was another thing.

22:41.000 --> 22:44.120
 But it wasn't enough for me to just learn about React.

22:44.120 --> 22:48.840
 Once I finished learning about React, I needed to learn about React Router, which is the

22:48.840 --> 22:52.960
 thing that would route incoming calls.

22:52.960 --> 22:53.960
 But that wasn't enough.

22:53.960 --> 22:58.680
 I needed to learn about React Redux.

22:58.680 --> 23:01.680
 And even that wasn't enough because I like to test my code.

23:01.680 --> 23:04.400
 I like to I shouldn't even say test.

23:04.400 --> 23:08.200
 I'd like to specify the behavior of the code first and then actually go and implement the

23:08.200 --> 23:09.200
 code.

23:09.200 --> 23:10.780
 So I needed to have some testing frameworks.

23:10.780 --> 23:13.760
 So Jest, I needed to learn about Jest.

23:13.760 --> 23:17.240
 And that was also not enough because there's another testing framework for React called

23:17.240 --> 23:20.040
 Enzyme, which is very popular.

23:20.040 --> 23:22.520
 So there were all these different frameworks.

23:22.520 --> 23:28.360
 And by the time I'd just spent a whole bunch of weekends learning a lot of these things.

23:28.360 --> 23:30.120
 And I still haven't written anything meaningful.

23:30.120 --> 23:35.560
 I've not made any progress on what I wanted to build.

23:35.560 --> 23:41.160
 And so that's a big problem that there's just so many different things a developer needs

23:41.160 --> 23:42.240
 to know.

23:42.240 --> 23:48.840
 And now if you take this to the cloud world, with AWS, we have 250 plus services I think

23:48.840 --> 23:50.800
 today on AWS.

23:50.800 --> 23:54.600
 That's about 10,000 plus APIs.

23:54.600 --> 23:57.840
 And by the time we finish this conversation, there'll be a few more.

23:57.840 --> 23:59.280
 All right.

23:59.280 --> 24:03.480
 So what does a developer, how does he do this?

24:03.480 --> 24:06.000
 And typically what people do is they go to Stack Overflow.

24:06.000 --> 24:07.000
 Google and Stack Overflow.

24:07.000 --> 24:08.000
 Yeah.

24:08.000 --> 24:09.000
 Okay.

24:09.000 --> 24:10.000
 You're saying the same thing.

24:10.000 --> 24:11.000
 Right.

24:11.000 --> 24:13.120
 And then you're going to look for snippets of code that you can copy paste.

24:13.120 --> 24:15.860
 So that's the life of a developer.

24:15.860 --> 24:19.120
 And it's gotten harder.

24:19.120 --> 24:22.520
 And so that's kind of where Code Whisperer comes in.

24:22.520 --> 24:31.120
 And what Code Whisperer is is it's an ML powered coding companion, pair programming companion,

24:31.120 --> 24:36.920
 if you will, that just helps developers be more productive.

24:36.920 --> 24:43.160
 And it doesn't matter where you are in your journey as a developer.

24:43.160 --> 24:47.760
 What Code Whisperer helps you accomplish, it helps you magnify your impact no matter where

24:47.760 --> 24:48.760
 you are in the journey.

24:48.760 --> 24:49.760
 Sure.

24:49.760 --> 24:50.760
 Right.

24:50.760 --> 24:52.520
 So that's the core.

24:52.520 --> 24:55.640
 That's the core reason why we built it.

24:55.640 --> 24:56.640
 Yeah.

24:56.640 --> 25:03.120
 I've got to ask, my suspicion is that most folks listening to this podcast, if not all,

25:03.120 --> 25:11.680
 have heard of Copilot, which is a kind of collaboration between OpenAI and GitHub, which

25:11.680 --> 25:18.360
 preceded Code Whisperer by sometimes six months, maybe.

25:18.360 --> 25:24.100
 Did they scoop you or... No, I mean, you actually helped me set this

25:24.100 --> 25:27.200
 up really nicely with your previous question, right?

25:27.200 --> 25:30.480
 I talked to you about the journey we were on, developer tools.

25:30.480 --> 25:33.440
 We started in 2019 with Code Guru, right?

25:33.440 --> 25:36.800
 So for me, this is a continuation of that whole journey.

25:36.800 --> 25:42.840
 So you can argue who came first with that story in place, right?

25:42.840 --> 25:47.920
 But let me tell you about things that we're doing differently with Code Whisperer.

25:47.920 --> 25:52.060
 We did a few things very differently with Code Whisperer.

25:52.060 --> 25:58.840
 The first thing we did differently, if you look at the other tools that are out there

25:58.840 --> 26:06.200
 that do things that are similar, often you'll see headlines like a lot of the code, about

26:06.200 --> 26:12.000
 40% of the code that's generated has security problems, security issues.

26:12.000 --> 26:14.480
 Security and licensing are the things that come up quite a bit.

26:14.480 --> 26:15.480
 Right.

26:15.480 --> 26:17.440
 So I'm going to tackle security first, but then I'll come to licensing.

26:17.440 --> 26:21.420
 So you're hitting all the sweet spots right now.

26:21.420 --> 26:23.240
 So yeah, so it's on security.

26:23.240 --> 26:31.720
 So what we do is as part of Code Whisperer, which by the way, it's part of the AWS toolkit

26:31.720 --> 26:34.640
 and the toolkit is a plugin to all the major IDs.

26:34.640 --> 26:37.680
 So it plugs into Visual Studio Code.

26:37.680 --> 26:40.000
 It also plugs into all the JetBrains IDs.

26:40.000 --> 26:47.280
 So it's, I think PyCharm for Python and IntelliJ for Java and WebStorm.

26:47.280 --> 26:50.920
 And primarily to do completion for APIs and that kind of thing.

26:50.920 --> 26:51.920
 Yes.

26:51.920 --> 26:52.920
 And it's this-

26:52.920 --> 26:53.920
 Or initially, if not-

26:53.920 --> 26:54.920
 Yeah.

26:54.920 --> 26:59.320
 We're not talking about completion like the way IntelliSense used to be.

26:59.320 --> 27:02.420
 We're talking about 20 lines of code and 25 lines of code.

27:02.420 --> 27:05.800
 So when we get to the demo at the end, you'll see-

27:05.800 --> 27:11.080
 Yeah, I was speaking more generally about the IDE toolkit.

27:11.080 --> 27:13.880
 That preceded Code Whisperer, correct?

27:13.880 --> 27:14.880
 Or is that-

27:14.880 --> 27:17.400
 Oh, the AWS toolkit has been there for a long time.

27:17.400 --> 27:18.400
 Yeah.

27:18.400 --> 27:19.400
 Right.

27:19.400 --> 27:24.120
 And that was primarily created to make those IDs aware of the AWS API ecosystem.

27:24.120 --> 27:25.120
 Exactly.

27:25.120 --> 27:26.120
 Exactly.

27:26.120 --> 27:27.120
 For completion and things like that.

27:27.120 --> 27:28.120
 Exactly.

27:28.120 --> 27:29.120
 Okay.

27:29.120 --> 27:30.120
 Now-

27:30.120 --> 27:31.120
 This is like completion at another level.

27:31.120 --> 27:32.120
 That's right.

27:32.120 --> 27:33.120
 Which you will show us.

27:33.120 --> 27:34.120
 Absolutely.

27:34.120 --> 27:35.120
 Absolutely.

27:35.120 --> 27:39.960
 And what people just need to do is just download the AWS toolkit and they have it as part of

27:39.960 --> 27:40.960
 these IDs.

27:40.960 --> 27:44.920
 We also integrated Code Whisperer into our Lambda console.

27:44.920 --> 27:48.360
 So Lambda is our serverless service.

27:48.360 --> 27:52.560
 So it's where you just type in code and there's no servers to manage.

27:52.560 --> 27:55.920
 Your code just runs and gives you the results, right?

27:55.920 --> 27:58.680
 And so there's a lot of code that's being written on the Lambda console.

27:58.680 --> 28:00.420
 So it's plugged in there.

28:00.420 --> 28:01.420
 It's also-

28:01.420 --> 28:02.420
 Is it built into Cloud9 yet?

28:02.420 --> 28:03.420
 Yes, it is.

28:03.420 --> 28:04.420
 Oh, okay.

28:04.420 --> 28:05.800
 It's built into Cloud9 as well.

28:05.800 --> 28:08.200
 That's our web-based ID.

28:08.200 --> 28:12.760
 So we were on a topic and I digressed and went into this one.

28:12.760 --> 28:13.760
 Yeah.

28:13.760 --> 28:14.760
 The differentiators, right?

28:14.760 --> 28:18.920
 So the first one is the security thing.

28:18.920 --> 28:22.200
 For us at AWS, security is like job zero.

28:22.200 --> 28:26.560
 I'm sure you've heard a lot about how seriously we take security.

28:26.560 --> 28:30.960
 And we think we need to help because security is a very specialized skill.

28:30.960 --> 28:39.600
 Most companies have a separate group of experts that are just there for this topic in general.

28:39.600 --> 28:43.800
 And so we have what's called a security scan that's built into Code Whisperer.

28:43.800 --> 28:53.320
 So you could write code and then you could accept a lot of the Code Whisperer suggestions

28:53.320 --> 28:54.880
 and you could also edit it further.

28:54.880 --> 28:58.740
 But at the very end, we've got the security scan thing that you can hit and it's going

28:58.740 --> 29:02.840
 to tell you if there are any security issues in the code that it scanned.

29:02.840 --> 29:06.080
 So that's the first thing that we've done differently.

29:06.080 --> 29:11.440
 We want to make sure that the code we generated, the code that ends up coming out at the other

29:11.440 --> 29:18.880
 end, we want to help in as many ways as we can to make sure that it doesn't have any

29:18.880 --> 29:20.100
 security issues.

29:20.100 --> 29:25.960
 And presumably that security scan is also an ML model that's trained to recognize potential

29:25.960 --> 29:26.960
 security issues?

29:26.960 --> 29:27.960
 Absolutely.

29:27.960 --> 29:28.960
 Yeah.

29:28.960 --> 29:29.960
 Yeah.

29:29.960 --> 29:32.800
 CodeGuru had this capability when we launched it in 2019.

29:32.800 --> 29:36.400
 And so we're using a lot of that here as well.

29:36.400 --> 29:39.520
 So that's the first area where it's different.

29:39.520 --> 29:45.960
 And the second area where it's different is in terms of the code it generates.

29:45.960 --> 29:54.040
 I'm sure you've heard of like AI systems with games like chess and Go, they come up with

29:54.040 --> 29:57.920
 new moves that they've never seen before or new strategies they've never seen before.

29:57.920 --> 30:02.560
 And to a large extent, that's what happens when CodeWhisperer is generating code.

30:02.560 --> 30:04.520
 It's generating code it's not seen before.

30:04.520 --> 30:10.580
 But there may be instances where the code that it generates is close enough to something

30:10.580 --> 30:11.760
 that it's seen before.

30:11.760 --> 30:15.040
 And CodeWhisperer, of course, is trained on billions of lines, more than billions of lines

30:15.040 --> 30:21.600
 of code from public repositories, from Amazon repositories, code repositories, from documentation

30:21.600 --> 30:23.700
 and forums, public forums.

30:23.700 --> 30:25.560
 And it's trained on a lot of stuff.

30:25.560 --> 30:30.080
 So it may have seen something similar before.

30:30.080 --> 30:35.280
 And then what CodeWhisperer will do is it provides what we call a reference tracker,

30:35.280 --> 30:42.120
 where it lists the license under which that other similar piece of code was provided.

30:42.120 --> 30:48.800
 So this way, developers know that the code that is there could potentially have that

30:48.800 --> 30:52.200
 license so they can decide whether they want to include that piece of code or they want

30:52.200 --> 30:58.040
 to accept that suggestion or they don't want to, it depends on what the company rules are

30:58.040 --> 31:00.740
 and it depends on things like that.

31:00.740 --> 31:03.040
 So that's the second thing that we're doing differently.

31:03.040 --> 31:12.720
 And the third thing that we're doing differently is we talked about the number of AWS services.

31:12.720 --> 31:16.400
 And so first class support for AWS APIs.

31:16.400 --> 31:21.200
 We know what the most common patterns are in terms of application developers and how

31:21.200 --> 31:23.040
 they use the cloud.

31:23.040 --> 31:30.600
 And now without having to learn about the 10,000 plus APIs, without having to worry

31:30.600 --> 31:35.520
 about any of that, your intent, you just express your intent, as you will see later, you express

31:35.520 --> 31:42.760
 your intent either in the form of a good name for the function or in the form of a comment.

31:42.760 --> 31:48.040
 And we're just going to give you the best pieces of code that would make the most sense

31:48.040 --> 31:49.840
 in that point.

31:49.840 --> 31:54.080
 So those are some of the differences.

31:54.080 --> 32:00.880
 We do some aggressive filtering on potential harmful stuff.

32:00.880 --> 32:06.080
 And so we've taken a lot of effort to minimize any issues there as well.

32:06.080 --> 32:12.200
 So these are all the differences for Code Whisperer at this point in time.

32:12.200 --> 32:18.920
 You talked about the sources of code that Code Whisperer was trained on.

32:18.920 --> 32:20.600
 You spoke about them broadly.

32:20.600 --> 32:24.940
 Is GitHub included in that set of repositories?

32:24.940 --> 32:30.800
 Anything that's public and has the right license, that's what we use.

32:30.800 --> 32:36.040
 Are there specific licenses or types of licenses that you filtered on?

32:36.040 --> 32:41.640
 Definitely the pieces of code that are public and are available for consumption.

32:41.640 --> 32:46.440
 Those are part of the training corpus as well as all of the Amazon code internally that

32:46.440 --> 32:48.640
 we've had from over many years.

32:48.640 --> 32:51.480
 That's part of it as well.

32:51.480 --> 32:58.560
 And anything that's public, like documentation that's public, those are all pieces of code

32:58.560 --> 33:00.080
 that goes into the training.

33:00.080 --> 33:09.280
 I'm imagining that if you're scouring the web, crawling the web, looking for code, that

33:09.280 --> 33:15.820
 even the identifying code, identifying the licenses associated with that code presents

33:15.820 --> 33:17.680
 interesting machine learning problems.

33:17.680 --> 33:19.760
 Absolutely.

33:19.760 --> 33:22.680
 There's a lot of classification problems right there.

33:22.680 --> 33:27.840
 A whole class of classification problems just on figuring out which are the ones that you

33:27.840 --> 33:30.240
 want to use and which are the ones you don't want to use.

33:30.240 --> 33:34.520
 Of course, we've used every technique that we already have.

33:34.520 --> 33:38.840
 I've talked about many of our AI services at the top layer of the stack.

33:38.840 --> 33:43.360
 Comprehend, for example, has a document classification API.

33:43.360 --> 33:47.480
 Essentially what you do there is that you decide what you want to call your category

33:47.480 --> 33:52.100
 and you give it examples of a certain document that belong to that category, some number

33:52.100 --> 33:56.640
 of documents that belong to that category, define a category two, another set of documents

33:56.640 --> 33:59.800
 that belong to that category, and then you could define a third category called other

33:59.800 --> 34:04.440
 where you give it a whole bunch of documents that have no particular category.

34:04.440 --> 34:09.760
 And then Comprehend will train a custom model for you and you don't have to be an ML expert

34:09.760 --> 34:10.760
 for it.

34:10.760 --> 34:12.240
 It's just all accessible through the APIs.

34:12.240 --> 34:17.480
 And then you have now an endpoint where you can send it new documents and it's going to

34:17.480 --> 34:21.640
 tell you, is it class one or class two or class three?

34:21.640 --> 34:27.000
 So we have a lot of these techniques already in place and we've used that a lot for these

34:27.000 --> 34:28.000
 kinds of things.

34:28.000 --> 34:29.000
 Okay.

34:29.000 --> 34:30.000
 Okay.

34:30.000 --> 34:37.920
 Presumably this is based on a large language model like other implementations of code generation

34:37.920 --> 34:46.520
 and the textual context of LLMs, one of the big conversations is around bias and kind

34:46.520 --> 34:48.720
 of responsible use of those.

34:48.720 --> 34:52.680
 Do those same kinds of issues surface when we're talking about code?

34:52.680 --> 34:53.680
 And if so, how?

34:53.680 --> 34:54.680
 Yeah.

34:54.680 --> 35:01.280
 So if you look at a lot of the transformer models, they're built on top of each other.

35:01.280 --> 35:03.960
 So there's various checkpoints.

35:03.960 --> 35:08.120
 Presumably you would have a large language model that's trained on just text.

35:08.120 --> 35:10.960
 And then that would be a checkpoint.

35:10.960 --> 35:13.940
 And then you would take that and then now train it on code, right?

35:13.940 --> 35:20.840
 So if there's issues with that core base model, they're probably going to linger on.

35:20.840 --> 35:31.720
 And so if you go to amazon.science, it's one of the websites, and you'll see that we published

35:31.720 --> 35:37.560
 just in the last year alone, we published about 400 papers on responsible AI that deals

35:37.560 --> 35:44.080
 with all of these topics, which we take very seriously, things like bias and fairness.

35:44.080 --> 35:50.880
 In my team, we've got the person that wrote the book on algorithmic bias.

35:50.880 --> 35:56.680
 He's a professor at UPenn, his name is Michael Kearns, you'll meet him later today.

35:56.680 --> 36:03.760
 And so we've got all of those experts helping us avoid the pitfalls as much as possible.

36:03.760 --> 36:08.160
 Now, this is, of course, an emerging, it's a thing that's still progressing.

36:08.160 --> 36:14.240
 It's not like we know exactly what we need to do here, but we've got the best minds looking

36:14.240 --> 36:19.600
 at these topics and helping us figure out how best to deal with those situations.

36:19.600 --> 36:25.360
 I didn't mention some very aggressive filtering that we're doing to prevent those kinds of

36:25.360 --> 36:31.720
 things, those kinds of things were implemented with the guidance of folks like Michael.

36:31.720 --> 36:42.200
 Imagining the kind of classic profanity and comments is one example, but are there other...

36:42.200 --> 36:48.360
 I was kind of trying to get some examples of the way bias types of issues might surface

36:48.360 --> 36:51.160
 in a code-specific context.

36:51.160 --> 36:53.760
 Are there examples that come to mind of that?

36:53.760 --> 36:57.680
 Yeah, generally, if you're, let's say you're writing a function that takes an agenda and

36:57.680 --> 37:02.120
 makes a decision based on the gender, there could be areas where bias can creep in.

37:02.120 --> 37:06.360
 And so you've got to explicitly look for situations like that and make sure you don't generate

37:06.360 --> 37:08.800
 codes along those paths.

37:08.800 --> 37:09.900
 That's one.

37:09.900 --> 37:12.720
 Another one is, of course, keys, right?

37:12.720 --> 37:15.760
 So we're talking about APIs in the cloud.

37:15.760 --> 37:23.340
 A common thing that I see happen a lot is just keys, where your secret keys and developers

37:23.340 --> 37:28.840
 tend to sometimes just put it into the source file, including the ones checked into GitHub.

37:28.840 --> 37:30.800
 There's a lot of your keys are in there.

37:30.800 --> 37:31.800
 Unfortunately, that does happen, yeah.

37:31.800 --> 37:32.800
 Right.

37:32.800 --> 37:38.680
 And now if you're learning from all of that, and let's say you do want to generate that

37:38.680 --> 37:43.840
 line, you could leak a potential key.

37:43.840 --> 37:47.640
 And so we've taken a lot of care to prevent those kinds of situations.

37:47.640 --> 37:51.080
 And I'll probably be able to show you that as well when we actually get to the demo in

37:51.080 --> 37:52.080
 the end.

37:52.080 --> 37:54.000
 Awesome, awesome.

37:54.000 --> 37:56.960
 Well this may be a great segue to the demo.

37:56.960 --> 38:01.800
 Before we do that, any additional thoughts you want to share before we jump into the

38:01.800 --> 38:02.800
 demo?

38:02.800 --> 38:10.080
 No, I just think that I told you that I'm a very passionate developer, and I still am.

38:10.080 --> 38:16.800
 I really think that this is just the beginning of what we're going to be able to do.

38:16.800 --> 38:19.560
 And this is going to make developers' lives a lot more easier.

38:19.560 --> 38:25.080
 I think they can focus, most developers that I know, they want to focus on the higher value

38:25.080 --> 38:26.080
 problem.

38:26.080 --> 38:31.760
 They are less interested in the boilerplate things that a framework may dictate.

38:31.760 --> 38:34.560
 And that's the bad part of writing code.

38:34.560 --> 38:39.060
 It's the real cool part is the business logic.

38:39.060 --> 38:42.320
 That's the cool part that you want to actually write.

38:42.320 --> 38:46.360
 And so I think this is going to be in a space to watch going forward.

38:46.360 --> 38:52.080
 There's going to be a lot of innovation coming on this topic, and I'm very excited for what's

38:52.080 --> 38:53.880
 to come in this area.

38:53.880 --> 39:00.880
 Just to probe into that a little bit, do you have a gut feel for where you think the innovation

39:00.880 --> 39:06.040
 will come first, or what the path looks like?

39:06.040 --> 39:08.280
 We've got some ideas on where the path looks like.

39:08.280 --> 39:13.980
 I'm sure you know that 90% of what we do, it is driven by our customers.

39:13.980 --> 39:16.040
 It's what they're asking us for.

39:16.040 --> 39:23.080
 And about 10% of the time, we think on their behalf and we do something based on that.

39:23.080 --> 39:29.800
 The obvious next steps will just be support for the more popular languages.

39:29.800 --> 39:36.640
 I think we currently support TypeScript, JavaScript, Java, Python is what we support.

39:36.640 --> 39:40.740
 So obviously there's going to be an element of supporting some of the key languages.

39:40.740 --> 39:45.320
 That's definitely going to be one that's going to be there.

39:45.320 --> 39:51.000
 But I think it's just going to get better and better in terms of the actual code that's

39:51.000 --> 39:52.000
 generated.

39:52.000 --> 39:57.480
 Today, developers can accept, there's going to be options.

39:57.480 --> 40:05.860
 So when Code Whisperer generates code, it gives you X number of options.

40:05.860 --> 40:10.400
 You can actually scroll through it and see which ones sort of fit your style and what

40:10.400 --> 40:12.800
 you want to include.

40:12.800 --> 40:14.520
 Those suggestions will get better over time.

40:14.520 --> 40:19.560
 And I think it'll just make people's lives a lot easier.

40:19.560 --> 40:24.120
 And best practices, we can capture best practices.

40:24.120 --> 40:30.600
 I mentioned already, we kind of know the patterns of how AWS APIs are accessed for application

40:30.600 --> 40:32.640
 development.

40:32.640 --> 40:38.600
 And there's best practices in terms of how you put them together, how you do error checking

40:38.600 --> 40:39.600
 and things like that.

40:39.600 --> 40:44.120
 And so those things can come more and more out of the box.

40:44.120 --> 40:51.400
 This will make it easier for even developers that are earlier in their journey to generate

40:51.400 --> 40:53.720
 pieces of code that are pretty robust.

40:53.720 --> 40:57.960
 So that's pretty much what I can share at this point in time.

40:57.960 --> 40:58.960
 Awesome.

40:58.960 --> 40:59.960
 Awesome.

40:59.960 --> 41:00.960
 Well, let's jump into the demo.

41:00.960 --> 41:01.960
 Okay.

41:01.960 --> 41:02.960
 All right.

41:02.960 --> 41:03.960
 What are we looking at here, Vasi?

41:03.960 --> 41:04.960
 All right.

41:04.960 --> 41:06.840
 You're looking at JetBrains PyCharm.

41:06.840 --> 41:10.760
 And I picked this one because Python is not a language that I like.

41:10.760 --> 41:16.080
 But that's exactly why Code Whisperer is very useful.

41:16.080 --> 41:17.080
 So let me-

41:17.080 --> 41:20.040
 You just alienated a large portion of our audience.

41:20.040 --> 41:21.040
 I know.

41:21.040 --> 41:22.040
 I know.

41:22.040 --> 41:23.040
 I know.

41:23.040 --> 41:24.040
 I just don't like-

41:24.040 --> 41:27.040
 You might be able to redeem yourself by saying you love Julia.

41:27.040 --> 41:28.040
 Okay.

41:28.040 --> 41:29.040
 All right.

41:29.040 --> 41:30.040
 Anyway.

41:30.040 --> 41:35.280
 So I'm going to be doing a series of demos and each one sort of takes it up a notch a

41:35.280 --> 41:36.280
 little bit.

41:36.280 --> 41:39.580
 That's what I'm going to try and do here.

41:39.580 --> 41:44.380
 So the first one, it's kind of going to be a utility kind of thing that I think most

41:44.380 --> 41:48.960
 developers want to do, what they end up doing at some point, right?

41:48.960 --> 41:53.420
 So Code Whisperer is enabled and the AWS toolkit has been installed.

41:53.420 --> 41:56.320
 You guys can see it on the left side of the screen.

41:56.320 --> 42:12.080
 So I'm going to just start by saying a function to convert a JSON file to, and you see Code

42:12.080 --> 42:13.780
 Whisperer just popped up.

42:13.780 --> 42:16.440
 Even my comment, all right?

42:16.440 --> 42:19.280
 So I'm just going to accept that.

42:19.280 --> 42:22.400
 And I want to specify a few more things, right?

42:22.400 --> 42:30.560
 I want to say things like the keys of the JSON file are the column names.

42:30.560 --> 42:33.160
 Again, you see that Code Whisperer popped that up.

42:33.160 --> 42:35.280
 I'm going to accept that as well.

42:35.280 --> 42:38.920
 And then I don't care about the values much.

42:38.920 --> 42:42.640
 And now let's see what Code Whisperer does.

42:42.640 --> 42:47.000
 It just generates the function name.

42:47.000 --> 42:50.280
 I'm just going to accept it.

42:50.280 --> 42:58.180
 And there is a set of code, a bunch of code that had just popped up.

42:58.180 --> 43:01.520
 And then you can see this little thing at the bottom.

43:01.520 --> 43:02.520
 And those are the choices.

43:02.520 --> 43:04.240
 It says one of four.

43:04.240 --> 43:12.440
 And so I could probably go through the various options it's given me and try and pick the

43:12.440 --> 43:14.440
 one that I like the most.

43:14.440 --> 43:18.360
 And I'm probably going to pick this one.

43:18.360 --> 43:19.800
 You can see what it's doing here.

43:19.800 --> 43:21.160
 It's taking the keys.

43:21.160 --> 43:24.080
 It's writing the header with the keys, just like we said.

43:24.080 --> 43:25.460
 And then it's writing all the rows.

43:25.460 --> 43:28.240
 So I'm just going to pick that.

43:28.240 --> 43:31.000
 And so I guess that's kind of done.

43:31.000 --> 43:33.160
 I don't want to print anything.

43:33.160 --> 43:40.600
 And then if we just go in here to an empty area and then see what else it's going to,

43:40.600 --> 43:45.720
 you can see that what it did here is now it's saying a function to convert a CSV file to

43:45.720 --> 43:46.720
 a JSON file.

43:46.720 --> 43:50.440
 So it's the opposite of what we just did, which is a common thing that most developers

43:50.440 --> 43:51.440
 do.

43:51.440 --> 43:55.440
 Like they write a transformation from one side to the other.

43:55.440 --> 43:58.720
 And it's very likely you want the transformation from the other side as well.

43:58.720 --> 44:02.640
 So we can continue doing that.

44:02.640 --> 44:04.800
 And we'll see what happens here.

44:04.800 --> 44:10.720
 I don't want that thing.

44:10.720 --> 44:13.720
 And there's the function name, CSV to JSON.

44:13.720 --> 44:15.200
 I accept it.

44:15.200 --> 44:17.860
 And then I keep going.

44:17.860 --> 44:20.480
 And again, I've got a bunch of options here.

44:20.480 --> 44:24.080
 You can see it uses a dict reader on the CSV data.

44:24.080 --> 44:26.000
 And then it's dumping it into the JSON file.

44:26.000 --> 44:28.860
 I could just accept that and be done with it.

44:28.860 --> 44:33.480
 So that's sort of the first little demo that I wanted to start with so that you get used

44:33.480 --> 44:34.840
 to the interface.

44:34.840 --> 44:37.960
 You kind of see what happens.

44:37.960 --> 44:45.040
 What I'll do next is I'll go to a more obscure API.

44:45.040 --> 44:50.200
 And I say obscure because most developers that use AWS, they've used S3.

44:50.200 --> 44:55.960
 The typical examples are upload a file to S3 or they're doing some EC2 stuff.

44:55.960 --> 45:01.000
 And so Transcribe is one of my services, the speech-to-text service.

45:01.000 --> 45:05.360
 Unless you are an AI developer or unless you are a developer that wants AI in your app,

45:05.360 --> 45:09.440
 you probably won't know about it.

45:09.440 --> 45:12.240
 And so this is a situation exactly like that.

45:12.240 --> 45:19.080
 So what I'll start with, because we're going to be demonstrating use of an AWS API here,

45:19.080 --> 45:30.880
 I'll start with variables for AWS credentials.

45:30.880 --> 45:33.320
 And you can see there's the access key.

45:33.320 --> 45:36.240
 But you also see that it's not giving me the key itself.

45:36.240 --> 45:41.920
 And even though it may have seen some keys in the training data, there's a secret key

45:41.920 --> 45:45.000
 and probably a region.

45:45.000 --> 45:48.320
 And I guess I don't care anymore.

45:48.320 --> 45:54.920
 Then the next thing I'll do is write a function to transcribe.

45:54.920 --> 46:01.640
 I have to type, right, transcribe a German.

46:01.640 --> 46:08.080
 It popped up audio file, but I want to say a German audio file to text.

46:08.080 --> 46:11.920
 You can see it popped that as well, right?

46:11.920 --> 46:13.920
 So it's giving me the name of the function.

46:13.920 --> 46:15.840
 I accepted it.

46:15.840 --> 46:24.140
 And this is going to be more elaborate, so we just wait for it.

46:24.140 --> 46:27.660
 You can see a lot of stuff happening here.

46:27.660 --> 46:30.600
 The bottom client is created with the transcribe thing.

46:30.600 --> 46:31.600
 That's typically how...

46:31.600 --> 46:36.500
 You can see that the access keys and the secret keys and the region from above, the variables

46:36.500 --> 46:41.280
 are being used to generate that variable.

46:41.280 --> 46:46.420
 And then you can see the cool thing here, it understands the locale.

46:46.420 --> 46:48.300
 It's DDE.

46:48.300 --> 46:53.720
 And so you don't have to look up the documentation.

46:53.720 --> 46:56.780
 There's a transcribe transcription job, right?

46:56.780 --> 47:00.140
 And then here it returns the job, right?

47:00.140 --> 47:04.260
 And so there's probably more options.

47:04.260 --> 47:06.740
 There's probably more options down there.

47:06.740 --> 47:07.740
 But I'm just going to...

47:07.740 --> 47:08.740
 Now if you...

47:08.740 --> 47:14.480
 Speaking of options, if you knew a little bit about transcribe and say previously defined

47:14.480 --> 47:19.600
 a variable with a channel type, which is one of those parameters that transcribe will take,

47:19.600 --> 47:21.720
 would it have inserted that in the right place?

47:21.720 --> 47:22.720
 Yes, absolutely.

47:22.720 --> 47:27.400
 So the way Code Whisperer works is it gets context in the call.

47:27.400 --> 47:31.280
 And the context for it depends on where the cursor is.

47:31.280 --> 47:36.360
 It's code around that cursor.

47:36.360 --> 47:39.700
 And it could even be code in other files in the project.

47:39.700 --> 47:42.840
 And so it uses that to figure out what's the best way to do it.

47:42.840 --> 47:47.400
 And some of the options may include it, some of the options may not include it, right?

47:47.400 --> 47:49.440
 So that's kind of how it works.

47:49.440 --> 47:52.200
 So let me accept this.

47:52.200 --> 47:54.480
 And maybe what I...

47:54.480 --> 48:02.640
 And then returning the transcribe job, maybe what I could do is just delete this thing

48:02.640 --> 48:07.480
 here and see what it would generate.

48:07.480 --> 48:09.440
 Maybe it would generate the same thing.

48:09.440 --> 48:12.760
 But okay, wait for the transcription to complete.

48:12.760 --> 48:16.400
 Okay, while true.

48:16.400 --> 48:17.880
 And let's see what happens.

48:17.880 --> 48:18.880
 Yeah.

48:18.880 --> 48:19.880
 Okay.

48:19.880 --> 48:25.160
 So it's actually parsing the thing, going into it multiple levels to figure out the

48:25.160 --> 48:30.160
 status, sleeping for a while, and so on and so forth.

48:30.160 --> 48:32.000
 So you could keep going with this.

48:32.000 --> 48:36.080
 And it's discoverability of these APIs, it's now a lot easier.

48:36.080 --> 48:38.440
 You don't have to go to Stack Overflow and look for the snippet.

48:38.440 --> 48:40.480
 The snippet's right there on the IDE.

48:40.480 --> 48:41.480
 All right.

48:41.480 --> 48:43.720
 So that's the second demo that I wanted to show.

48:43.720 --> 48:47.300
 And I wanted to show how it would work on an AWS API.

48:47.300 --> 48:50.440
 It's not very common for people to know about.

48:50.440 --> 48:54.880
 Then the last thing that I probably would do, and this is where we...

48:54.880 --> 48:59.600
 Let's actually create something that we actually run and see if it works, right?

48:59.600 --> 49:01.720
 And so...

49:01.720 --> 49:15.700
 And what I'm gonna try and do is write a function to plot the sine of X and let's say two star

49:15.700 --> 49:30.640
 cosine of X, come on, with red and blue dashes for the range minus pi to pi, right?

49:30.640 --> 49:31.640
 That's a lot of stuff.

49:31.640 --> 49:38.240
 And granted that we always have to pray to the demo gods, so to speak, but you would

49:38.240 --> 49:45.220
 think that given the nature of what's happening, it'd be fairly robust to typos.

49:45.220 --> 49:47.800
 Is that what you find in general?

49:47.800 --> 49:51.800
 In general, when I'm writing code, I'm writing it for the next person that's gonna be looking

49:51.800 --> 49:53.460
 at it more than anything else.

49:53.460 --> 49:59.040
 So there's this whole philosophy and I could talk about it for hours.

49:59.040 --> 50:05.920
 A good code base is one where let's say you have a new developer in the team, that person

50:05.920 --> 50:09.760
 can add a new feature in the shortest amount of time.

50:09.760 --> 50:14.480
 And I think that's possible only if your code base is self-explanatory.

50:14.480 --> 50:19.000
 It's decoupled, isolated, things, responsibilities are isolated.

50:19.000 --> 50:23.940
 So yeah, even if I, you could say, okay, why can't we correct the typos?

50:23.940 --> 50:26.020
 Maybe that would be a future thing that we do.

50:26.020 --> 50:30.740
 It should be possible to do, I don't see a reason why that won't work.

50:30.740 --> 50:32.920
 But in general, the context is a lot of stuff.

50:32.920 --> 50:37.640
 And so if let's say there's a spelling error, in fact, you know what I'm gonna do right

50:37.640 --> 50:38.640
 now?

50:38.640 --> 50:41.520
 Let me actually take this, let me actually mess around with it.

50:41.520 --> 50:43.880
 I don't want that argument, right?

50:43.880 --> 50:46.600
 So it generated that, I'm actually gonna change that.

50:46.600 --> 50:48.560
 And now let's see what it does.

50:48.560 --> 50:50.420
 It just generated all that stuff, right?

50:50.420 --> 50:54.600
 And you can see it's using minus pi to pi.

50:54.600 --> 51:01.700
 It's got the red dash on sign and the blue on the, let me just accept it.

51:01.700 --> 51:06.920
 And then if I go here, yeah, so it's calling that function.

51:06.920 --> 51:13.800
 So now if I just run this thing, let's see what happens if it's even correct.

51:13.800 --> 51:14.960
 There it is, all right.

51:14.960 --> 51:19.280
 So you see the program actually running.

51:19.280 --> 51:26.080
 So that's kind of the last thing that I wanted to show that it can do things that are pretty

51:26.080 --> 51:27.080
 elaborate.

51:27.080 --> 51:33.380
 And in the end though, the developer is responsible for the code and I think the person needs

51:33.380 --> 51:38.280
 to know what to accept with the options.

51:38.280 --> 51:40.600
 How does he wanna take this further?

51:40.600 --> 51:45.760
 So that's why we call it a, it's more of a companion than, it's not the thing leading

51:45.760 --> 51:46.760
 the way.

51:46.760 --> 51:52.840
 It's the thing that's helping you not have to go look things up in multiple places.

51:52.840 --> 51:53.840
 So that-

51:53.840 --> 51:55.840
 It's your typo, not code whisperers.

51:55.840 --> 51:56.840
 Right.

51:56.840 --> 52:00.080
 But I think that's definitely something that we should be able to handle.

52:00.080 --> 52:04.120
 So you've just given me a good idea for our roadmap.

52:04.120 --> 52:06.680
 Cool.

52:06.680 --> 52:09.520
 That's all I had to show.

52:09.520 --> 52:11.200
 I see.

52:11.200 --> 52:13.400
 Great conversation and great demo.

52:13.400 --> 52:19.000
 Thanks so much for taking the time to share with us a bit about code whisperer and more

52:19.000 --> 52:23.720
 broadly the AI services portfolio and the way you think about all those things.

52:23.720 --> 52:24.720
 It was a pleasure.

52:24.720 --> 52:25.720
 Thanks for having me, Seth.

52:25.720 --> 52:26.720
 My pleasure.

52:26.720 --> 52:27.720
 Thank you.

52:27.720 --> 52:28.720
 All right.

52:28.720 --> 52:53.880
 Take care.

