All right, everyone. Welcome to another episode of the Twomo AI podcast. I am your host,
Sam Charrington. And today, I'm joined by Basi Filiman. Basi is Vice President and General
Manager of Machine Learning and AI at Amazon. Before we get going, be sure to take a moment to hit
that subscribe button wherever you're listening to today's show. Basi, welcome to the podcast.
Thanks for having me, Sam. I'm super excited for this discussion. For those who, well, you don't
know yet, but you're about to know, this is a very special interview because it is the first in
person interview I've done since NURBS in Vancouver in 2019. I happen to be in New York for some
meetings with AWS as was Basi. And here we are. And we're going to spend some time today talking
about the recently announced Amazon code whisperer, coding companion. And as a bonus,
Basi will be doing a demo for me that you'll be able to catch on YouTube towards the end of our
interview. Basi, let's get started with some background. Tell us a little bit about your role at AWS.
Yeah, so I'm Vice President at AWS and I'm responsible for AI services. My background is
machine learning. Back in the 90s, I did a PhD in computer science from the University of Maryland.
And I chose to do it in machine learning. It wasn't a common thing to do at that time.
A lot of my friends were asking me what the heck is machine learning? Like, why are you doing
machine learning? You should be doing databases or you should be doing operating systems.
But I have to say that I'm the one with the last laugh. I'm kind of glad that I did it
at that time and serving me really well right now. And your role at AWS, what aspects of ML and AI
are you responsible for? Yeah, I'm responsible for a lot of the services that we have at the top
layer of the stack. Are you familiar, Sam, with the three layers of the stack, the way we think
about machine learning? Absolutely. But we can recap that infrastructure at the bottom, developer
or data sciences, focus tools in the middle, and cognitive services for lack of a better order.
AI services at the top. Right, right. And I'm responsible for the top layer there.
Okay. AI services layer. It's not just cognitive. There's a set of cognitive language services
at the top layer. There's also a bunch of industrial services. So there's a whole
variety of services at the top layer of the stack. The difference, though, with the middle layer
is that the top layer is more a managed experience and people using those services don't have to
be experts in machine learning. All they need to know is here's my application and here's how I'm
going to make it smarter. And I need this capability that I could just plug into my application
to make it smarter. And then they can just go and use it just like they do today. They access
a web service for compute or they access a web service for storage. They can now access an AI
service in the same exact way. And they can insert it into their own applications and make
their applications faster. So let's dig in a little bit into the distinction between cognitive
and industry. So the non-cognitive services would be things like I know AWS has, for example,
medical transcription. Would you consider that non-cognitive or you thinking like the call
center AI or okay, okay, let me describe that to you in more detail. When we started out,
the first few services we launched, I would call them like foundational to any machine learning
business or a unit. And they're foundational in the sense that they capture a lot of the cognitive
things that humans are able to do. So to give you an example, we started with Lex Lexes sort of
the guts of Alexa. Essentially, it's the two A's removed from Alexa. And what's inside is Lex.
Not many people know that, but now they do. It all makes sense. Right. Right. And Lexes are
conversational AI platform. And what what people can do with it is they could build their own
Alexa's if they wanted to or they could build a chatbot and insert it into their website.
And so that Lexes something that would understand both text input as well as speech input. So
they build a bot just once and then they can insert it into a call center conversation so that
it can take the call and maybe take care of the customer that's calling. So that's Lex,
which is a conversational part. And that's definitely a cognitive service. We call it a language
service. I think Gartner calls it a language service too. So we also have Polly. Polly is our text
to speech service. Alexa's voice is actually a Polly voice. And but customers now have the
capability to have their own voices. And they can they can pick from one of the many languages
that we support and the different kinds of voices we may have for each of the languages.
And then they could just use it for various applications in a common one. They use it for is
they just put this thing on a web page. And so when people are driving their cars,
they can just listen to what's on the web page. And Polly is going to narrate it for you, right?
So that's another cognitive service. Then we've got Translate, Amazon Translate, which is
document translation. You can go from one language to another. And we've gotten to
very high quality these days in terms of translation. So you could do a lot of cool things with that.
Then we've got Friendscribe, which is about is a speech to text. We talked about text to speech
before with Polly. But this one is a speech to text. And so this is useful for you to
understand what's being said in a conversation. So that is another cognitive service.
And then we've got yet another one called Comprehend, which is a natural language processing
service. And it's got all kinds of things you could do with it, like sentiment. Given a piece
of unstructured text, it'll tell you what the sentiment is. Is it a negative sentiment?
Is it a positive sentiment? So customers often they use it for reviews, like the capture reviews.
And then they run it through Comprehend. And they understand, like, are people excited about
what whatever it is that the review was for or are they unhappy about it? And we've got things
like targeted sentiment. So, you know, in the same sentence, you could say that the food was great,
but the service was lousy. And so that's that's multiple sentiments within the same sentence.
That's the kind of stuff you could do with Comprehend. You could also do things with Comprehend,
where you can extract entities of interest from unstructured text. Like, let's say you see
there's an article on one company acquiring another company. You could now just look at that
news article and you can extract things like which was the company that was acquired,
who was the CEO of that company? What was the transaction value? All of those kinds of things
can be extracted. So that's kind of what Comprehend does. It helps you understand unstructured text.
Right? So these are sort of the language or the cognitive services that we have. And that's what
we started with at the beginning. These are the basic foundational blocks you would need to build
anything else. And then more recently we've added domain specific services. Like, let me take one
industrial service, for example. Monitoron is an example of it. And this is an AWS service that's
it includes a piece of hardware that comes with it. The hardware is essentially a temperature
and vibration sensor. And it's meant for shop floor technicians that want to monitor
their equipment on the factory floor. And they want to do predictive maintenance. So they
buy this piece of hardware from us and they attach it to some portion of the machine that they want
to monitor. And what we do is we learn the behavior of that part of the machine in terms of vibration
and temperature, which is what the sensors are in that unit. And so over time we'll be able to tell
the tell the person the use of the customer if there's a deviation in behavior. And because
vibration is something that it predicts, it's something that it'll tell you before things are
going to fail. It's it has that predictive nature. So we're able to actually detect issues
way before they actually happen. So, for example, our fulfillment centers, we have conveyor belts
in our fulfillment centers to move the products around. And so it's very important for those belts
to keep running. And there's a lot of rotating parts there. And we use these we use monitoron
there to monitor the health, the whole conveying system. And we've been able to catch failures like two
weeks before they actually happened. So this essentially allows customers to plan the maintenance
rather than you know react in a it's going to be chaos if if just if it just happens and they are
not prepared for it. So that's a very clear that's it's not cognitive. It's something that is
specific to the domain. And it's a large enough segment there and lots of customers have moving
parts and they have equipment that they can afford to fail. And so that's a place where things
like monitoron is being used. And to combat your question on the medical transcription thing,
that's just an extension of the transcription that we have. It just applies to the medical domain.
So I would say that that is a cognitive service because it's okay. It has to do with you know speech
and it has to do with understanding speech. So those are the kinds of things we have we have also
other kinds of services up there at the top layer of the stack. We've got things like contact lens
for Amazon Connect. And what contact lens does is it's a higher level abstraction. It uses transcribe
underneath the scenes that uses comprehend underneath the scenes, but it was built for the call center.
And if you're a call center customer, what you're interested in is you just want to know why are
customers calling me, right? You want to know that you want to know how every call is going. Is it
going? And by the way, you want to know this real time as it's happening, but you may also want to
do it post call, which is called post call analytics. You want to know how your agents are doing. How
are they responding? Are they actually helping the customer? Are they saying the right things at
the right time, right? So you could do all of those things and that's what contact lens does. It
actually implements the actual, it takes the business problem and just implements it using a
combination of these foundational services that I talked about. So we've also got some of those
at the top layer of the stack. And then I've got one more thing and it's called Amazon Kendra.
And that's about search. It's about enterprise search where you've got if you're if you're an
enterprise, you've got a lot of documents within your enterprise. And these documents are typically
siloed. They're not they're not like the documents on the web where everything's linked to each other
and you know, you can you can figure out what people are clicking on and keep track of which
documents are more interesting. Instead here, they're all siloed. They're sitting in different
systems like they're sitting in SharePoint maybe or they're sitting in on your wiki pages or
they're sitting inside Salesforce. And so it's always it's a much harder problem for employees to
find things that they actually want to find within an enterprise. If you've if you've ever tried
the search systems that are at enterprises, they are pretty horrible. And the one that we used to
have inside Amazon wasn't very good either before Kendra. So and this is a space that I know fairly
well. Having worked at a startup that tried to solve this problem 20 something years ago.
Oh wow. Okay. Okay. All right. But it's like you're giving the pitch that we used to give back
that. Okay. Okay. It's one of these problems that just, you know, hasn't been solved and probably
won't ever be solved in the enterprise. Okay. Because it's such a difficult problem. Absolutely.
It's a difficult problem. But I think our tech the technology is there where we were able to solve
it in a very good way. And I'll tell you the kinds of things you can do with Kendra. So Kendra is
again, another higher level abstraction where it just focuses on the business problem, which is search.
Right. You need to be able to help people find what they're looking for and documents that's
sitting in different places. So you can't use all the usual techniques. So what Kendra does.
Number one is it allows you to suck in all of the data from all of these systems. There's connectors,
managed connectors. All you have to do is to provide credentials and it's going to suck in all of
the data and also keep the access rights along with it so that you're not going to show up. They're
not going to show up in search results for people that are not authorized to see certain kinds of
documents. So it keeps it not only sucks the data from these different systems, but it also
keeps all the permissions intact so that it knows what to show and what not to show. The second thing
Kendra does is it understands all of the documents like a human would after reading it. So now
anyone can ask a question and I'm not talking about keyword search. I'm talking about semantic
search here. So I could actually say where is the IT help desk at this Amazon building? Right. I can
just ask that question. And the answer is not going to be like a hundred links where I need to
click on every single document and then hope I find this information in there. It's a Kendra is
actually going to tell me it's the fourth floor right right up there. And of course it's going to
have all the links as well. The documents below like you're used to in a traditional search,
but you don't have to go digging for the answer. If it's confident, it'll show you the answer
right up there. And also in terms of relevance in the document, the documents being the right
documents, given we can't use a lot of signals that are available on the web. We use a lot of
clever techniques there. It's pre-trained on various domains. So it's going to perform really well
out of the box. So there's a lot of our customers that love the ease of setting this up.
We've also made it very easy to set up. You can ingest all of your documents with these
connectors and immediately you've got to search application that you can just go in and try it out.
Okay. And then of course you can embed that into your own websites and things like that. So
that's what can and underneath the scenes, if you're interested in Kendra underneath the scenes,
there's a whole bunch of NLP models. That's what makes it happen. You said it was a hard problem,
and that's rightfully so. Yeah, we were using Verity and I think we started looking at autonomy.
These are all text search engines and the problem that you described if you know a user getting
back tons of links that match, but relevance was the difficult problem. And we were nowhere near
at that time summarization and some of the things that you described. Absolutely. And underneath
the scenes, there's a whole bunch of models. There's a document ranking model. There's an FAQ model.
There's a question answering model and all of these models sort of work together and all of the
complexities is is not I mean the user doesn't have to deal with all of our complexity and putting
all of this together. We make sure that these things work seamlessly together. And of course Kendra
has like learning like continuous learning. It gets better as more people use it. There's explicit
feedback. There's a thumbs up, thumbs down on the search results. If somebody does click it,
we'll keep track of it. It gets better for the enterprise or implicitly we can track.
Okay, they are clicking on this document in from the results. So maybe it wasn't the first one.
It was the third one. And so those kinds of things make sure that it gets better over time,
which is another thing. It's continuous learning. So that's another thing that's made it possible
for customers to find information that they actually want to find and make their employees more
productive. So that's sort of the top the top layer of the stack is essentially a whole bunch of
AI services. There's some foundational ones. Like I said, and then there's some that are
specific to domains like healthcare and industrial manufacturing domains. And then there's a lot
of applications sort of things that solve business problems directly.
So you've described this pretty broad set of services. Yeah. We want to jump into talking about
code whisperer. Code whisperer is not the first AWS service that's dealing with code.
Right. There was code guru and then possibly others. Yes.
Talk a little bit about what AWS has been doing with code and kind of how code whisperer came about.
Yeah. So we've always known that AIML is going to it's going to help a whole variety of
different areas. It's going to find its way into many different areas and it's going to make
things easier in those areas. I remember I think Werner Vogel's who's our CTO. He wrote a blog
article on how AIML has the potential to completely change the way developers do their every day go
about their every day work that they do. So the journey actually started in 2019. And if you look
at I think I should start with what what is a developer's work for look like. That's a great place
to start. And then I can sort of tell you how we went about tackling all of those different pieces.
So the what a developer first does of course he writes he writes code. That's the first sort of
step he writes code. And then the the next thing that they do is get the code reviewed by you know
peers. And some people may even use some automated systems to kind of scan the code and help find
things right. So there's there's there's that piece you get it reviewed. And once you once you
reviewed the code you deploy it. You deploy the whole thing and then you monitor it as the
application is serving the customers that is meant to serve. And at that time you're monitoring
your your applications for cost and performance. And and then you'll maybe find opportunities to
make those better. So those are sort of like key key pieces of a workflow developers workflow.
When we started in 2019 we launched our very first service with that that is related to
developers and and writing code. And and the one we decided to launch at that time it's it was
code guru in 2019. And what code guru does is it helps you find bugs in your code and it helps
you find lines of code that are very expensive expensive in terms of you know the amount of
compute it would need. So that's the kind of stuff that code guru helps. And so you could think of
code guru then as taking care of the you know the quality of the code the reviewing part it helps
in that in that part of the workflow. And then is it considered an ML service or an AI service?
Yeah it is considered an AI service. Yeah so we do have and so in the AI service groups
at the top layer of the stack we also have a developer focused set of services.
Code guru was the first one which we launched in 2019. The second one we launched was a year later
and that's DevOps group. And this is to tackle the monitoring the application once you've deployed it
and you're monitoring it and you're up then you're trying to find places to optimize it.
Right? And so that's what DevOps guru does and we launched that in 2020. And we finally we've
now tackled the writing code part which is what code whisperer is all about. And let me set up
the problem a little bit more. I mean writing code is majority of what a developer would do and
I'm I'm still I'm a I'm a I've always been a very passionate developer and I still write code
I'm not as much as I like to but I still write a lot of code and so the best way to set up this
problem is is to talk through my own experience here like so I what I tend to do with the limited
amount of time that I can get these days I may pick a pet project that I'm either that I want
to automate and I'm doing it mainly to learn because I know that there's new frameworks all the time
and so when I hear about something I want so many new frameworks that's right that's right that's
right so I just want to learn I want to be in touch with the technology because then you know I can
interact better with my people because that's what they do all day long so so what I tried to do
this was about this was maybe a year and a half or year and a half ago I was hearing a lot
about React as a framework for front-end development and the last time I'd done any any front-end
programming was back in I mean the 2011 2012 time frame when you know there were there was this
you know Microsoft had this Windows presentation foundation there was this concept of XAML which
would separate design from from actual implementation the design of how the user interface would
look like from the actual implementation of what would happen when you actually trigger those
those buttons and those drop-downs right and so that was the last time I'd done any kind of front-end
programming but then I've heard I heard so much about React everybody talk about it so I said okay I
need to learn this too I need to see what it is and so I picked a project that I wanted to just
implement I thought it was going to just be a weekend project and so I learned about React
I knew Java but JavaScript I've not done a lot of JavaScript or TypeScript but it was close
enough and so the first issue was of course programming language and the syntax and how things
are they're all different there's so many programming languages these days and new ones coming up
all the time and each one has its own area where it shines and other areas where it's not so great
so that's the first place there's a difference if you're it's a different language that's used
there but then the framework itself the concepts behind React and how do you use it for doing fun
and that was another thing but it wasn't enough for me to just learn about React the moment I once
I finished learning about React I needed to learn about React router which is the thing that would
route interface route incoming calls but that wasn't enough I needed to learn about React redux
right and even that wasn't enough because I like to test my code I like to I shouldn't even say
test I'd like to specify the behavior of the code first and then actually go and implement the code
so I needed to have some testing framework so just I needed to learn about just and that was
also not enough because there's another testing framework for React called enzyme which is very
popular so by the they were all these different frameworks and by the time I'd gone I'd just
spent a whole bunch of weekends learning a lot of these things and I still haven't written anything
meaningful I've not made any progress on on what I wanted to build right and so so that's that's
a big problem that there's just so many different things that developer needs to know and now if
you take this to the cloud world you know with AWS we've have 250 plus services I think today
on AWS that's about 10,000 plus APIs yeah right and by the time we finish this conversation
there'll be a few more all right so so what is a how what is a developer what how does he do this
right and typically what people do is they go to stack overflow yeah okay you're sensing right
and then you're going to look for snippets of code that you can copy paste right so that's the
that's the life of a developer and it's it's it's it's gotten harder and so that's kind of where
code whisperer comes in and what code whisperer is is it's an ML powered coding companion
pair programming companion if you will that just helps developers be more productive
and it doesn't matter where you are in your journey as a developer what what code whisperer helps
you accomplish it helps you magnify your impact no matter where you are in the journey
right and so I think that's the core that's the core reason why we built it yeah I've got to ask
my my suspicion is that yeah most folks listening to this podcast if not all have heard of
co-pilot yep which is kind of collaboration between open AI and GitHub which preceded
code whisperer by sometimes six months maybe did they scoop you or no I mean so you actually
helped me set this up really nicely with your previous question right like so you I talked to
you about the journey we were on yeah developer tools we started in 2019 yeah with code
group right so for me this is a continuation of that of that whole journey so you can you can
you can argue who came first with that story in place right but but let me tell you about things
that we're doing differently with code whisperer we did a few things very differently with code whisperer
the the first thing we did differently if you look at things the other tools that are out there
that do things that are similar you'll often often you'll see you'll see headlines like a lot of
the code about 40% of the code that's generated has security problems security issues security and
licensing are the things that come up right so I'm going to tackle security first but then I'll
come to licensing so you're you're hitting that you're hitting all the sweet spots right now so
yeah so it's on security so what we do is as part of code whisperer which by the way it's part
of the AWS toolkit and the toolkit is a plug-in to all the major IDs so it's we've got it plugs
into which was studio code it also plugs into all the jet brains IDs so it's I think pie charm for
Python and IntelliJ for Java and the web storm and primarily to do completion for APIs and that
kind of thing yes and it's or initially if not yeah we're not talking about completion like
you know like the way IntelliSense used to used to be we're talking about like 20 lines of code
and 25 lines of code so when we get to the demo at the end you'll see I was speaking more generally
about the IDE toolkit yeah that preceded code whisperer correct or is that oh the AWS toolkit
has been there for a long time right and that that was primarily right created to make those
IDs aware of the AWS API exactly exactly right and completion and things like that exactly now
okay now it's just like completion yeah at another level that's right you will show us absolutely
absolutely yeah that's true so and what people just need to do is just download the AWS toolkit
and they have it as part of these IDs we also integrated code whisperer into our lambda console
so lambda is our serverless service so it's where you just type in code and there's no servers to
manage your code just runs and gives you the results right and so there's a lot of code that's
being written on the lambda console so it's plugged in there it's also built in a cloud nine yet
yes it is okay it comes with integration into cloud nine as well that's our web web based IDE
so and we were on a topic and I dig dig rest and went into this one yeah the differentiators right
so this the first one is this the security security thing like for us at AWS security is like
job zero I'm sure you've heard a lot about how seriously we take security and we think we need to
help because security is a very specialized skill most companies have you know a separate group
of experts that are just there for you know for this topic in general and so we have what's called
a security scan that's built into code whisperer so you can you could write code and then
you could you could accept a lot of the code whisperer suggestions and you can also edit it
further but at the very end we've got the security scan thing that you can hit and it's going to tell
you if there are any security issues in the code that that it's scanned so that's the first thing
that we've done differently we want to make sure that the code we generated the code that ends up
coming out at the other end we want to help in in as many ways as we can to make sure that it has
the it doesn't have any security issues and presumably that security scan is also an ML model
that's trained to recognize potential security issues absolutely absolutely yeah yeah yeah
cord guru had this capability when we launched it in 2019 and so we're we're using a lot of that
here as well okay so that's the first area where it's different and the second area where it's
different is in terms of the code it generates I'm sure you've heard of like AI systems like in
with games like chess and go these they come up with new moves that they've never seen before or
new strategies they've never seen before and to a large extent that's what happens when
code whisper is generating code it's generating code it's not seen before but there may be instances
where the code that it generates is close enough to something that it's seen before and code whisper
of course is trained on billions of lines more than billions of lines of code from public repositories
you know from a Amazon repositories code repositories from documentation and forums public forums
and that's it's trained on a lot of stuff so it may have seen something similar before and
then what code whisperer will do is it provides what we call a reference tracker where it lists
the license under which that other similar piece of code was provided and so this way developers
know that the code that is there could potentially have that license so they can decide whether they
want to include that piece of code but they want to accept that suggestion or they don't want to
it depends on you know what the what the company rules are it depends on things like that so
that's a second thing that we're doing differently and the third thing that we're doing differently is
like we we talked about the the number of AWS services right and so first class support for AWS APIs
we know what the most common patterns are in terms of application developers and how they use the cloud
and now you can you can without having to learn about the 10,000 plus APIs without having to worry
about any of that your intent you just express your intent as you will see later you express your
intent either in the form of a good name for the function or in the form of a comment and we're
just going to give you the the best pieces of code that would make the most sense and that and
that point so those are some of the differences we're also pretty we do some aggressive
filtering on on potential harmful stuff and so we're also we've taken a lot of effort to
minimize any issues there as well so these are all the differences for code whisperer at this point
in time you talked about the sources of code that the that code whisperer was trained on you spoke
about them broadly is GitHub included in that that set of repositories anything that's public and
has the right license that's what we use and are there specific licenses or types of licenses that
you filtered on definitely the the pieces of code that are public and are available for consumption
those are part of the the training corp is as well as all of the Amazon code internally that we've
had from over many years that's part of the that's part of it as well and anything that's public
and like documentation that's public those are all pieces of code that goes into the training
I'm imagining that if you're if you're scouring the web crawling the web looking for code
that even the you know identifying code identifying the licenses associated with that code
presents interesting machine learning problems absolutely absolutely yeah there's a lot of
classification problems right there right a whole class of classification problems just on
figuring out which are the ones that you want to use in which are the ones you don't want to use
and of course we've we've used every every technique that we've already have I've talked about
many of our AI services at the top layer of the stack comprehend for example has a document
classification API essentially what you do there is that you decide what you're what you want to
call your category and you give it examples of a certain document that belong to the category
some number of documents that belong to the category define a category two another set of documents
that belong to that category and then you could define a third category called other where you give
it a whole bunch of documents that have no particular category and then comprehend will train a
custom model for you and you're not an ML you don't have to be an ML expert for it it's just
not all accessible through the APIs and then you have now an endpoint where you can send it new
documents and it's going to tell you is it class one or class two or class three and so we we have
a lot of these techniques already in place and we've used that a lot for these kinds of things
okay okay presumably this is based on a large language model like other implementations of code
generation in the text textual context of LLM's one of the big conversations is around bias and
kind of responsible use of those yeah do those same kinds of issues surface when we're talking
about code and if so how yeah so if you if you look at a lot of the transform models they've got
you know they're built on top of each other so there's various checkpoints typically you would
have a large language model that's trained on just text and then you would that would be a checkpoint
and then you would take that and then now train it on code right so if if there's issues with
that core based model they're probably going to linger on and so we've got if you go to amazon.science
it's a one of the websites and you'll see that we published just in the last year alone we
published about 400 papers on responsibility I that deals with all of these topics which we
take very seriously things like bias and fairness we have in in my team we've got we've got
the person that wrote the book on algorithmic bias he's a professor at UPEN his name is Michael
Kerns he'll meet him later today and so we've got all of those experts helping us avoid the pitfalls
as much as possible now this is of course an emerging it's a it's a thing that's still progressing
it's not like we know exactly what we need to do here but we've got the best minds looking at these
topics and helping us figure out how best to deal with those situations I didn't mention some very
aggressive filtering that we're doing to prevent those kinds of situations those kinds of things
were implemented with the guidance of folks like Michael imagining the kind of classic profanity
in comments is one example but are there other yeah I was kind of trying to get some examples of
the way bias types of issues might surface in a code code specific context are there examples
that come to mind of that yeah generally if you're let's say you're writing a function that takes
in a gender and makes a decision based on the gender there could be areas where bias could creep in
and so you've got to explicitly look for situations like that and make sure you don't generate
codes along those paths and that's one another one is of course keys right like so we're talking
about APIs in the cloud a common thing that I see happen a lot is just keys where your secret keys
and your and developers tend to sometimes just put it into the source file including the ones
checked into GitHub right there's a lot of your keys are in there right right and now if you're
learning from all of that and let's say you do want to generate you do want to generate that line
it could up like you could leak a potential key right and so we've taken a lot of care to prevent
those kinds of situations and I'll probably be able to show you that as well when when we actually
get to the demo in the end awesome awesome well this may be a great segue to the demo before we do
any any additional thoughts you want to share before we jump into the demo no I just think that
I told you that I was like I'm a very passionate developer and a developer and it's still am
I really think that this is just the beginning of what we can we're going to be able to do
and this is going to make developers lives a lot more easier and I think they can focus most
developers that I know they want to focus on the the higher value problem they're less interested in
the boilerplate you know things that a framework may dictate and that's that's the that's the
that's the bad part of writing code it's the the the real cool part is the business logic the
that's the cool parts that you want to actually write and so I think this is going to be this is
going to be in a space to watch going forward there's going to be a lot of innovation coming
on this topic and I just I'm very excited for what's to come in this area no just to probe into
that a little bit do you do you have a gut feel for where you think the innovation will come first or
kind of what the you know what the path looks like we've got some ideas on where the path looks
like and I'm sure you know that like 90% of what we do it it it it is driven by our customers it's
what they're asking us for and about 10% of the time we think on their behalf and and we do
something right based on that the obvious next steps will just be support for the more popular
languages I think we're currently support TypeScript JavaScript Java Python is what we support
so obviously there's going to be an element of supporting some of the key languages that's
definitely going to be one that's going to be there but I think it's just going to get better
and better in terms of in terms of the actual code that's generated today developers can accept
you know they can accept there's going to be options so when when code whisperer generates
generates code it's it gives you it gives you x number of options you can actually scroll through
it and see which ones sort of fit your style and and and what do you want to include those those
suggestions will get better over time and I think it'll just make people's lives a lot easier and
best practices you know we can capture best practices I mentioned already we kind of know the
patterns of how AWS APIs are accessed for application development and if you use there's there's
best practices in terms of how you put them together how you do error checking and things
like that and so those things can come more and more out of the box and this will this will make
it easier for even you know developers that are earlier in their journey to generate pieces of code
that are pretty robust so that's pretty much what I can share at this point in time.
Awesome awesome well let's let's jump into the demo okay all right what are we looking at here
Vossy all right you're looking at jet rains pie charm and I think this one because Python is not
a language that I like but that that's exactly why why you know code whisperer is very useful
so let me let me just alienate it I know I know I know I know I just don't like you might
be able to redeem yourself by saying you love Julie okay all right anyway so I'm gonna be doing
a series of demos in each one sort of takes it up a notch a little bit that's what I'm gonna try
and do here so the first one it's it's kind of going to be a utility kind of thing that I think
most developers want to do what they end up doing at some point right so code whisperer is enabled
and the AWS toolkit has been installed you guys can see it on the left side of the screen so I'm
gonna just start by saying a function to convert a JSON file to and I you see code whisperer
just popped up even my comment all right so I'm just gonna accept that and I want to specify
a few more things right I want to say things like the keys of the JSON file are the column names
again you see that code whisperer popped that up I'm gonna accept that as well and then I don't
care what the value is much and now let's see let's see what code whisperer does it just generates
the function name I'm just gonna accept it and there is a set of code a bunch of code that
it just popped up and then you can see this little thing at the bottom and that those are the choices
it says 104 and so I could probably go through the various options it's given me and and try and
pick the one that I like the most and I'm probably gonna pick this one it's you can see what it's
doing here it's taking the keys it's writing the header with the keys just like we said and then
it's writing all the rows so I'm just gonna pick that and so I guess that's kind of done I don't
want to print anything and then let's if we just go in here to an empty area and then see
what else it's going to you can see that what it did here is now it's it's saying a function
to convert a CSV file to a JSON file so it's the opposite of what we just did which is a common
thing that most developers do like they they write a transformation from one side to the other and
it's very likely want the transformation from the other side as well so we can continue doing that
and we'll see what happens here I don't I don't want that thing so
and there's the function name CSV to JSON I accept it and then I keep going
and again I've got a bunch of options here you can see it uses a dict reader on on the CSV data
and then it's dumping it into the JSON file I could just accept that and I'd be done with it so
that's sort of the first little demo that I wanted to start with so that you get used to the
interface you kind of see what happens yeah what I'll do next is I'll go to a more obscure API
and I say obscure because most most developers that use AWS they've used the s3 they want the
typical examples are upload a file to s3 or they're doing some EC2 stuff right and so
transcribe is one of my services the speech to text service unless you're an AI developer
or unless you're a developer that wants AI in your app you probably won't know about it and
it's and so this is a situation exactly like that so what I'll start with and because we're
going to be demonstrating use of an AWS API here I'll start with you know variables for
AWS credentials right and you can see there's the access key but you also see that it's not
giving me the key itself and even though it may have seen some keys in the training data
there's a secret key probably a region and I guess I don't care anymore then the next thing I'll do
is write a function to transcribe after type write transcribe a German you put it popped up audio
file but I want to say a German audio file to text and you can see it popped that as well right
so it's giving me the name of the function I accepted it and this is going to be some elaborate
it's going to just going to be more elaborate so we just wait for it you can see a lot of stuff
happening here the bottom client is created with the transcribe thing that's typically how you
can see that the access keys and the secret keys in the region from above the variables are being
used to generate that that that variable and then you can see the cool thing here it understands
the locale it's dd and so it's there's you don't have to look up the documentation there's a transcribe
start transcription job right and then here it returns the job right and so there's probably more
options there's probably more options down there but I'm just going to now if you yeah speaking of
options if you knew a little bit about transcribe and say previously defined a variable with a
channel type which is one of those parameters that transcribe will take would it have inserted
that in the right place yeah it's absolutely so the way code whisperer works is it gets context
in the call and context for it is depends on where the cursor is it's code code around that cursor
and it could even be code in other files in the project and so it uses that to figure out what's
the best way to do it and some of the options may include it some of the options may not include
it right so that's kind of how it works so let me let me accept this and maybe what I rather
than returning the transcribe job maybe what I could do is you know just delete this thing here and see
what what it would generate maybe it would generate the same thing but okay wait for the transcription
to complete okay while true and let's see what happens yeah okay so it's actually parsing the thing
going into it multiple levels to figure out the status sleeping for a while and and so on and so
forth and so you could keep going with this and it's discoverability of these APIs it's now a lot
easier you don't have to go to stack overflow and look for the snippet the snippets right there on the
IDE all right so that's the second demo that I wanted to show and I wanted to show how it would
work on a on an AWS API that's not very common for people to know about then the last thing that I
probably would do and this is where we let's actually create something that we actually run and see
if it works right and so and what I'm going to try and do is write a function to plot
sign of sign of x and let's say two star cosine of x come on with red and blue
dashes for the range minus pi to pi all right that's a lot of stuff yeah we always have to
pray to the demo gods so to speak and but you would think that that given the nature of what's
happening it'd be fairly robust to typos is that what you find in general I in general I'm when
I'm writing code I'm writing it for the next person that's going to be looking at it more than
anything else so I there's this whole philosophy and I could talk about it for hours a good code
base is is one where let's say you have a new developer in the team that person can add a new
feature in the shortest amount of time and I think that's possible only if your code base is self
explanatory it's decoupled isolated things responsibilities are isolated so yeah I even if I
you could say okay why can't we correct the typos maybe that would be a future thing that we do
it should be possible to do I don't see a reason why that won't work but in general the context
is a lot of stuff and so if let's say there's a spelling error in fact you know what what I'm
going to do right now let me actually take this let me actually mess around with it I don't want
that argument right so it generated that I'm actually going to change that and now let's see what
it does it just generated all that stuff right and you could see it's using minus pi to pi and
it's got the red dashes on red dash on sign and the blue on the let me just accept it and then
if I go here yeah so it's calling that function so now if I just run this thing let's see what
happens if it's even correct and there it is all right so you see you see the the program actually
running so that's kind of the the last thing that I wanted to show that you it can do things that
are pretty elaborate and in the end though the the developer is responsible for the code and I
think the person needs to know what to accept you know with the options how does he want to take
this further so that's why we call it a it's more of a companion then it's not the thing leading
the way it's the thing that's helping you not have to go look look things up in multiple places yeah
so your typo not right right but I think that's definitely something that we should be able to
handle so you've just given me a good idea for our roadmap cool that's all I had to show
well Vasi great conversation and great demo thanks so much for taking the time to share with
us a bit about code whisperer and more broadly the AI services portfolio and the way you think about
all those things it was a pleasure thanks for having me sir my pleasure thank you all right bye bye
