1
00:00:00,000 --> 00:00:10,720
All right, everyone. Welcome to another episode of the Twomo AI podcast. I am your host,

2
00:00:10,720 --> 00:00:16,480
Sam Charrington. And today, I'm joined by Basi Filiman. Basi is Vice President and General

3
00:00:16,480 --> 00:00:21,680
Manager of Machine Learning and AI at Amazon. Before we get going, be sure to take a moment to hit

4
00:00:21,680 --> 00:00:26,480
that subscribe button wherever you're listening to today's show. Basi, welcome to the podcast.

5
00:00:26,480 --> 00:00:32,000
Thanks for having me, Sam. I'm super excited for this discussion. For those who, well, you don't

6
00:00:32,000 --> 00:00:37,840
know yet, but you're about to know, this is a very special interview because it is the first in

7
00:00:37,840 --> 00:00:48,160
person interview I've done since NURBS in Vancouver in 2019. I happen to be in New York for some

8
00:00:48,160 --> 00:00:55,040
meetings with AWS as was Basi. And here we are. And we're going to spend some time today talking

9
00:00:55,040 --> 00:01:02,000
about the recently announced Amazon code whisperer, coding companion. And as a bonus,

10
00:01:02,000 --> 00:01:06,720
Basi will be doing a demo for me that you'll be able to catch on YouTube towards the end of our

11
00:01:06,720 --> 00:01:13,040
interview. Basi, let's get started with some background. Tell us a little bit about your role at AWS.

12
00:01:13,680 --> 00:01:20,880
Yeah, so I'm Vice President at AWS and I'm responsible for AI services. My background is

13
00:01:20,880 --> 00:01:25,920
machine learning. Back in the 90s, I did a PhD in computer science from the University of Maryland.

14
00:01:26,960 --> 00:01:30,960
And I chose to do it in machine learning. It wasn't a common thing to do at that time.

15
00:01:31,760 --> 00:01:37,280
A lot of my friends were asking me what the heck is machine learning? Like, why are you doing

16
00:01:37,280 --> 00:01:42,080
machine learning? You should be doing databases or you should be doing operating systems.

17
00:01:42,880 --> 00:01:47,680
But I have to say that I'm the one with the last laugh. I'm kind of glad that I did it

18
00:01:47,680 --> 00:01:55,600
at that time and serving me really well right now. And your role at AWS, what aspects of ML and AI

19
00:01:55,600 --> 00:02:00,640
are you responsible for? Yeah, I'm responsible for a lot of the services that we have at the top

20
00:02:00,640 --> 00:02:04,880
layer of the stack. Are you familiar, Sam, with the three layers of the stack, the way we think

21
00:02:04,880 --> 00:02:12,080
about machine learning? Absolutely. But we can recap that infrastructure at the bottom, developer

22
00:02:12,080 --> 00:02:17,840
or data sciences, focus tools in the middle, and cognitive services for lack of a better order.

23
00:02:17,840 --> 00:02:21,680
AI services at the top. Right, right. And I'm responsible for the top layer there.

24
00:02:21,680 --> 00:02:26,640
Okay. AI services layer. It's not just cognitive. There's a set of cognitive language services

25
00:02:26,640 --> 00:02:31,440
at the top layer. There's also a bunch of industrial services. So there's a whole

26
00:02:32,560 --> 00:02:36,720
variety of services at the top layer of the stack. The difference, though, with the middle layer

27
00:02:36,720 --> 00:02:42,480
is that the top layer is more a managed experience and people using those services don't have to

28
00:02:42,480 --> 00:02:48,080
be experts in machine learning. All they need to know is here's my application and here's how I'm

29
00:02:48,080 --> 00:02:53,920
going to make it smarter. And I need this capability that I could just plug into my application

30
00:02:53,920 --> 00:02:59,440
to make it smarter. And then they can just go and use it just like they do today. They access

31
00:02:59,440 --> 00:03:05,760
a web service for compute or they access a web service for storage. They can now access an AI

32
00:03:05,760 --> 00:03:10,800
service in the same exact way. And they can insert it into their own applications and make

33
00:03:10,800 --> 00:03:17,440
their applications faster. So let's dig in a little bit into the distinction between cognitive

34
00:03:17,440 --> 00:03:26,560
and industry. So the non-cognitive services would be things like I know AWS has, for example,

35
00:03:26,560 --> 00:03:31,200
medical transcription. Would you consider that non-cognitive or you thinking like the call

36
00:03:31,200 --> 00:03:37,680
center AI or okay, okay, let me describe that to you in more detail. When we started out,

37
00:03:37,680 --> 00:03:43,680
the first few services we launched, I would call them like foundational to any machine learning

38
00:03:44,400 --> 00:03:51,920
business or a unit. And they're foundational in the sense that they capture a lot of the cognitive

39
00:03:51,920 --> 00:03:58,080
things that humans are able to do. So to give you an example, we started with Lex Lexes sort of

40
00:03:58,080 --> 00:04:04,000
the guts of Alexa. Essentially, it's the two A's removed from Alexa. And what's inside is Lex.

41
00:04:04,000 --> 00:04:09,200
Not many people know that, but now they do. It all makes sense. Right. Right. And Lexes are

42
00:04:09,200 --> 00:04:14,880
conversational AI platform. And what what people can do with it is they could build their own

43
00:04:14,880 --> 00:04:19,920
Alexa's if they wanted to or they could build a chatbot and insert it into their website.

44
00:04:20,880 --> 00:04:26,240
And so that Lexes something that would understand both text input as well as speech input. So

45
00:04:26,240 --> 00:04:31,760
they build a bot just once and then they can insert it into a call center conversation so that

46
00:04:31,760 --> 00:04:38,080
it can take the call and maybe take care of the customer that's calling. So that's Lex,

47
00:04:38,080 --> 00:04:42,720
which is a conversational part. And that's definitely a cognitive service. We call it a language

48
00:04:42,720 --> 00:04:49,440
service. I think Gartner calls it a language service too. So we also have Polly. Polly is our text

49
00:04:49,440 --> 00:04:56,560
to speech service. Alexa's voice is actually a Polly voice. And but customers now have the

50
00:04:56,560 --> 00:05:02,800
capability to have their own voices. And they can they can pick from one of the many languages

51
00:05:02,800 --> 00:05:06,880
that we support and the different kinds of voices we may have for each of the languages.

52
00:05:06,880 --> 00:05:11,600
And then they could just use it for various applications in a common one. They use it for is

53
00:05:11,600 --> 00:05:15,520
they just put this thing on a web page. And so when people are driving their cars,

54
00:05:15,520 --> 00:05:21,360
they can just listen to what's on the web page. And Polly is going to narrate it for you, right?

55
00:05:21,360 --> 00:05:26,320
So that's another cognitive service. Then we've got Translate, Amazon Translate, which is

56
00:05:27,120 --> 00:05:31,520
document translation. You can go from one language to another. And we've gotten to

57
00:05:32,160 --> 00:05:36,480
very high quality these days in terms of translation. So you could do a lot of cool things with that.

58
00:05:37,120 --> 00:05:42,080
Then we've got Friendscribe, which is about is a speech to text. We talked about text to speech

59
00:05:42,080 --> 00:05:48,720
before with Polly. But this one is a speech to text. And so this is useful for you to

60
00:05:49,600 --> 00:05:55,200
understand what's being said in a conversation. So that is another cognitive service.

61
00:05:55,840 --> 00:05:59,600
And then we've got yet another one called Comprehend, which is a natural language processing

62
00:05:59,600 --> 00:06:04,160
service. And it's got all kinds of things you could do with it, like sentiment. Given a piece

63
00:06:04,160 --> 00:06:09,520
of unstructured text, it'll tell you what the sentiment is. Is it a negative sentiment?

64
00:06:09,520 --> 00:06:15,600
Is it a positive sentiment? So customers often they use it for reviews, like the capture reviews.

65
00:06:15,600 --> 00:06:20,720
And then they run it through Comprehend. And they understand, like, are people excited about

66
00:06:20,720 --> 00:06:26,240
what whatever it is that the review was for or are they unhappy about it? And we've got things

67
00:06:26,240 --> 00:06:31,840
like targeted sentiment. So, you know, in the same sentence, you could say that the food was great,

68
00:06:31,840 --> 00:06:36,960
but the service was lousy. And so that's that's multiple sentiments within the same sentence.

69
00:06:36,960 --> 00:06:42,080
That's the kind of stuff you could do with Comprehend. You could also do things with Comprehend,

70
00:06:42,080 --> 00:06:47,200
where you can extract entities of interest from unstructured text. Like, let's say you see

71
00:06:47,920 --> 00:06:53,280
there's an article on one company acquiring another company. You could now just look at that

72
00:06:53,280 --> 00:06:59,520
news article and you can extract things like which was the company that was acquired,

73
00:06:59,520 --> 00:07:04,880
who was the CEO of that company? What was the transaction value? All of those kinds of things

74
00:07:04,880 --> 00:07:11,280
can be extracted. So that's kind of what Comprehend does. It helps you understand unstructured text.

75
00:07:11,280 --> 00:07:16,080
Right? So these are sort of the language or the cognitive services that we have. And that's what

76
00:07:16,080 --> 00:07:20,400
we started with at the beginning. These are the basic foundational blocks you would need to build

77
00:07:20,400 --> 00:07:30,080
anything else. And then more recently we've added domain specific services. Like, let me take one

78
00:07:30,080 --> 00:07:37,280
industrial service, for example. Monitoron is an example of it. And this is an AWS service that's

79
00:07:38,080 --> 00:07:43,280
it includes a piece of hardware that comes with it. The hardware is essentially a temperature

80
00:07:43,280 --> 00:07:49,040
and vibration sensor. And it's meant for shop floor technicians that want to monitor

81
00:07:49,680 --> 00:07:54,560
their equipment on the factory floor. And they want to do predictive maintenance. So they

82
00:07:54,560 --> 00:07:59,760
buy this piece of hardware from us and they attach it to some portion of the machine that they want

83
00:07:59,760 --> 00:08:07,760
to monitor. And what we do is we learn the behavior of that part of the machine in terms of vibration

84
00:08:07,760 --> 00:08:14,320
and temperature, which is what the sensors are in that unit. And so over time we'll be able to tell

85
00:08:14,320 --> 00:08:20,720
the tell the person the use of the customer if there's a deviation in behavior. And because

86
00:08:20,720 --> 00:08:28,960
vibration is something that it predicts, it's something that it'll tell you before things are

87
00:08:28,960 --> 00:08:34,240
going to fail. It's it has that predictive nature. So we're able to actually detect issues

88
00:08:34,240 --> 00:08:40,720
way before they actually happen. So, for example, our fulfillment centers, we have conveyor belts

89
00:08:40,720 --> 00:08:46,240
in our fulfillment centers to move the products around. And so it's very important for those belts

90
00:08:46,240 --> 00:08:51,920
to keep running. And there's a lot of rotating parts there. And we use these we use monitoron

91
00:08:51,920 --> 00:08:58,960
there to monitor the health, the whole conveying system. And we've been able to catch failures like two

92
00:08:58,960 --> 00:09:04,080
weeks before they actually happened. So this essentially allows customers to plan the maintenance

93
00:09:04,960 --> 00:09:12,400
rather than you know react in a it's going to be chaos if if just if it just happens and they are

94
00:09:12,400 --> 00:09:19,520
not prepared for it. So that's a very clear that's it's not cognitive. It's something that is

95
00:09:19,520 --> 00:09:26,080
specific to the domain. And it's a large enough segment there and lots of customers have moving

96
00:09:26,080 --> 00:09:33,360
parts and they have equipment that they can afford to fail. And so that's a place where things

97
00:09:33,360 --> 00:09:39,440
like monitoron is being used. And to combat your question on the medical transcription thing,

98
00:09:39,440 --> 00:09:43,840
that's just an extension of the transcription that we have. It just applies to the medical domain.

99
00:09:43,840 --> 00:09:49,440
So I would say that that is a cognitive service because it's okay. It has to do with you know speech

100
00:09:49,440 --> 00:09:54,800
and it has to do with understanding speech. So those are the kinds of things we have we have also

101
00:09:54,800 --> 00:10:00,480
other kinds of services up there at the top layer of the stack. We've got things like contact lens

102
00:10:00,480 --> 00:10:08,720
for Amazon Connect. And what contact lens does is it's a higher level abstraction. It uses transcribe

103
00:10:08,720 --> 00:10:14,880
underneath the scenes that uses comprehend underneath the scenes, but it was built for the call center.

104
00:10:14,880 --> 00:10:20,720
And if you're a call center customer, what you're interested in is you just want to know why are

105
00:10:20,720 --> 00:10:26,160
customers calling me, right? You want to know that you want to know how every call is going. Is it

106
00:10:26,160 --> 00:10:30,720
going? And by the way, you want to know this real time as it's happening, but you may also want to

107
00:10:30,720 --> 00:10:36,480
do it post call, which is called post call analytics. You want to know how your agents are doing. How

108
00:10:36,480 --> 00:10:40,160
are they responding? Are they actually helping the customer? Are they saying the right things at

109
00:10:40,160 --> 00:10:46,160
the right time, right? So you could do all of those things and that's what contact lens does. It

110
00:10:47,040 --> 00:10:52,880
actually implements the actual, it takes the business problem and just implements it using a

111
00:10:52,880 --> 00:10:57,440
combination of these foundational services that I talked about. So we've also got some of those

112
00:10:57,440 --> 00:11:04,160
at the top layer of the stack. And then I've got one more thing and it's called Amazon Kendra.

113
00:11:04,160 --> 00:11:13,120
And that's about search. It's about enterprise search where you've got if you're if you're an

114
00:11:13,120 --> 00:11:18,480
enterprise, you've got a lot of documents within your enterprise. And these documents are typically

115
00:11:18,480 --> 00:11:24,480
siloed. They're not they're not like the documents on the web where everything's linked to each other

116
00:11:24,480 --> 00:11:28,720
and you know, you can you can figure out what people are clicking on and keep track of which

117
00:11:28,720 --> 00:11:33,280
documents are more interesting. Instead here, they're all siloed. They're sitting in different

118
00:11:33,280 --> 00:11:40,080
systems like they're sitting in SharePoint maybe or they're sitting in on your wiki pages or

119
00:11:40,880 --> 00:11:48,560
they're sitting inside Salesforce. And so it's always it's a much harder problem for employees to

120
00:11:48,560 --> 00:11:54,640
find things that they actually want to find within an enterprise. If you've if you've ever tried

121
00:11:54,640 --> 00:12:01,520
the search systems that are at enterprises, they are pretty horrible. And the one that we used to

122
00:12:01,520 --> 00:12:08,000
have inside Amazon wasn't very good either before Kendra. So and this is a space that I know fairly

123
00:12:08,000 --> 00:12:13,360
well. Having worked at a startup that tried to solve this problem 20 something years ago.

124
00:12:13,360 --> 00:12:18,320
Oh wow. Okay. Okay. All right. But it's like you're giving the pitch that we used to give back

125
00:12:18,320 --> 00:12:23,120
that. Okay. Okay. It's one of these problems that just, you know, hasn't been solved and probably

126
00:12:23,120 --> 00:12:28,480
won't ever be solved in the enterprise. Okay. Because it's such a difficult problem. Absolutely.

127
00:12:28,480 --> 00:12:32,560
It's a difficult problem. But I think our tech the technology is there where we were able to solve

128
00:12:32,560 --> 00:12:37,280
it in a very good way. And I'll tell you the kinds of things you can do with Kendra. So Kendra is

129
00:12:37,280 --> 00:12:41,680
again, another higher level abstraction where it just focuses on the business problem, which is search.

130
00:12:41,680 --> 00:12:45,760
Right. You need to be able to help people find what they're looking for and documents that's

131
00:12:45,760 --> 00:12:50,800
sitting in different places. So you can't use all the usual techniques. So what Kendra does.

132
00:12:50,800 --> 00:12:55,440
Number one is it allows you to suck in all of the data from all of these systems. There's connectors,

133
00:12:55,440 --> 00:13:00,160
managed connectors. All you have to do is to provide credentials and it's going to suck in all of

134
00:13:00,160 --> 00:13:05,200
the data and also keep the access rights along with it so that you're not going to show up. They're

135
00:13:05,200 --> 00:13:09,920
not going to show up in search results for people that are not authorized to see certain kinds of

136
00:13:09,920 --> 00:13:14,880
documents. So it keeps it not only sucks the data from these different systems, but it also

137
00:13:14,880 --> 00:13:19,040
keeps all the permissions intact so that it knows what to show and what not to show. The second thing

138
00:13:19,040 --> 00:13:25,920
Kendra does is it understands all of the documents like a human would after reading it. So now

139
00:13:27,360 --> 00:13:31,280
anyone can ask a question and I'm not talking about keyword search. I'm talking about semantic

140
00:13:31,280 --> 00:13:38,160
search here. So I could actually say where is the IT help desk at this Amazon building? Right. I can

141
00:13:38,160 --> 00:13:43,440
just ask that question. And the answer is not going to be like a hundred links where I need to

142
00:13:43,440 --> 00:13:48,720
click on every single document and then hope I find this information in there. It's a Kendra is

143
00:13:48,720 --> 00:13:52,320
actually going to tell me it's the fourth floor right right up there. And of course it's going to

144
00:13:52,320 --> 00:13:57,360
have all the links as well. The documents below like you're used to in a traditional search,

145
00:13:57,360 --> 00:14:02,160
but you don't have to go digging for the answer. If it's confident, it'll show you the answer

146
00:14:02,160 --> 00:14:07,040
right up there. And also in terms of relevance in the document, the documents being the right

147
00:14:07,040 --> 00:14:12,240
documents, given we can't use a lot of signals that are available on the web. We use a lot of

148
00:14:12,240 --> 00:14:18,800
clever techniques there. It's pre-trained on various domains. So it's going to perform really well

149
00:14:18,800 --> 00:14:24,400
out of the box. So there's a lot of our customers that love the ease of setting this up.

150
00:14:25,840 --> 00:14:31,680
We've also made it very easy to set up. You can ingest all of your documents with these

151
00:14:31,680 --> 00:14:37,280
connectors and immediately you've got to search application that you can just go in and try it out.

152
00:14:37,280 --> 00:14:42,240
Okay. And then of course you can embed that into your own websites and things like that. So

153
00:14:42,240 --> 00:14:45,920
that's what can and underneath the scenes, if you're interested in Kendra underneath the scenes,

154
00:14:45,920 --> 00:14:51,520
there's a whole bunch of NLP models. That's what makes it happen. You said it was a hard problem,

155
00:14:51,520 --> 00:14:56,720
and that's rightfully so. Yeah, we were using Verity and I think we started looking at autonomy.

156
00:14:56,720 --> 00:15:02,560
These are all text search engines and the problem that you described if you know a user getting

157
00:15:02,560 --> 00:15:09,520
back tons of links that match, but relevance was the difficult problem. And we were nowhere near

158
00:15:09,520 --> 00:15:14,800
at that time summarization and some of the things that you described. Absolutely. And underneath

159
00:15:14,800 --> 00:15:22,560
the scenes, there's a whole bunch of models. There's a document ranking model. There's an FAQ model.

160
00:15:22,560 --> 00:15:27,360
There's a question answering model and all of these models sort of work together and all of the

161
00:15:27,360 --> 00:15:33,040
complexities is is not I mean the user doesn't have to deal with all of our complexity and putting

162
00:15:33,040 --> 00:15:37,680
all of this together. We make sure that these things work seamlessly together. And of course Kendra

163
00:15:37,680 --> 00:15:43,360
has like learning like continuous learning. It gets better as more people use it. There's explicit

164
00:15:43,360 --> 00:15:47,680
feedback. There's a thumbs up, thumbs down on the search results. If somebody does click it,

165
00:15:47,680 --> 00:15:53,120
we'll keep track of it. It gets better for the enterprise or implicitly we can track.

166
00:15:53,120 --> 00:15:59,280
Okay, they are clicking on this document in from the results. So maybe it wasn't the first one.

167
00:15:59,280 --> 00:16:04,560
It was the third one. And so those kinds of things make sure that it gets better over time,

168
00:16:04,560 --> 00:16:09,440
which is another thing. It's continuous learning. So that's another thing that's made it possible

169
00:16:09,440 --> 00:16:14,640
for customers to find information that they actually want to find and make their employees more

170
00:16:14,640 --> 00:16:19,440
productive. So that's sort of the top the top layer of the stack is essentially a whole bunch of

171
00:16:19,440 --> 00:16:25,040
AI services. There's some foundational ones. Like I said, and then there's some that are

172
00:16:25,040 --> 00:16:33,840
specific to domains like healthcare and industrial manufacturing domains. And then there's a lot

173
00:16:33,840 --> 00:16:38,160
of applications sort of things that solve business problems directly.

174
00:16:39,360 --> 00:16:46,560
So you've described this pretty broad set of services. Yeah. We want to jump into talking about

175
00:16:46,560 --> 00:16:51,760
code whisperer. Code whisperer is not the first AWS service that's dealing with code.

176
00:16:51,760 --> 00:16:54,480
Right. There was code guru and then possibly others. Yes.

177
00:16:55,920 --> 00:17:02,800
Talk a little bit about what AWS has been doing with code and kind of how code whisperer came about.

178
00:17:04,000 --> 00:17:13,440
Yeah. So we've always known that AIML is going to it's going to help a whole variety of

179
00:17:13,440 --> 00:17:19,920
different areas. It's going to find its way into many different areas and it's going to make

180
00:17:19,920 --> 00:17:26,880
things easier in those areas. I remember I think Werner Vogel's who's our CTO. He wrote a blog

181
00:17:26,880 --> 00:17:32,560
article on how AIML has the potential to completely change the way developers do their every day go

182
00:17:32,560 --> 00:17:42,480
about their every day work that they do. So the journey actually started in 2019. And if you look

183
00:17:42,480 --> 00:17:47,360
at I think I should start with what what is a developer's work for look like. That's a great place

184
00:17:47,360 --> 00:17:51,920
to start. And then I can sort of tell you how we went about tackling all of those different pieces.

185
00:17:52,960 --> 00:17:59,280
So the what a developer first does of course he writes he writes code. That's the first sort of

186
00:17:59,280 --> 00:18:05,040
step he writes code. And then the the next thing that they do is get the code reviewed by you know

187
00:18:05,040 --> 00:18:13,440
peers. And some people may even use some automated systems to kind of scan the code and help find

188
00:18:13,440 --> 00:18:18,640
things right. So there's there's there's that piece you get it reviewed. And once you once you

189
00:18:18,640 --> 00:18:24,240
reviewed the code you deploy it. You deploy the whole thing and then you monitor it as the

190
00:18:24,240 --> 00:18:30,240
application is serving the customers that is meant to serve. And at that time you're monitoring

191
00:18:30,240 --> 00:18:35,680
your your applications for cost and performance. And and then you'll maybe find opportunities to

192
00:18:35,680 --> 00:18:41,680
make those better. So those are sort of like key key pieces of a workflow developers workflow.

193
00:18:42,720 --> 00:18:49,360
When we started in 2019 we launched our very first service with that that is related to

194
00:18:49,360 --> 00:18:55,280
developers and and writing code. And and the one we decided to launch at that time it's it was

195
00:18:55,280 --> 00:19:02,480
code guru in 2019. And what code guru does is it helps you find bugs in your code and it helps

196
00:19:02,480 --> 00:19:08,240
you find lines of code that are very expensive expensive in terms of you know the amount of

197
00:19:08,240 --> 00:19:14,320
compute it would need. So that's the kind of stuff that code guru helps. And so you could think of

198
00:19:14,320 --> 00:19:21,840
code guru then as taking care of the you know the quality of the code the reviewing part it helps

199
00:19:21,840 --> 00:19:29,520
in that in that part of the workflow. And then is it considered an ML service or an AI service?

200
00:19:29,520 --> 00:19:34,240
Yeah it is considered an AI service. Yeah so we do have and so in the AI service groups

201
00:19:34,240 --> 00:19:38,240
at the top layer of the stack we also have a developer focused set of services.

202
00:19:38,240 --> 00:19:44,320
Code guru was the first one which we launched in 2019. The second one we launched was a year later

203
00:19:44,320 --> 00:19:50,480
and that's DevOps group. And this is to tackle the monitoring the application once you've deployed it

204
00:19:50,480 --> 00:19:55,520
and you're monitoring it and you're up then you're trying to find places to optimize it.

205
00:19:55,520 --> 00:20:01,760
Right? And so that's what DevOps guru does and we launched that in 2020. And we finally we've

206
00:20:01,760 --> 00:20:09,200
now tackled the writing code part which is what code whisperer is all about. And let me set up

207
00:20:09,200 --> 00:20:13,760
the problem a little bit more. I mean writing code is majority of what a developer would do and

208
00:20:13,760 --> 00:20:21,120
I'm I'm still I'm a I'm a I've always been a very passionate developer and I still write code

209
00:20:21,120 --> 00:20:27,920
I'm not as much as I like to but I still write a lot of code and so the best way to set up this

210
00:20:27,920 --> 00:20:34,640
problem is is to talk through my own experience here like so I what I tend to do with the limited

211
00:20:34,640 --> 00:20:41,360
amount of time that I can get these days I may pick a pet project that I'm either that I want

212
00:20:41,360 --> 00:20:46,640
to automate and I'm doing it mainly to learn because I know that there's new frameworks all the time

213
00:20:46,640 --> 00:20:50,640
and so when I hear about something I want so many new frameworks that's right that's right that's

214
00:20:50,640 --> 00:20:55,760
right so I just want to learn I want to be in touch with the technology because then you know I can

215
00:20:55,760 --> 00:21:02,320
interact better with my people because that's what they do all day long so so what I tried to do

216
00:21:02,880 --> 00:21:08,880
this was about this was maybe a year and a half or year and a half ago I was hearing a lot

217
00:21:08,880 --> 00:21:15,440
about React as a framework for front-end development and the last time I'd done any any front-end

218
00:21:15,440 --> 00:21:23,600
programming was back in I mean the 2011 2012 time frame when you know there were there was this

219
00:21:23,600 --> 00:21:29,120
you know Microsoft had this Windows presentation foundation there was this concept of XAML which

220
00:21:29,120 --> 00:21:35,040
would separate design from from actual implementation the design of how the user interface would

221
00:21:35,040 --> 00:21:39,520
look like from the actual implementation of what would happen when you actually trigger those

222
00:21:39,520 --> 00:21:44,400
those buttons and those drop-downs right and so that was the last time I'd done any kind of front-end

223
00:21:44,400 --> 00:21:48,720
programming but then I've heard I heard so much about React everybody talk about it so I said okay I

224
00:21:48,720 --> 00:21:54,160
need to learn this too I need to see what it is and so I picked a project that I wanted to just

225
00:21:54,160 --> 00:21:59,760
implement I thought it was going to just be a weekend project and so I learned about React

226
00:21:59,760 --> 00:22:09,280
I knew Java but JavaScript I've not done a lot of JavaScript or TypeScript but it was close

227
00:22:09,280 --> 00:22:15,280
enough and so the first issue was of course programming language and the syntax and how things

228
00:22:15,280 --> 00:22:20,480
are they're all different there's so many programming languages these days and new ones coming up

229
00:22:20,480 --> 00:22:26,800
all the time and each one has its own area where it shines and other areas where it's not so great

230
00:22:26,800 --> 00:22:32,720
so that's the first place there's a difference if you're it's a different language that's used

231
00:22:32,720 --> 00:22:39,440
there but then the framework itself the concepts behind React and how do you use it for doing fun

232
00:22:39,440 --> 00:22:44,080
and that was another thing but it wasn't enough for me to just learn about React the moment I once

233
00:22:44,080 --> 00:22:49,360
I finished learning about React I needed to learn about React router which is the thing that would

234
00:22:49,360 --> 00:22:56,800
route interface route incoming calls but that wasn't enough I needed to learn about React redux

235
00:22:56,800 --> 00:23:03,920
right and even that wasn't enough because I like to test my code I like to I shouldn't even say

236
00:23:03,920 --> 00:23:08,640
test I'd like to specify the behavior of the code first and then actually go and implement the code

237
00:23:08,640 --> 00:23:14,240
so I needed to have some testing framework so just I needed to learn about just and that was

238
00:23:14,240 --> 00:23:18,800
also not enough because there's another testing framework for React called enzyme which is very

239
00:23:18,800 --> 00:23:24,960
popular so by the they were all these different frameworks and by the time I'd gone I'd just

240
00:23:24,960 --> 00:23:29,440
spent a whole bunch of weekends learning a lot of these things and I still haven't written anything

241
00:23:29,440 --> 00:23:37,760
meaningful I've not made any progress on on what I wanted to build right and so so that's that's

242
00:23:37,760 --> 00:23:42,480
a big problem that there's just so many different things that developer needs to know and now if

243
00:23:42,480 --> 00:23:49,440
you take this to the cloud world you know with AWS we've have 250 plus services I think today

244
00:23:49,440 --> 00:23:56,560
on AWS that's about 10,000 plus APIs yeah right and by the time we finish this conversation

245
00:23:56,560 --> 00:24:03,040
there'll be a few more all right so so what is a how what is a developer what how does he do this

246
00:24:03,040 --> 00:24:08,720
right and typically what people do is they go to stack overflow yeah okay you're sensing right

247
00:24:08,720 --> 00:24:14,160
and then you're going to look for snippets of code that you can copy paste right so that's the

248
00:24:14,160 --> 00:24:21,200
that's the life of a developer and it's it's it's it's gotten harder and so that's kind of where

249
00:24:21,200 --> 00:24:28,560
code whisperer comes in and what code whisperer is is it's an ML powered coding companion

250
00:24:29,760 --> 00:24:35,360
pair programming companion if you will that just helps developers be more productive

251
00:24:35,360 --> 00:24:44,080
and it doesn't matter where you are in your journey as a developer what what code whisperer helps

252
00:24:44,080 --> 00:24:48,640
you accomplish it helps you magnify your impact no matter where you are in the journey

253
00:24:48,640 --> 00:24:57,120
right and so I think that's the core that's the core reason why we built it yeah I've got to ask

254
00:24:57,120 --> 00:25:03,600
my my suspicion is that yeah most folks listening to this podcast if not all have heard of

255
00:25:03,600 --> 00:25:12,640
co-pilot yep which is kind of collaboration between open AI and GitHub which preceded

256
00:25:13,600 --> 00:25:23,360
code whisperer by sometimes six months maybe did they scoop you or no I mean so you actually

257
00:25:23,360 --> 00:25:27,840
helped me set this up really nicely with your previous question right like so you I talked to

258
00:25:27,840 --> 00:25:32,560
you about the journey we were on yeah developer tools we started in 2019 yeah with code

259
00:25:32,560 --> 00:25:38,240
group right so for me this is a continuation of that of that whole journey so you can you can

260
00:25:38,240 --> 00:25:44,320
you can argue who came first with that story in place right but but let me tell you about things

261
00:25:44,320 --> 00:25:50,640
that we're doing differently with code whisperer we did a few things very differently with code whisperer

262
00:25:51,680 --> 00:25:57,600
the the first thing we did differently if you look at things the other tools that are out there

263
00:25:57,600 --> 00:26:05,280
that do things that are similar you'll often often you'll see you'll see headlines like a lot of

264
00:26:05,280 --> 00:26:12,160
the code about 40% of the code that's generated has security problems security issues security and

265
00:26:12,160 --> 00:26:16,400
licensing are the things that come up right so I'm going to tackle security first but then I'll

266
00:26:16,400 --> 00:26:21,600
come to licensing so you're you're hitting that you're hitting all the sweet spots right now so

267
00:26:21,600 --> 00:26:28,640
yeah so it's on security so what we do is as part of code whisperer which by the way it's part

268
00:26:28,640 --> 00:26:36,000
of the AWS toolkit and the toolkit is a plug-in to all the major IDs so it's we've got it plugs

269
00:26:36,000 --> 00:26:41,600
into which was studio code it also plugs into all the jet brains IDs so it's I think pie charm for

270
00:26:41,600 --> 00:26:49,920
Python and IntelliJ for Java and the web storm and primarily to do completion for APIs and that

271
00:26:49,920 --> 00:26:56,000
kind of thing yes and it's or initially if not yeah we're not talking about completion like

272
00:26:56,000 --> 00:27:01,120
you know like the way IntelliSense used to used to be we're talking about like 20 lines of code

273
00:27:01,120 --> 00:27:07,360
and 25 lines of code so when we get to the demo at the end you'll see I was speaking more generally

274
00:27:07,360 --> 00:27:15,600
about the IDE toolkit yeah that preceded code whisperer correct or is that oh the AWS toolkit

275
00:27:15,600 --> 00:27:21,360
has been there for a long time right and that that was primarily right created to make those

276
00:27:21,360 --> 00:27:27,120
IDs aware of the AWS API exactly exactly right and completion and things like that exactly now

277
00:27:27,120 --> 00:27:32,480
okay now it's just like completion yeah at another level that's right you will show us absolutely

278
00:27:32,480 --> 00:27:38,480
absolutely yeah that's true so and what people just need to do is just download the AWS toolkit

279
00:27:38,480 --> 00:27:44,720
and they have it as part of these IDs we also integrated code whisperer into our lambda console

280
00:27:44,720 --> 00:27:51,520
so lambda is our serverless service so it's where you just type in code and there's no servers to

281
00:27:51,520 --> 00:27:56,800
manage your code just runs and gives you the results right and so there's a lot of code that's

282
00:27:56,800 --> 00:28:01,840
being written on the lambda console so it's plugged in there it's also built in a cloud nine yet

283
00:28:01,840 --> 00:28:07,120
yes it is okay it comes with integration into cloud nine as well that's our web web based IDE

284
00:28:08,000 --> 00:28:14,160
so and we were on a topic and I dig dig rest and went into this one yeah the differentiators right

285
00:28:14,160 --> 00:28:21,200
so this the first one is this the security security thing like for us at AWS security is like

286
00:28:21,200 --> 00:28:27,520
job zero I'm sure you've heard a lot about how seriously we take security and we think we need to

287
00:28:27,520 --> 00:28:34,000
help because security is a very specialized skill most companies have you know a separate group

288
00:28:34,000 --> 00:28:41,040
of experts that are just there for you know for this topic in general and so we have what's called

289
00:28:41,040 --> 00:28:47,520
a security scan that's built into code whisperer so you can you could write code and then

290
00:28:48,720 --> 00:28:54,320
you could you could accept a lot of the code whisperer suggestions and you can also edit it

291
00:28:54,320 --> 00:28:58,960
further but at the very end we've got the security scan thing that you can hit and it's going to tell

292
00:28:58,960 --> 00:29:04,640
you if there are any security issues in the code that that it's scanned so that's the first thing

293
00:29:04,640 --> 00:29:10,080
that we've done differently we want to make sure that the code we generated the code that ends up

294
00:29:10,080 --> 00:29:16,800
coming out at the other end we want to help in in as many ways as we can to make sure that it has

295
00:29:16,800 --> 00:29:24,000
the it doesn't have any security issues and presumably that security scan is also an ML model

296
00:29:24,000 --> 00:29:28,560
that's trained to recognize potential security issues absolutely absolutely yeah yeah yeah

297
00:29:29,200 --> 00:29:34,640
cord guru had this capability when we launched it in 2019 and so we're we're using a lot of that

298
00:29:34,640 --> 00:29:41,120
here as well okay so that's the first area where it's different and the second area where it's

299
00:29:41,120 --> 00:29:49,200
different is in terms of the code it generates I'm sure you've heard of like AI systems like in

300
00:29:50,080 --> 00:29:56,000
with games like chess and go these they come up with new moves that they've never seen before or

301
00:29:56,000 --> 00:30:00,720
new strategies they've never seen before and to a large extent that's what happens when

302
00:30:00,720 --> 00:30:06,480
code whisper is generating code it's generating code it's not seen before but there may be instances

303
00:30:06,480 --> 00:30:12,320
where the code that it generates is close enough to something that it's seen before and code whisper

304
00:30:12,320 --> 00:30:17,680
of course is trained on billions of lines more than billions of lines of code from public repositories

305
00:30:17,680 --> 00:30:23,520
you know from a Amazon repositories code repositories from documentation and forums public forums

306
00:30:23,520 --> 00:30:30,080
and that's it's trained on a lot of stuff so it may have seen something similar before and

307
00:30:30,080 --> 00:30:36,400
then what code whisperer will do is it provides what we call a reference tracker where it lists

308
00:30:37,120 --> 00:30:43,200
the license under which that other similar piece of code was provided and so this way developers

309
00:30:43,200 --> 00:30:50,320
know that the code that is there could potentially have that license so they can decide whether they

310
00:30:50,320 --> 00:30:55,040
want to include that piece of code but they want to accept that suggestion or they don't want to

311
00:30:55,040 --> 00:31:01,120
it depends on you know what the what the company rules are it depends on things like that so

312
00:31:01,120 --> 00:31:04,800
that's a second thing that we're doing differently and the third thing that we're doing differently is

313
00:31:04,800 --> 00:31:16,240
like we we talked about the the number of AWS services right and so first class support for AWS APIs

314
00:31:16,240 --> 00:31:22,000
we know what the most common patterns are in terms of application developers and how they use the cloud

315
00:31:22,000 --> 00:31:30,560
and now you can you can without having to learn about the 10,000 plus APIs without having to worry

316
00:31:30,560 --> 00:31:35,680
about any of that your intent you just express your intent as you will see later you express your

317
00:31:35,680 --> 00:31:42,960
intent either in the form of a good name for the function or in the form of a comment and we're

318
00:31:42,960 --> 00:31:48,560
just going to give you the the best pieces of code that would make the most sense and that and

319
00:31:48,560 --> 00:31:55,680
that point so those are some of the differences we're also pretty we do some aggressive

320
00:31:56,400 --> 00:32:04,000
filtering on on potential harmful stuff and so we're also we've taken a lot of effort to

321
00:32:04,000 --> 00:32:10,160
minimize any issues there as well so these are all the differences for code whisperer at this point

322
00:32:10,160 --> 00:32:19,120
in time you talked about the sources of code that the that code whisperer was trained on you spoke

323
00:32:19,120 --> 00:32:26,960
about them broadly is GitHub included in that that set of repositories anything that's public and

324
00:32:26,960 --> 00:32:33,760
has the right license that's what we use and are there specific licenses or types of licenses that

325
00:32:33,760 --> 00:32:40,480
you filtered on definitely the the pieces of code that are public and are available for consumption

326
00:32:41,360 --> 00:32:46,640
those are part of the the training corp is as well as all of the Amazon code internally that we've

327
00:32:46,640 --> 00:32:53,200
had from over many years that's part of the that's part of it as well and anything that's public

328
00:32:53,200 --> 00:32:59,440
and like documentation that's public those are all pieces of code that goes into the training

329
00:32:59,440 --> 00:33:08,000
I'm imagining that if you're if you're scouring the web crawling the web looking for code

330
00:33:09,040 --> 00:33:15,040
that even the you know identifying code identifying the licenses associated with that code

331
00:33:15,040 --> 00:33:20,080
presents interesting machine learning problems absolutely absolutely yeah there's a lot of

332
00:33:20,080 --> 00:33:25,600
classification problems right there right a whole class of classification problems just on

333
00:33:25,600 --> 00:33:29,920
figuring out which are the ones that you want to use in which are the ones you don't want to use

334
00:33:29,920 --> 00:33:35,120
and of course we've we've used every every technique that we've already have I've talked about

335
00:33:35,120 --> 00:33:40,400
many of our AI services at the top layer of the stack comprehend for example has a document

336
00:33:40,400 --> 00:33:46,560
classification API essentially what you do there is that you decide what you're what you want to

337
00:33:46,560 --> 00:33:51,520
call your category and you give it examples of a certain document that belong to the category

338
00:33:51,520 --> 00:33:56,560
some number of documents that belong to the category define a category two another set of documents

339
00:33:56,560 --> 00:34:00,320
that belong to that category and then you could define a third category called other where you give

340
00:34:00,320 --> 00:34:05,760
it a whole bunch of documents that have no particular category and then comprehend will train a

341
00:34:05,760 --> 00:34:10,240
custom model for you and you're not an ML you don't have to be an ML expert for it it's just

342
00:34:10,240 --> 00:34:15,920
not all accessible through the APIs and then you have now an endpoint where you can send it new

343
00:34:15,920 --> 00:34:22,560
documents and it's going to tell you is it class one or class two or class three and so we we have

344
00:34:22,560 --> 00:34:27,680
a lot of these techniques already in place and we've used that a lot for these kinds of things

345
00:34:27,680 --> 00:34:34,800
okay okay presumably this is based on a large language model like other implementations of code

346
00:34:34,800 --> 00:34:46,240
generation in the text textual context of LLM's one of the big conversations is around bias and

347
00:34:46,240 --> 00:34:51,600
kind of responsible use of those yeah do those same kinds of issues surface when we're talking

348
00:34:51,600 --> 00:34:59,200
about code and if so how yeah so if you if you look at a lot of the transform models they've got

349
00:34:59,200 --> 00:35:04,240
you know they're built on top of each other so there's various checkpoints typically you would

350
00:35:04,240 --> 00:35:09,920
have a large language model that's trained on just text and then you would that would be a checkpoint

351
00:35:10,720 --> 00:35:16,560
and then you would take that and then now train it on code right so if if there's issues with

352
00:35:16,560 --> 00:35:25,520
that core based model they're probably going to linger on and so we've got if you go to amazon.science

353
00:35:26,880 --> 00:35:33,360
it's a one of the websites and you'll see that we published just in the last year alone we

354
00:35:33,360 --> 00:35:38,800
published about 400 papers on responsibility I that deals with all of these topics which we

355
00:35:38,800 --> 00:35:45,520
take very seriously things like bias and fairness we have in in my team we've got we've got

356
00:35:46,720 --> 00:35:53,440
the person that wrote the book on algorithmic bias he's a professor at UPEN his name is Michael

357
00:35:53,440 --> 00:36:02,480
Kerns he'll meet him later today and so we've got all of those experts helping us avoid the pitfalls

358
00:36:02,480 --> 00:36:08,000
as much as possible now this is of course an emerging it's a it's a thing that's still progressing

359
00:36:08,000 --> 00:36:14,640
it's not like we know exactly what we need to do here but we've got the best minds looking at these

360
00:36:14,640 --> 00:36:21,600
topics and helping us figure out how best to deal with those situations I didn't mention some very

361
00:36:21,600 --> 00:36:26,640
aggressive filtering that we're doing to prevent those kinds of situations those kinds of things

362
00:36:26,640 --> 00:36:37,200
were implemented with the guidance of folks like Michael imagining the kind of classic profanity

363
00:36:37,200 --> 00:36:45,280
in comments is one example but are there other yeah I was kind of trying to get some examples of

364
00:36:45,280 --> 00:36:52,400
the way bias types of issues might surface in a code code specific context are there examples

365
00:36:52,400 --> 00:36:56,240
that come to mind of that yeah generally if you're let's say you're writing a function that takes

366
00:36:56,240 --> 00:37:02,000
in a gender and makes a decision based on the gender there could be areas where bias could creep in

367
00:37:02,000 --> 00:37:06,320
and so you've got to explicitly look for situations like that and make sure you don't generate

368
00:37:06,320 --> 00:37:13,120
codes along those paths and that's one another one is of course keys right like so we're talking

369
00:37:13,120 --> 00:37:21,120
about APIs in the cloud a common thing that I see happen a lot is just keys where your secret keys

370
00:37:21,120 --> 00:37:27,280
and your and developers tend to sometimes just put it into the source file including the ones

371
00:37:27,280 --> 00:37:32,560
checked into GitHub right there's a lot of your keys are in there right right and now if you're

372
00:37:32,560 --> 00:37:39,040
learning from all of that and let's say you do want to generate you do want to generate that line

373
00:37:39,680 --> 00:37:45,840
it could up like you could leak a potential key right and so we've taken a lot of care to prevent

374
00:37:45,840 --> 00:37:50,240
those kinds of situations and I'll probably be able to show you that as well when when we actually

375
00:37:50,240 --> 00:37:57,120
get to the demo in the end awesome awesome well this may be a great segue to the demo before we do

376
00:37:57,120 --> 00:38:03,760
any any additional thoughts you want to share before we jump into the demo no I just think that

377
00:38:03,760 --> 00:38:08,960
I told you that I was like I'm a very passionate developer and a developer and it's still am

378
00:38:10,000 --> 00:38:16,560
I really think that this is just the beginning of what we can we're going to be able to do

379
00:38:16,560 --> 00:38:21,040
and this is going to make developers lives a lot more easier and I think they can focus most

380
00:38:21,040 --> 00:38:26,960
developers that I know they want to focus on the the higher value problem they're less interested in

381
00:38:26,960 --> 00:38:32,640
the boilerplate you know things that a framework may dictate and that's that's the that's the

382
00:38:32,640 --> 00:38:38,720
that's the bad part of writing code it's the the the real cool part is the business logic the

383
00:38:38,720 --> 00:38:44,560
that's the cool parts that you want to actually write and so I think this is going to be this is

384
00:38:44,560 --> 00:38:47,840
going to be in a space to watch going forward there's going to be a lot of innovation coming

385
00:38:48,640 --> 00:38:54,720
on this topic and I just I'm very excited for what's to come in this area no just to probe into

386
00:38:54,720 --> 00:39:02,480
that a little bit do you do you have a gut feel for where you think the innovation will come first or

387
00:39:02,480 --> 00:39:07,840
kind of what the you know what the path looks like we've got some ideas on where the path looks

388
00:39:07,840 --> 00:39:14,000
like and I'm sure you know that like 90% of what we do it it it it is driven by our customers it's

389
00:39:14,000 --> 00:39:20,080
what they're asking us for and about 10% of the time we think on their behalf and and we do

390
00:39:20,080 --> 00:39:28,000
something right based on that the obvious next steps will just be support for the more popular

391
00:39:28,720 --> 00:39:36,400
languages I think we're currently support TypeScript JavaScript Java Python is what we support

392
00:39:36,400 --> 00:39:40,720
so obviously there's going to be an element of supporting some of the key languages that's

393
00:39:40,720 --> 00:39:46,560
definitely going to be one that's going to be there but I think it's just going to get better

394
00:39:46,560 --> 00:39:54,320
and better in terms of in terms of the actual code that's generated today developers can accept

395
00:39:54,320 --> 00:40:00,400
you know they can accept there's going to be options so when when code whisperer generates

396
00:40:01,520 --> 00:40:06,720
generates code it's it gives you it gives you x number of options you can actually scroll through

397
00:40:06,720 --> 00:40:12,720
it and see which ones sort of fit your style and and and what do you want to include those those

398
00:40:12,720 --> 00:40:19,280
suggestions will get better over time and I think it'll just make people's lives a lot easier and

399
00:40:20,320 --> 00:40:26,320
best practices you know we can capture best practices I mentioned already we kind of know the

400
00:40:26,320 --> 00:40:34,240
patterns of how AWS APIs are accessed for application development and if you use there's there's

401
00:40:34,240 --> 00:40:38,960
best practices in terms of how you put them together how you do error checking and things

402
00:40:38,960 --> 00:40:44,960
like that and so those things can come more and more out of the box and this will this will make

403
00:40:44,960 --> 00:40:51,840
it easier for even you know developers that are earlier in their journey to generate pieces of code

404
00:40:51,840 --> 00:40:57,440
that are pretty robust so that's pretty much what I can share at this point in time.

405
00:40:57,440 --> 00:41:03,040
Awesome awesome well let's let's jump into the demo okay all right what are we looking at here

406
00:41:03,040 --> 00:41:09,360
Vossy all right you're looking at jet rains pie charm and I think this one because Python is not

407
00:41:09,360 --> 00:41:14,480
a language that I like but that that's exactly why why you know code whisperer is very useful

408
00:41:15,840 --> 00:41:21,840
so let me let me just alienate it I know I know I know I know I just don't like you might

409
00:41:21,840 --> 00:41:31,520
be able to redeem yourself by saying you love Julie okay all right anyway so I'm gonna be doing

410
00:41:31,520 --> 00:41:36,720
a series of demos in each one sort of takes it up a notch a little bit that's what I'm gonna try

411
00:41:36,720 --> 00:41:44,000
and do here so the first one it's it's kind of going to be a utility kind of thing that I think

412
00:41:44,000 --> 00:41:51,520
most developers want to do what they end up doing at some point right so code whisperer is enabled

413
00:41:51,520 --> 00:41:56,400
and the AWS toolkit has been installed you guys can see it on the left side of the screen so I'm

414
00:41:56,400 --> 00:42:12,240
gonna just start by saying a function to convert a JSON file to and I you see code whisperer

415
00:42:12,240 --> 00:42:21,120
just popped up even my comment all right so I'm just gonna accept that and I want to specify

416
00:42:21,120 --> 00:42:30,480
a few more things right I want to say things like the keys of the JSON file are the column names

417
00:42:30,480 --> 00:42:35,920
again you see that code whisperer popped that up I'm gonna accept that as well and then I don't

418
00:42:35,920 --> 00:42:43,600
care what the value is much and now let's see let's see what code whisperer does it just generates

419
00:42:43,600 --> 00:42:55,280
the function name I'm just gonna accept it and there is a set of code a bunch of code that

420
00:42:55,280 --> 00:43:02,320
it just popped up and then you can see this little thing at the bottom and that those are the choices

421
00:43:02,320 --> 00:43:11,200
it says 104 and so I could probably go through the various options it's given me and and try and

422
00:43:11,200 --> 00:43:18,960
pick the one that I like the most and I'm probably gonna pick this one it's you can see what it's

423
00:43:18,960 --> 00:43:24,160
doing here it's taking the keys it's writing the header with the keys just like we said and then

424
00:43:24,160 --> 00:43:31,120
it's writing all the rows so I'm just gonna pick that and so I guess that's kind of done I don't

425
00:43:31,120 --> 00:43:37,280
want to print anything and then let's if we just go in here to an empty area and then see

426
00:43:37,280 --> 00:43:44,480
what else it's going to you can see that what it did here is now it's it's saying a function

427
00:43:44,480 --> 00:43:49,200
to convert a CSV file to a JSON file so it's the opposite of what we just did which is a common

428
00:43:49,200 --> 00:43:55,360
thing that most developers do like they they write a transformation from one side to the other and

429
00:43:55,360 --> 00:44:02,240
it's very likely want the transformation from the other side as well so we can continue doing that

430
00:44:02,240 --> 00:44:08,320
and we'll see what happens here I don't I don't want that thing so

431
00:44:10,480 --> 00:44:16,000
and there's the function name CSV to JSON I accept it and then I keep going

432
00:44:17,600 --> 00:44:23,840
and again I've got a bunch of options here you can see it uses a dict reader on on the CSV data

433
00:44:23,840 --> 00:44:29,280
and then it's dumping it into the JSON file I could just accept that and I'd be done with it so

434
00:44:29,280 --> 00:44:33,680
that's sort of the first little demo that I wanted to start with so that you get used to the

435
00:44:33,680 --> 00:44:44,560
interface you kind of see what happens yeah what I'll do next is I'll go to a more obscure API

436
00:44:44,560 --> 00:44:50,240
and I say obscure because most most developers that use AWS they've used the s3 they want the

437
00:44:50,240 --> 00:44:56,160
typical examples are upload a file to s3 or they're doing some EC2 stuff right and so

438
00:44:56,160 --> 00:45:02,160
transcribe is one of my services the speech to text service unless you're an AI developer

439
00:45:02,720 --> 00:45:06,800
or unless you're a developer that wants AI in your app you probably won't know about it and

440
00:45:06,800 --> 00:45:15,200
it's and so this is a situation exactly like that so what I'll start with and because we're

441
00:45:15,200 --> 00:45:22,560
going to be demonstrating use of an AWS API here I'll start with you know variables for

442
00:45:22,560 --> 00:45:34,560
AWS credentials right and you can see there's the access key but you also see that it's not

443
00:45:34,560 --> 00:45:39,440
giving me the key itself and even though it may have seen some keys in the training data

444
00:45:41,040 --> 00:45:49,840
there's a secret key probably a region and I guess I don't care anymore then the next thing I'll do

445
00:45:49,840 --> 00:46:02,480
is write a function to transcribe after type write transcribe a German you put it popped up audio

446
00:46:02,480 --> 00:46:09,680
file but I want to say a German audio file to text and you can see it popped that as well right

447
00:46:11,680 --> 00:46:17,520
so it's giving me the name of the function I accepted it and this is going to be some elaborate

448
00:46:17,520 --> 00:46:25,120
it's going to just going to be more elaborate so we just wait for it you can see a lot of stuff

449
00:46:25,120 --> 00:46:31,520
happening here the bottom client is created with the transcribe thing that's typically how you

450
00:46:31,520 --> 00:46:36,800
can see that the access keys and the secret keys in the region from above the variables are being

451
00:46:36,800 --> 00:46:44,720
used to generate that that that variable and then you can see the cool thing here it understands

452
00:46:44,720 --> 00:46:54,320
the locale it's dd and so it's there's you don't have to look up the documentation there's a transcribe

453
00:46:54,320 --> 00:47:02,080
start transcription job right and then here it returns the job right and so there's probably more

454
00:47:02,080 --> 00:47:08,880
options there's probably more options down there but I'm just going to now if you yeah speaking of

455
00:47:08,880 --> 00:47:15,520
options if you knew a little bit about transcribe and say previously defined a variable with a

456
00:47:15,520 --> 00:47:20,480
channel type which is one of those parameters that transcribe will take would it have inserted

457
00:47:20,480 --> 00:47:26,080
that in the right place yeah it's absolutely so the way code whisperer works is it gets context

458
00:47:26,080 --> 00:47:34,320
in the call and context for it is depends on where the cursor is it's code code around that cursor

459
00:47:34,320 --> 00:47:41,840
and it could even be code in other files in the project and so it uses that to figure out what's

460
00:47:41,840 --> 00:47:45,840
the best way to do it and some of the options may include it some of the options may not include

461
00:47:45,840 --> 00:47:54,400
it right so that's kind of how it works so let me let me accept this and maybe what I rather

462
00:47:54,400 --> 00:48:05,760
than returning the transcribe job maybe what I could do is you know just delete this thing here and see

463
00:48:05,760 --> 00:48:11,360
what what it would generate maybe it would generate the same thing but okay wait for the transcription

464
00:48:11,360 --> 00:48:21,360
to complete okay while true and let's see what happens yeah okay so it's actually parsing the thing

465
00:48:21,360 --> 00:48:28,320
going into it multiple levels to figure out the status sleeping for a while and and so on and so

466
00:48:28,320 --> 00:48:35,520
forth and so you could keep going with this and it's discoverability of these APIs it's now a lot

467
00:48:35,520 --> 00:48:39,760
easier you don't have to go to stack overflow and look for the snippet the snippets right there on the

468
00:48:39,760 --> 00:48:44,880
IDE all right so that's the second demo that I wanted to show and I wanted to show how it would

469
00:48:44,880 --> 00:48:51,760
work on a on an AWS API that's not very common for people to know about then the last thing that I

470
00:48:51,760 --> 00:48:57,120
probably would do and this is where we let's actually create something that we actually run and see

471
00:48:58,000 --> 00:49:06,880
if it works right and so and what I'm going to try and do is write a function to plot

472
00:49:06,880 --> 00:49:22,480
sign of sign of x and let's say two star cosine of x come on with red and blue

473
00:49:24,640 --> 00:49:34,000
dashes for the range minus pi to pi all right that's a lot of stuff yeah we always have to

474
00:49:34,000 --> 00:49:41,520
pray to the demo gods so to speak and but you would think that that given the nature of what's

475
00:49:41,520 --> 00:49:48,720
happening it'd be fairly robust to typos is that what you find in general I in general I'm when

476
00:49:48,720 --> 00:49:52,560
I'm writing code I'm writing it for the next person that's going to be looking at it more than

477
00:49:52,560 --> 00:49:59,600
anything else so I there's this whole philosophy and I could talk about it for hours a good code

478
00:49:59,600 --> 00:50:07,200
base is is one where let's say you have a new developer in the team that person can add a new

479
00:50:07,200 --> 00:50:12,640
feature in the shortest amount of time and I think that's possible only if your code base is self

480
00:50:12,640 --> 00:50:20,480
explanatory it's decoupled isolated things responsibilities are isolated so yeah I even if I

481
00:50:21,120 --> 00:50:25,840
you could say okay why can't we correct the typos maybe that would be a future thing that we do

482
00:50:25,840 --> 00:50:31,840
it should be possible to do I don't see a reason why that won't work but in general the context

483
00:50:31,840 --> 00:50:37,040
is a lot of stuff and so if let's say there's a spelling error in fact you know what what I'm

484
00:50:37,040 --> 00:50:41,920
going to do right now let me actually take this let me actually mess around with it I don't want

485
00:50:41,920 --> 00:50:47,360
that argument right so it generated that I'm actually going to change that and now let's see what

486
00:50:47,360 --> 00:50:54,320
it does it just generated all that stuff right and you could see it's using minus pi to pi and

487
00:50:54,320 --> 00:51:01,920
it's got the red dashes on red dash on sign and the blue on the let me just accept it and then

488
00:51:02,560 --> 00:51:10,720
if I go here yeah so it's calling that function so now if I just run this thing let's see what

489
00:51:10,720 --> 00:51:18,320
happens if it's even correct and there it is all right so you see you see the the program actually

490
00:51:18,320 --> 00:51:25,600
running so that's kind of the the last thing that I wanted to show that you it can do things that

491
00:51:25,600 --> 00:51:32,400
are pretty elaborate and in the end though the the developer is responsible for the code and I

492
00:51:32,400 --> 00:51:39,280
think the person needs to know what to accept you know with the options how does he want to take

493
00:51:39,280 --> 00:51:45,680
this further so that's why we call it a it's more of a companion then it's not the thing leading

494
00:51:45,680 --> 00:51:51,760
the way it's the thing that's helping you not have to go look look things up in multiple places yeah

495
00:51:52,560 --> 00:51:58,960
so your typo not right right but I think that's definitely something that we should be able to

496
00:51:58,960 --> 00:52:08,960
handle so you've just given me a good idea for our roadmap cool that's all I had to show

497
00:52:08,960 --> 00:52:16,960
well Vasi great conversation and great demo thanks so much for taking the time to share with

498
00:52:16,960 --> 00:52:22,400
us a bit about code whisperer and more broadly the AI services portfolio and the way you think about

499
00:52:22,400 --> 00:52:39,680
all those things it was a pleasure thanks for having me sir my pleasure thank you all right bye bye

