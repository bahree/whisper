1
00:00:00,000 --> 00:00:09,720
Alright everyone, welcome to another episode of the Twimmel AI podcast.

2
00:00:09,720 --> 00:00:15,960
I am your host Sam Charmington, and today I'm joined by Vasey Filament, Vasey is Vice President

3
00:00:15,960 --> 00:00:19,720
and General Manager of Machine Learning and AI at Amazon.

4
00:00:19,720 --> 00:00:23,400
Before we get going, be sure to take a moment to hit that subscribe button wherever you're

5
00:00:23,400 --> 00:00:25,040
listening to today's show.

6
00:00:25,040 --> 00:00:26,600
Vasey, welcome to the podcast.

7
00:00:26,600 --> 00:00:28,160
Thanks for having me Sam.

8
00:00:28,160 --> 00:00:32,920
I'm super excited for this discussion for those who, well, you don't know yet, but you're

9
00:00:32,920 --> 00:00:33,920
about to know.

10
00:00:33,920 --> 00:00:38,960
This is a very special interview because it is the first in-person interview I've

11
00:00:38,960 --> 00:00:45,440
done since NURPS in Vancouver in 2019.

12
00:00:45,440 --> 00:00:53,240
I happen to be in New York for some meetings with AWS as was Vasey, and here we are.

13
00:00:53,240 --> 00:00:58,200
We're going to spend some time today talking about the recently announced Amazon Code

14
00:00:58,200 --> 00:01:03,880
Whisperer, Coding Companion, and as a bonus, Vasey will be doing a demo for me that

15
00:01:03,880 --> 00:01:08,320
you'll be able to catch on YouTube towards the end of our interview.

16
00:01:08,320 --> 00:01:10,840
Vasey, let's get started with some background.

17
00:01:10,840 --> 00:01:13,480
Tell us a little bit about your role at AWS.

18
00:01:13,480 --> 00:01:20,320
Yeah, so I'm Vice President at AWS and I'm responsible for our AI services.

19
00:01:20,320 --> 00:01:25,000
My background is machine learning, back in the 90s, I did a PhD in Computer Science from

20
00:01:25,000 --> 00:01:29,120
the University of Maryland, and I chose to do it in machine learning.

21
00:01:29,120 --> 00:01:31,960
It wasn't a common thing to do at that time.

22
00:01:31,960 --> 00:01:36,640
A lot of my friends were asking me what, what the heck is machine learning?

23
00:01:36,640 --> 00:01:38,000
Why are you doing machine learning?

24
00:01:38,000 --> 00:01:43,120
You should be doing databases or you should be doing operating systems.

25
00:01:43,120 --> 00:01:45,520
But I have to say that I'm the one with the last laugh.

26
00:01:45,520 --> 00:01:50,280
I'm kind of glad that I did it at that time and serving me really well right now.

27
00:01:50,280 --> 00:01:56,800
In your role at AWS, what aspects of ML and AI are you responsible for?

28
00:01:56,800 --> 00:02:01,680
Yeah, I'm responsible for a lot of the services that we have at the top layer of the stack.

29
00:02:01,680 --> 00:02:06,240
Are you familiar with the three layers of the stack, the way we think about machine learning?

30
00:02:06,240 --> 00:02:07,240
Absolutely.

31
00:02:07,240 --> 00:02:13,240
Yeah, so we can recap that infrastructure at the bottom, develop or data sciences,

32
00:02:13,240 --> 00:02:18,040
focus tools and middle, and cognitive services for lack of a better order.

33
00:02:18,040 --> 00:02:19,520
AI services at the top.

34
00:02:19,520 --> 00:02:20,520
Right.

35
00:02:20,520 --> 00:02:23,400
And I'm responsible for the top layer there, AI services layer.

36
00:02:23,400 --> 00:02:24,640
It's not just cognitive.

37
00:02:24,640 --> 00:02:28,400
There's a set of cognitive language services at the top layer.

38
00:02:28,400 --> 00:02:30,920
There's also a bunch of industrial services.

39
00:02:30,920 --> 00:02:34,920
So there's a whole variety of services at the top layer of the stack.

40
00:02:34,920 --> 00:02:39,760
The difference though with the middle layer is that the top layer is more managed experience

41
00:02:39,760 --> 00:02:44,440
and people using those services don't have to be experts in machine learning.

42
00:02:44,440 --> 00:02:48,560
All they need to know is, here's my application and here's how it's going to make

43
00:02:48,560 --> 00:02:50,520
it smarter.

44
00:02:50,520 --> 00:02:55,320
And I need this capability that I could just plug into my application to make it smarter.

45
00:02:55,320 --> 00:02:58,720
And then they can just go and use it just like they do today.

46
00:02:58,720 --> 00:03:04,480
They access a web service for compute or the access of web service for storage.

47
00:03:04,480 --> 00:03:08,800
They can now access an AI service in the same exact way.

48
00:03:08,800 --> 00:03:13,360
They can insert it into their own applications and make their applications faster.

49
00:03:13,360 --> 00:03:18,520
So let's dig in a little bit into the distinction between cognitive and industry.

50
00:03:18,520 --> 00:03:26,520
So the non-cognitive services would be things like, I know AWS has, for example,

51
00:03:26,520 --> 00:03:31,200
medical transcription, would you consider that non-cognitive or you think you're not because

52
00:03:31,200 --> 00:03:32,200
of the scenario.

53
00:03:32,200 --> 00:03:33,200
Okay, okay.

54
00:03:33,200 --> 00:03:35,200
Let me describe that to you.

55
00:03:35,200 --> 00:03:36,200
Okay.

56
00:03:36,200 --> 00:03:40,960
When we started out, the first few services we launched, I would call them like

57
00:03:40,960 --> 00:03:46,840
foundational to any machine learning business or a unit.

58
00:03:46,840 --> 00:03:52,320
And they're foundational in the sense that they capture a lot of the cognitive things

59
00:03:52,320 --> 00:03:53,520
that humans are able to do.

60
00:03:53,520 --> 00:04:00,200
So to give you an example, we started with Lex, Lex is sort of the guts of Alexa.

61
00:04:00,200 --> 00:04:04,120
Essentially, it's the two ways removed from Alexa and what's inside it's Lex.

62
00:04:04,120 --> 00:04:06,320
Not many people know that, but now they do actually.

63
00:04:06,320 --> 00:04:07,320
It all makes sense.

64
00:04:07,320 --> 00:04:08,320
Right.

65
00:04:08,320 --> 00:04:09,320
Right.

66
00:04:09,320 --> 00:04:14,360
And Lex is our conversational AI platform and what people can do with it is they could

67
00:04:14,360 --> 00:04:19,320
build their own Alexa, if they wanted to, or they could build a chatbot and insert it into

68
00:04:19,320 --> 00:04:21,160
their website.

69
00:04:21,160 --> 00:04:25,960
And so that Lex is something that would understand both text input as well as speech input.

70
00:04:25,960 --> 00:04:31,160
So they build the bot just once and then they can insert it into a call center conversation

71
00:04:31,160 --> 00:04:36,960
so that it can take the call and maybe take care of the customer that's calling.

72
00:04:36,960 --> 00:04:41,920
So that's Lex, which is a conversational part, that's definitely a cognitive service.

73
00:04:41,920 --> 00:04:43,880
We call it a language service.

74
00:04:43,880 --> 00:04:47,160
I think Gardner calls it a language service too.

75
00:04:47,160 --> 00:04:51,760
So we also have Poly, Poly is our text to speech service.

76
00:04:51,760 --> 00:04:55,400
Alexa's voice is actually a Poly voice.

77
00:04:55,400 --> 00:05:00,000
But customers now have the capability to have their own voices.

78
00:05:00,000 --> 00:05:04,880
They can pick from one of the many languages that we support and the different kinds of

79
00:05:04,880 --> 00:05:07,160
voices we may have for each of the languages.

80
00:05:07,160 --> 00:05:10,640
And then they could just use it for various applications in a common one.

81
00:05:10,640 --> 00:05:15,040
The use it for is they just put this thing on a web page and so when people are driving

82
00:05:15,040 --> 00:05:20,480
their cars, they can just listen to what's on the web page and Poly is going to narrate it

83
00:05:20,480 --> 00:05:21,480
for you.

84
00:05:21,480 --> 00:05:23,080
So that's another cognitive service.

85
00:05:23,080 --> 00:05:28,320
Then we've got Translate, Amazon Translate, which is a document translation.

86
00:05:28,320 --> 00:05:33,520
You can go from one language to another and we've gotten to very high quality these days

87
00:05:33,520 --> 00:05:35,040
in terms of translation.

88
00:05:35,040 --> 00:05:37,440
So you can do a lot of cool things with that.

89
00:05:37,440 --> 00:05:41,120
Then we've got Transcribe, which is about is a speech to text.

90
00:05:41,120 --> 00:05:46,680
We talked about text to speech before with Poly, but this one is a speech to text.

91
00:05:46,680 --> 00:05:53,440
And so this is useful for you to understand what's being said in a conversation.

92
00:05:53,440 --> 00:05:56,040
So that is another cognitive service.

93
00:05:56,040 --> 00:05:59,680
And then we've got yet another one called Comprehend, which is a natural language processing

94
00:05:59,680 --> 00:06:00,680
service.

95
00:06:00,680 --> 00:06:03,840
And it's got all kinds of things you could do with it, like sentiment.

96
00:06:03,840 --> 00:06:08,200
I'm going to piece of unstructured text, it'll tell you what the sentiment is.

97
00:06:08,200 --> 00:06:09,680
Is it a negative sentiment?

98
00:06:09,680 --> 00:06:10,880
Is it a positive sentiment?

99
00:06:10,880 --> 00:06:15,800
So customers often they use it for reviews, like the capture reviews.

100
00:06:15,800 --> 00:06:18,000
And then they run it through Comprehend.

101
00:06:18,000 --> 00:06:23,000
And they understand like our people excited about what what whatever it is that the review

102
00:06:23,000 --> 00:06:25,400
was for or they unhappy about it.

103
00:06:25,400 --> 00:06:27,560
And we've got things like targeted sentiment.

104
00:06:27,560 --> 00:06:32,600
So you know, in the same sentence, you could say that the food was great, but the service

105
00:06:32,600 --> 00:06:34,000
was lousy.

106
00:06:34,000 --> 00:06:37,880
And so that's multiple sentiments within the same sentence.

107
00:06:37,880 --> 00:06:40,600
That's the kind of stuff you could do with Comprehend.

108
00:06:40,600 --> 00:06:45,160
You could also do things with Comprehend where you can extract entities of interest from

109
00:06:45,160 --> 00:06:46,160
unstructured text.

110
00:06:46,160 --> 00:06:52,200
Like let's say you see there's an article on one company acquiring another company.

111
00:06:52,200 --> 00:06:57,960
You could now just look at that news article and you can extract things like which was

112
00:06:57,960 --> 00:07:02,320
the company that was acquired, who was the CEO of that company.

113
00:07:02,320 --> 00:07:06,200
There was a transaction value, all of those kinds of things can be extracted.

114
00:07:06,200 --> 00:07:08,560
So that's kind of what Comprehend does.

115
00:07:08,560 --> 00:07:11,720
It helps you understand unstructured text.

116
00:07:11,720 --> 00:07:15,680
So these are sort of the language or the cognitive services that we have.

117
00:07:15,680 --> 00:07:18,280
And that's what we started with at the beginning.

118
00:07:18,280 --> 00:07:22,320
These are the basic foundational blocks you would need to build anything else.

119
00:07:22,320 --> 00:07:30,560
And then more recently, we've added domain specific services, like let me take one industrial

120
00:07:30,560 --> 00:07:35,280
service for example, monotron is an example of it.

121
00:07:35,280 --> 00:07:41,560
And this is an AWS service that's, it includes a piece of hardware that comes with it.

122
00:07:41,560 --> 00:07:45,680
The hardware is essentially a temperature and vibration sensor.

123
00:07:45,680 --> 00:07:50,920
And it's meant for shop floor technicians that want to monitor their equipment on the

124
00:07:50,920 --> 00:07:54,000
factory floor and they want to do predictive maintenance.

125
00:07:54,000 --> 00:07:58,440
So they buy this piece of hardware from us and they attach it to some portion of the

126
00:07:58,440 --> 00:08:02,680
machine that they want to monitor.

127
00:08:02,680 --> 00:08:07,840
And what we do is we learn the behavior of that part of the machine in terms of vibration

128
00:08:07,840 --> 00:08:12,040
and temperature, which is what the sensors are in that unit.

129
00:08:12,040 --> 00:08:17,960
And so over time, we'll be able to tell the person, the user, the customer, if there's

130
00:08:17,960 --> 00:08:20,400
a deviation in behavior.

131
00:08:20,400 --> 00:08:28,040
And because vibration is something that it predicts, it's something that it tell you

132
00:08:28,040 --> 00:08:32,120
before things are going to fail, it has that predictive nature.

133
00:08:32,120 --> 00:08:37,040
So we're able to actually detect issues way before they actually happen.

134
00:08:37,040 --> 00:08:42,760
So for example, our fulfillment centers, we have conveyor belts in our fulfillment centers to

135
00:08:42,760 --> 00:08:44,560
move the products around.

136
00:08:44,560 --> 00:08:47,320
And so it's very important for those belts to keep running.

137
00:08:47,320 --> 00:08:49,520
And there's a lot of rotating parts there.

138
00:08:49,520 --> 00:08:56,000
And we use these, we use monotron there to monitor the health, the whole conveyance system.

139
00:08:56,000 --> 00:09:01,280
And we've been able to catch failures like two weeks before they actually happened.

140
00:09:01,280 --> 00:09:08,600
So this essentially allows customers to plan the maintenance rather than, you know, react.

141
00:09:08,600 --> 00:09:13,600
It's going to be chaos if it just happens and they are not prepared for it.

142
00:09:13,600 --> 00:09:22,120
So that's a very clear, it's not cognitive, it's something that is specific to the domain.

143
00:09:22,120 --> 00:09:27,360
And it's a large enough segment there and lots of customers have moving parts.

144
00:09:27,360 --> 00:09:31,640
And they have equipment that they can afford to fail.

145
00:09:31,640 --> 00:09:35,680
And so that's a place where things like monotron is being used.

146
00:09:35,680 --> 00:09:40,640
And to combat your question on the medical transcription thing, that's just an extension

147
00:09:40,640 --> 00:09:42,360
of the transcription that we have.

148
00:09:42,360 --> 00:09:44,000
It just applies to the medical domain.

149
00:09:44,000 --> 00:09:49,560
So I would say that that is a cognitive service because it has to do with, you know, speech

150
00:09:49,560 --> 00:09:53,080
and it has to do with understanding speech.

151
00:09:53,080 --> 00:09:54,440
So those are the kinds of things we have.

152
00:09:54,440 --> 00:09:57,840
We have also other kinds of services up there at the top layer of the stack.

153
00:09:57,840 --> 00:10:02,920
We've got things like contact lens for Amazon connect.

154
00:10:02,920 --> 00:10:07,320
And what contact lens does is it's a higher level abstraction.

155
00:10:07,320 --> 00:10:12,240
It uses transcribe underneath the scenes, it uses comprehend underneath the scenes.

156
00:10:12,240 --> 00:10:15,240
But it was built for the call center.

157
00:10:15,240 --> 00:10:20,400
And if you're a call center customer, what you're interested in is you just want to know

158
00:10:20,400 --> 00:10:22,440
why are customers calling me, right?

159
00:10:22,440 --> 00:10:27,920
You want to know that you want to know how every call is going, is it going, and by the way,

160
00:10:27,920 --> 00:10:31,440
you want to know this real time as it's happening, but you may also want to do it post

161
00:10:31,440 --> 00:10:34,840
call, which is called post call analytics.

162
00:10:34,840 --> 00:10:38,160
You want to know how your agents are doing, how are they responding, are they actually

163
00:10:38,160 --> 00:10:42,160
helping the customer, are they saying the right things at the right time, right?

164
00:10:42,160 --> 00:10:46,600
So you could do all of those things, and that's what contact lens does.

165
00:10:46,600 --> 00:10:52,720
It actually implements the actual, it takes the business problem, and just implements it,

166
00:10:52,720 --> 00:10:55,520
using a combination of these foundational services that I talked about.

167
00:10:55,520 --> 00:10:59,760
So we've also got some of those at the top layer of the stack.

168
00:10:59,760 --> 00:11:07,960
And then I've got one more thing, and it's called Amazon Kendra, and that's about search.

169
00:11:07,960 --> 00:11:15,400
It's about enterprise search, where if you're an enterprise, you've got a lot of documents

170
00:11:15,400 --> 00:11:19,800
within your enterprise, and these documents are typically siloed.

171
00:11:19,800 --> 00:11:24,080
They're not, they're not like the documents on the web, where everything's linked to each

172
00:11:24,080 --> 00:11:29,240
other, and you can figure out what people are clicking on and keep track of which documents

173
00:11:29,240 --> 00:11:30,960
are more interesting.

174
00:11:30,960 --> 00:11:35,000
Instead here, they're all siloed, they're sitting in different systems, like they're sitting

175
00:11:35,000 --> 00:11:42,280
in SharePoint, maybe, or they're sitting in your wiki pages, or they're sitting in

176
00:11:42,280 --> 00:11:49,720
inside Salesforce, and so it's always a much harder problem for employees to find things

177
00:11:49,720 --> 00:11:53,000
that they actually want to find within an enterprise.

178
00:11:53,000 --> 00:12:00,000
If you've ever tried the search systems that are an enterprises, they are pretty horrible.

179
00:12:00,000 --> 00:12:05,360
And the one that we used to have inside Amazon wasn't very good either, before Kendra.

180
00:12:05,360 --> 00:12:10,160
So, and this is a space that I know fairly well, having worked at a startup that tried

181
00:12:10,160 --> 00:12:15,640
to solve this problem 20 something years ago, okay, okay, all right.

182
00:12:15,640 --> 00:12:19,840
But it's like you're giving the pitch that we used to give back that, because one of these

183
00:12:19,840 --> 00:12:25,880
problems that just hasn't been solved, and probably won't ever be solved in the enterprise.

184
00:12:25,880 --> 00:12:28,080
Because it's such a difficult problem.

185
00:12:28,080 --> 00:12:32,560
It's a difficult problem, but I think the technology is there where we were able to solve

186
00:12:32,560 --> 00:12:36,760
it in a very good way, and I'll tell you the kinds of things you can do with Kendra.

187
00:12:36,760 --> 00:12:40,520
So Kendra is, again, another higher level of abstraction, where it just focuses on the business

188
00:12:40,520 --> 00:12:42,080
problem, which is search, right.

189
00:12:42,080 --> 00:12:45,720
You need to be able to help people find what they're looking for, and documents are

190
00:12:45,720 --> 00:12:49,840
sitting in different places, so you can't use all the usual techniques.

191
00:12:49,840 --> 00:12:54,240
So what Kendra does, number one, is it allows you to suck in all of the data from all

192
00:12:54,240 --> 00:12:58,240
of these systems, there's connectors, manage connectors, all you have to do is to provide

193
00:12:58,240 --> 00:13:02,360
credentials, and it's going to suck in all of the data, and also keep the access rights

194
00:13:02,360 --> 00:13:06,240
along with it, so that you're not going to show up, they're not going to show up in search

195
00:13:06,240 --> 00:13:10,520
results for people that are not authorized to see certain kinds of documents.

196
00:13:10,520 --> 00:13:15,240
So it keeps not only sucks the data from these different systems, but it also keeps

197
00:13:15,240 --> 00:13:18,640
all the permissions intact so that it knows what to show and what not to show.

198
00:13:18,640 --> 00:13:24,600
The second thing Kendra does is it understands all of the documents like a human would after

199
00:13:24,600 --> 00:13:25,600
reading it.

200
00:13:25,600 --> 00:13:30,600
So now, anyone can ask a question, and I'm not talking about keyword search, I'm talking

201
00:13:30,600 --> 00:13:32,000
about semantic search here.

202
00:13:32,000 --> 00:13:38,080
So I could actually say, where is the IT help desk at this Amazon building, right?

203
00:13:38,080 --> 00:13:43,200
I can just ask that question, and the answer is not going to be like a 100 links where

204
00:13:43,200 --> 00:13:48,120
I need to click on every single document, and then hope I find this information in there.

205
00:13:48,120 --> 00:13:51,880
This Kendra is actually going to tell me it's the fourth floor, right, right up there.

206
00:13:51,880 --> 00:13:55,600
And of course it's going to have all the links as well, the documents below, like you're

207
00:13:55,600 --> 00:14:00,200
used to in a traditional search, but you don't have to go digging for the answer.

208
00:14:00,200 --> 00:14:03,360
If it's confident, it'll show you the answer right up there.

209
00:14:03,360 --> 00:14:08,800
And also in terms of relevance and the documents being the right documents, given we can't

210
00:14:08,800 --> 00:14:11,640
use a lot of signals that are available in the web.

211
00:14:11,640 --> 00:14:13,600
We use a lot of clever techniques there.

212
00:14:13,600 --> 00:14:19,000
This is, it's pre-trained on various domains, so it's going to perform really well out

213
00:14:19,000 --> 00:14:20,720
of the box.

214
00:14:20,720 --> 00:14:26,080
So there's a lot of our customers that love the ease of setting this up.

215
00:14:26,080 --> 00:14:28,800
We've also made it very easy to set up.

216
00:14:28,800 --> 00:14:34,560
You can ingest all of your documents with these connectors, and immediately you've got

217
00:14:34,560 --> 00:14:38,480
a search application that you can just go in and try it out.

218
00:14:38,480 --> 00:14:42,360
And then of course you can embed that into your own websites and things like that.

219
00:14:42,360 --> 00:14:45,720
That's what can, and underneath the scenes, if you're interested in kind of underneath

220
00:14:45,720 --> 00:14:48,280
the scenes, there's a whole bunch of NLP models.

221
00:14:48,280 --> 00:14:50,400
That's what makes it happen.

222
00:14:50,400 --> 00:14:52,920
You said it was a hard problem, and that's rightfully so.

223
00:14:52,920 --> 00:14:56,920
And we were using Verity, and I think we started looking at autonomy.

224
00:14:56,920 --> 00:15:02,320
These are all text search engines, and the problem that you described, if I use our

225
00:15:02,320 --> 00:15:08,680
getting back tons of links that match, but relevance was the difficult problem.

226
00:15:08,680 --> 00:15:12,800
And we were nowhere near at that time, summarization, and some of the things that you described.

227
00:15:12,800 --> 00:15:13,800
Absolutely.

228
00:15:13,800 --> 00:15:16,960
And underneath the scenes, there's a whole bunch of models.

229
00:15:16,960 --> 00:15:24,840
There's a document ranking model, there's an FAQ model, there's a question-answering model,

230
00:15:24,840 --> 00:15:30,520
and all of these models sort of work together, and all of the complexities is not, I mean,

231
00:15:30,520 --> 00:15:34,000
the user doesn't have to deal with all of their complexity and putting all of this together.

232
00:15:34,000 --> 00:15:37,040
We make sure that these things work seamlessly together.

233
00:15:37,040 --> 00:15:40,400
And of course, Kendra has like learning, like continuous learning, it gets better.

234
00:15:40,400 --> 00:15:45,840
As more people use it, there's explicit feedback, there's a thumbs up, thumbs down on the

235
00:15:45,840 --> 00:15:46,840
search results.

236
00:15:46,840 --> 00:15:51,720
If somebody does click it, we'll keep track of it, it gets better for the enterprise.

237
00:15:51,720 --> 00:15:57,280
Or implicitly, we can track, okay, they are clicking on this document in from the results.

238
00:15:57,280 --> 00:16:02,360
So maybe it wasn't the first one, it was the third one, and so those kinds of things

239
00:16:02,360 --> 00:16:07,000
make sure that it gets better over time, which is another thing, it's continuous learning.

240
00:16:07,000 --> 00:16:12,680
So that's another thing that's made it possible for customers to find information that they

241
00:16:12,680 --> 00:16:15,760
actually want to find it, make their employees more productive.

242
00:16:15,760 --> 00:16:21,880
So that's sort of the top, the top layer of the stack is essentially a whole bunch of AI services.

243
00:16:21,880 --> 00:16:26,080
There's some foundational ones, like I said, and then there's some other specific domains

244
00:16:26,080 --> 00:16:32,520
like healthcare and industrial manufacturing domains.

245
00:16:32,520 --> 00:16:37,760
And then there's a lot of applications, sort of things, things that solve business problems

246
00:16:37,760 --> 00:16:38,760
directly.

247
00:16:38,760 --> 00:16:39,760
Mm-hmm.

248
00:16:39,760 --> 00:16:46,120
So you've described this pretty broad set of services, you want to dump jump into talking

249
00:16:46,120 --> 00:16:51,080
about code whisperer, code whisperer is not the first AWS service that's dealing

250
00:16:51,080 --> 00:16:52,080
with code, right?

251
00:16:52,080 --> 00:16:58,440
There was code guru and then possibly others, it talk a little bit about what AWS

252
00:16:58,440 --> 00:17:04,000
has been doing with code and kind of how code whisperer came about.

253
00:17:04,000 --> 00:17:05,000
Mm-hmm.

254
00:17:05,000 --> 00:17:15,240
So we've always known that AI ML is going to, it's going to help a whole variety of different

255
00:17:15,240 --> 00:17:16,240
areas.

256
00:17:16,240 --> 00:17:20,840
It's going to find its way into many different areas and it's going to make things easier

257
00:17:20,840 --> 00:17:22,480
in those areas.

258
00:17:22,480 --> 00:17:28,120
I remember, I think, Werner Vogels, who's our CTO, he wrote a blog article on how,

259
00:17:28,120 --> 00:17:32,640
yeah, ML has the potential to completely change the way developers do their everyday, go

260
00:17:32,640 --> 00:17:37,160
about their everyday, everyday work that they do.

261
00:17:37,160 --> 00:17:41,680
So the journey actually started in 2019.

262
00:17:41,680 --> 00:17:46,800
And if you look at, I think I should start with what is a developer's workflow look like?

263
00:17:46,800 --> 00:17:50,840
That's a great place to start and then I can sort of tell you how we went about tackling

264
00:17:50,840 --> 00:17:53,160
all of those different pieces.

265
00:17:53,160 --> 00:17:58,400
So what a developer first does, of course, he writes code.

266
00:17:58,400 --> 00:18:00,840
That's the first sort of stuff he writes code.

267
00:18:00,840 --> 00:18:07,680
And then the next thing that they do is get the code reviewed by peers and some people

268
00:18:07,680 --> 00:18:14,480
may even use some automated systems to kind of scan the code and help find things.

269
00:18:14,480 --> 00:18:17,400
So there's that piece, you get it reviewed.

270
00:18:17,400 --> 00:18:22,720
And once you've reviewed the code, you deploy it, you deploy the whole thing and then

271
00:18:22,720 --> 00:18:28,800
you monitor it as the application is serving the customers that is meant to serve.

272
00:18:28,800 --> 00:18:34,360
And at that time, you're monitoring your applications for cost and performance and then

273
00:18:34,360 --> 00:18:36,600
you'll maybe find opportunities to make those better.

274
00:18:36,600 --> 00:18:43,240
So those are sort of like key pieces of a workflow, developers workflow.

275
00:18:43,240 --> 00:18:50,680
We started in 2019, we launched our very first service that is related to developers and

276
00:18:50,680 --> 00:18:52,320
writing code.

277
00:18:52,320 --> 00:18:58,320
And the one we decided to launch at that time, it was code guru in 2019.

278
00:18:58,320 --> 00:19:04,440
And what code guru does is it helps you find bugs in your code and it helps you find lines

279
00:19:04,440 --> 00:19:09,680
a code that are very expensive, expensive in terms of the amount of compute it would need.

280
00:19:09,680 --> 00:19:13,080
So that's the kind of stuff that code guru helped.

281
00:19:13,080 --> 00:19:20,320
And so you could think of code guru then as taking care of the quality of the code, the

282
00:19:20,320 --> 00:19:21,320
reviewing part.

283
00:19:21,320 --> 00:19:25,320
It helps in that part of the workflow.

284
00:19:25,320 --> 00:19:29,320
And then is it considered an ML service or an AI service?

285
00:19:29,320 --> 00:19:31,320
Yeah, it is considered an AI service.

286
00:19:31,320 --> 00:19:37,200
So in the AI service groups at the top layer of the stack, we also have a developer focused

287
00:19:37,200 --> 00:19:38,200
set of services.

288
00:19:38,200 --> 00:19:42,160
Code guru was the first one, which we launched in 2019.

289
00:19:42,160 --> 00:19:46,720
The second one we launched was a year later and that's DevOps group.

290
00:19:46,720 --> 00:19:50,840
And this is to tackle the monitoring the application once you've deployed it and you

291
00:19:50,840 --> 00:19:56,000
monitoring it and you're up, then you're trying to find places to optimize it.

292
00:19:56,000 --> 00:20:00,000
And so that's what DevOps guru does and we launched that in 2020.

293
00:20:00,000 --> 00:20:05,720
And we finally, we've now tackled the writing core part, which is what code whisperer is

294
00:20:05,720 --> 00:20:07,720
all about.

295
00:20:07,720 --> 00:20:10,440
And let me set up the problem a little bit more.

296
00:20:10,440 --> 00:20:18,040
I mean, writing code is majority of what a developer would do and I'm still, I'm always

297
00:20:18,040 --> 00:20:21,600
been a very passionate developer and I still write code.

298
00:20:21,600 --> 00:20:25,640
Not as much as I like to, but I still write a lot of code.

299
00:20:25,640 --> 00:20:32,120
And so the best way to set up this problem is to talk through my own experience here.

300
00:20:32,120 --> 00:20:38,360
So what I tend to do with the limited amount of time that I can get these days, I may

301
00:20:38,360 --> 00:20:42,040
pick a pet project that I'm either that I want to automate.

302
00:20:42,040 --> 00:20:46,800
And I'm doing it mainly to learn because I know that there's new frameworks all the time.

303
00:20:46,800 --> 00:20:49,840
And so when I hear about something, I want to do so many new frameworks.

304
00:20:49,840 --> 00:20:50,840
That's right.

305
00:20:50,840 --> 00:20:51,840
That's right.

306
00:20:51,840 --> 00:20:52,840
So I just want to learn.

307
00:20:52,840 --> 00:20:56,680
I want to be in touch with the technology because then I can interact better with

308
00:20:56,680 --> 00:20:59,560
my people because that's what they do all day long.

309
00:20:59,560 --> 00:21:08,080
So what I tried to do, this was maybe a year and a half ago.

310
00:21:08,080 --> 00:21:13,240
I was hearing a lot about React as a framework for front end development.

311
00:21:13,240 --> 00:21:20,840
And the last time I've done any front end programming was back in the 2011-2012 timeframe

312
00:21:20,840 --> 00:21:27,560
when there was this Microsoft had this Windows presentation foundation.

313
00:21:27,560 --> 00:21:33,240
There was this concept of ZAML which would separate design from actual implementation,

314
00:21:33,240 --> 00:21:36,880
the design of how the user interface would look like from the actual implementation of

315
00:21:36,880 --> 00:21:41,880
what would happen when you actually trigger those buttons and those drop downs.

316
00:21:41,880 --> 00:21:44,960
So that was the last time I'd done any kind of front end programming.

317
00:21:44,960 --> 00:21:48,120
But then I heard, I heard so much about React, everybody talk about it.

318
00:21:48,120 --> 00:21:49,760
So I said, okay, I need to learn this too.

319
00:21:49,760 --> 00:21:54,560
I need to see what it is and so I picked a project that I wanted to just implement.

320
00:21:54,560 --> 00:21:58,040
I thought it was going to just be a weekend project.

321
00:21:58,040 --> 00:22:01,840
And so I learned about React.

322
00:22:01,840 --> 00:22:08,120
I knew Java, but JavaScript, I've not done a lot of JavaScript or TypeScript,

323
00:22:08,120 --> 00:22:13,360
but it was closing off and so the first issue was of course programming language

324
00:22:13,360 --> 00:22:16,560
and the syntax and how things are, they're all different.

325
00:22:16,560 --> 00:22:21,240
There's so many programming languages these days and new ones coming up all the time.

326
00:22:21,240 --> 00:22:27,440
And each one has its own area where it shines and other areas where it's not so great.

327
00:22:27,440 --> 00:22:29,080
So that's the first place.

328
00:22:29,080 --> 00:22:33,360
There's the difference if you're it's a different language that's used there.

329
00:22:33,360 --> 00:22:39,480
But then the framework itself, the concepts behind React and how do you use it for doing fun?

330
00:22:39,480 --> 00:22:40,840
And that was another thing.

331
00:22:40,840 --> 00:22:42,960
But it wasn't enough for me to just learn about React.

332
00:22:42,960 --> 00:22:45,640
The moment I once I finished learning about React,

333
00:22:45,640 --> 00:22:52,840
I needed to learn about React router, which is the thing that would route incoming calls.

334
00:22:52,840 --> 00:22:53,880
But that wasn't enough.

335
00:22:53,880 --> 00:22:58,120
I needed to learn about React Redux.

336
00:22:58,120 --> 00:23:01,680
And even that wasn't enough because I liked to test my code.

337
00:23:01,680 --> 00:23:04,280
I like to, I shouldn't even say test.

338
00:23:04,280 --> 00:23:08,720
I'd like to specify the behavior of the code first and then actually go and implement the code.

339
00:23:08,720 --> 00:23:10,680
So I needed to have some testing frameworks.

340
00:23:10,680 --> 00:23:13,200
So just I needed to learn about just.

341
00:23:13,200 --> 00:23:18,320
And that was also not enough because there's another testing framework for React called enzyme,

342
00:23:18,320 --> 00:23:19,800
which is very popular.

343
00:23:19,800 --> 00:23:28,120
So by the, all these different frameworks and by the time I just spent a whole bunch of weekends learning a lot of these things.

344
00:23:28,120 --> 00:23:30,080
And I still haven't written anything meaningful.

345
00:23:30,080 --> 00:23:35,440
I've not made any progress on what I wanted to build, right?

346
00:23:35,440 --> 00:23:42,040
And so that's a big problem that there's just so many different things that developer needs to know.

347
00:23:42,040 --> 00:23:49,520
And now if you take this to the cloud world, with AWS, we've have 250 plus services I think today.

348
00:23:49,520 --> 00:23:50,560
One AWS.

349
00:23:50,560 --> 00:23:53,240
That's about 10,000 plus APIs.

350
00:23:53,240 --> 00:23:53,720
Yeah.

351
00:23:53,720 --> 00:23:54,000
Right?

352
00:23:54,000 --> 00:23:57,760
And by the time we finish this conversation, they'll be a few more.

353
00:23:57,760 --> 00:23:58,600
All right.

354
00:23:58,600 --> 00:24:03,400
So what is a, how is, what is a developer, how does he do this, right?

355
00:24:03,400 --> 00:24:06,200
And typically what people do is they go to stack overflow.

356
00:24:06,200 --> 00:24:07,200
Yeah.

357
00:24:07,200 --> 00:24:08,200
Okay.

358
00:24:08,200 --> 00:24:09,200
You're saying, right?

359
00:24:09,200 --> 00:24:13,040
And then you're going to look for snippets of code that you can copy paste, right?

360
00:24:13,040 --> 00:24:19,120
So that's the, that's the life of a developer and it's, it's, it's gotten harder.

361
00:24:19,120 --> 00:24:26,240
And so that's kind of where code whisperer comes in and what code whisperer is is, it's an

362
00:24:26,240 --> 00:24:34,080
ML powered coding companion, a pair programming companion, if you will, that just helps

363
00:24:34,080 --> 00:24:36,880
developers be more productive.

364
00:24:36,880 --> 00:24:43,840
And it doesn't matter where you are in your journey as a developer, what, what code whisperer

365
00:24:43,840 --> 00:24:48,440
helps you accomplish, it helps you magnify your impact no matter where you are in the

366
00:24:48,440 --> 00:24:49,440
journey.

367
00:24:49,440 --> 00:24:50,440
So, right?

368
00:24:50,440 --> 00:24:55,920
And so I think that's the core, that's the core reason why we built it.

369
00:24:55,920 --> 00:25:01,680
I've got to ask my, my suspicion is that, you know, most folks listening to this podcast,

370
00:25:01,680 --> 00:25:09,560
if not all, have heard of co-pilot, which is kind of collaboration between open AI

371
00:25:09,560 --> 00:25:18,840
and GitHub, which preceded code whisperer by, sometimes six months maybe, did they scoop

372
00:25:18,840 --> 00:25:19,840
you?

373
00:25:19,840 --> 00:25:20,840
Or?

374
00:25:20,840 --> 00:25:25,680
No, I mean, it's, you actually helped me set this up really nicely by with your previous

375
00:25:25,680 --> 00:25:26,680
question, right?

376
00:25:26,680 --> 00:25:30,840
Like, so you, I talked to you about the journey we were on, developer tools, we started

377
00:25:30,840 --> 00:25:33,400
in 2019 with code group, right?

378
00:25:33,400 --> 00:25:39,080
So for me, this is a continuation of that whole journey, so you can, you can argue who

379
00:25:39,080 --> 00:25:42,600
came first with that story in place, right?

380
00:25:42,600 --> 00:25:47,880
But let me tell you about things that we're doing differently with code whisperer.

381
00:25:47,880 --> 00:25:52,040
We did a few things very differently with code whisperer.

382
00:25:52,040 --> 00:25:57,400
The first thing we did differently, if you look at things, the other tools that are out

383
00:25:57,400 --> 00:26:04,400
there that do things that are similar, you'll often, often, you'll see, you'll see headlines

384
00:26:04,400 --> 00:26:10,040
like a lot of the code about 40% of the code that's generated has security problems,

385
00:26:10,040 --> 00:26:14,520
security issues, security and licensing are the things that come up, right?

386
00:26:14,520 --> 00:26:18,640
So I'm going to tackle security first, but then I'll come to licensing, so you're hitting

387
00:26:18,640 --> 00:26:21,440
the, you're hitting all the sweet spots right now.

388
00:26:21,440 --> 00:26:23,240
So yeah, so it's on security.

389
00:26:23,240 --> 00:26:31,680
So what we do is as part of code whisperer, which by the way, it's part of the AWS toolkit,

390
00:26:31,680 --> 00:26:36,400
and the toolkit is a plug-in to all the major IDs, so it's, we've got plugs into which

391
00:26:36,400 --> 00:26:41,600
was studio code, it also plugs into all the jet-brains IDs, so it's, I think, PyCharm

392
00:26:41,600 --> 00:26:47,200
for Python and IntelliJ for Java and the WebStorm.

393
00:26:47,200 --> 00:26:50,640
And primarily to do completion for APIs and that kind of thing.

394
00:26:50,640 --> 00:26:56,880
Yes, and it's, or initially, if not, yeah, we're not talking about completion, like the

395
00:26:56,880 --> 00:27:02,360
way IntelliSense used to be, we're talking about like 20 lines of code and 25 lines of code,

396
00:27:02,360 --> 00:27:07,440
so when you get to the demo at the end, you'll see, see, that was speaking more generally

397
00:27:07,440 --> 00:27:13,760
about the IDE toolkit, that preceded code whisperer, correct?

398
00:27:13,760 --> 00:27:14,760
Or is that?

399
00:27:14,760 --> 00:27:19,600
Oh, the AWS toolkit has been there for a long time, right, and that's how that was primarily

400
00:27:19,600 --> 00:27:23,600
created to make those IDs aware of the AWS API.

401
00:27:23,600 --> 00:27:26,600
Exactly, exactly, right, completion and things like that.

402
00:27:26,600 --> 00:27:30,000
Exactly, okay, now it is like completion at another level.

403
00:27:30,000 --> 00:27:34,600
That's right, you will show us, absolutely, absolutely, yeah, that's true.

404
00:27:34,600 --> 00:27:39,280
So, and what people just need to do is just download the AWS toolkit, and they have

405
00:27:39,280 --> 00:27:44,840
it as part of these IDs, we also integrated code whisperer into our Lambda console,

406
00:27:44,840 --> 00:27:50,440
so Lambda is our serverless service, so it's where you just type in code, and there's

407
00:27:50,440 --> 00:27:55,920
no servers to manage, you code just runs and gives you the results, right?

408
00:27:55,920 --> 00:27:59,200
And so there's a lot of code that's being written on the Lambda console, so it's plugged

409
00:27:59,200 --> 00:28:04,120
in there, it's also built on the Cloud9, yeah, yes it is, okay, it comes with integration

410
00:28:04,120 --> 00:28:11,440
into Cloud9 as well, that's our web-based ID, so we were on a topic and I digress

411
00:28:11,440 --> 00:28:14,320
and went into this one, yeah, the differentiators, right?

412
00:28:14,320 --> 00:28:21,520
So this, the first one is the security thing, like for us at AWS, security is like job

413
00:28:21,520 --> 00:28:27,080
zero, I'm sure you've heard a lot about how seriously we take security, and we think

414
00:28:27,080 --> 00:28:32,320
we need to help, because security is a very specialized skill, most companies have, you

415
00:28:32,320 --> 00:28:39,560
know, a separate group of experts that are just there for, you know, for this topic in general,

416
00:28:39,560 --> 00:28:45,360
and so we have what's called a security scan, that's built into code whisperer, so you

417
00:28:45,360 --> 00:28:52,520
can, you could write code, and then you could, you could accept a lot of the code whisperer

418
00:28:52,520 --> 00:28:56,560
suggestions, and you can also edit it further, but at the very end, we've got the security

419
00:28:56,560 --> 00:29:00,560
scan thing that you can hit, and it's going to tell you if there are any security issues

420
00:29:00,560 --> 00:29:06,080
in the code that, that it's scanned, so that's the first thing that we've done differently,

421
00:29:06,080 --> 00:29:11,000
we want to make sure that the code we generated, the code that ends up coming out at the

422
00:29:11,000 --> 00:29:17,360
other end, we want to help in, in as many ways as we can to make sure that it has the,

423
00:29:17,360 --> 00:29:24,080
it doesn't have any security issues, and presumably that security scan is also an ML model

424
00:29:24,080 --> 00:29:29,480
that's trained in recognizing the potential security issues, absolutely absolutely, yeah, yeah.

425
00:29:29,480 --> 00:29:34,160
Code Guru had this capability when we launched it in 2019, and so we're, we're using

426
00:29:34,160 --> 00:29:39,920
a lot of that here as well, okay, so that's the first area where it's different, and

427
00:29:39,920 --> 00:29:46,560
the second area where it's different is in terms of the code generates, I'm sure you've

428
00:29:46,560 --> 00:29:54,360
heard of AI systems, like with games like chess and go, these AI, they come up with new

429
00:29:54,360 --> 00:29:58,840
moves that they've never seen before, new strategies they've never seen before, and to

430
00:29:58,840 --> 00:30:02,960
a large extent, that's what happens when code whisperer is generating code, it's generating

431
00:30:02,960 --> 00:30:08,920
code it's not seen before, but there may be instances where the code that it generates

432
00:30:08,920 --> 00:30:13,360
is close enough to something that it's seen before, and Code whisperer of course is trained

433
00:30:13,360 --> 00:30:17,960
on billions of lines more than billions of lines of code, from public repositories, you

434
00:30:17,960 --> 00:30:23,240
know, from Amazon repository, it's code repositories, from documentation and forums, public

435
00:30:23,240 --> 00:30:29,080
forums, and that's, it's trained on a lot of stuff, so it may have seen something similar

436
00:30:29,080 --> 00:30:35,160
before, and then what code whisperer will do is it provides what we call a reference tracker

437
00:30:35,160 --> 00:30:42,160
where it lists the license under which that other similar piece of code was provided, so

438
00:30:42,160 --> 00:30:49,320
this way developers know that the code that is there could potentially have that license,

439
00:30:49,320 --> 00:30:52,640
they can decide whether they want to include that piece of code, but they want to accept

440
00:30:52,640 --> 00:30:57,600
that suggestion, or they don't want to, it depends on what the, what the company rules

441
00:30:57,600 --> 00:31:03,200
are, it depends on things like that, so that's the second thing that we're doing differently,

442
00:31:03,200 --> 00:31:09,920
and the third thing that we're doing differently is like, we talked about the number

443
00:31:09,920 --> 00:31:17,560
of AWS services, right, and so first class support for AWS APIs, we know what the most

444
00:31:17,560 --> 00:31:23,120
common patterns are in terms of application developers and how they use the cloud, and

445
00:31:23,120 --> 00:31:30,600
now you can, without having to learn about the 10,000 plus APIs, without having to worry

446
00:31:30,600 --> 00:31:35,200
about any of that, your intent, you just express your intent as you'll see later, you

447
00:31:35,200 --> 00:31:41,600
express your intent, either in the form of a good name for the function or in the form

448
00:31:41,600 --> 00:31:47,440
of a comment, and we're just going to give you the best pieces of code that would make

449
00:31:47,440 --> 00:31:49,840
the most sense and that point.

450
00:31:49,840 --> 00:31:59,840
So those are sound differences, we're also pretty, we do some aggressive filtering on potential

451
00:31:59,840 --> 00:32:05,520
harmful stuff, and so we're also, we've taken a lot of effort to minimize any issues

452
00:32:05,520 --> 00:32:06,520
there as well.

453
00:32:06,520 --> 00:32:12,240
So these are all the differences for code whisperer at this point in time.

454
00:32:12,240 --> 00:32:19,440
We talked about the sources of code that code whisperer was trained on, you spoke about

455
00:32:19,440 --> 00:32:24,920
them broadly, is GitHub included in that set of repositories?

456
00:32:24,920 --> 00:32:30,760
Anything that's public and has the right license, that's what we use.

457
00:32:30,760 --> 00:32:35,840
Are there specific licenses or types of licenses that you filtered on?

458
00:32:35,840 --> 00:32:42,280
Definitely the pieces of code that are public and are available for consumption, those are part

459
00:32:42,280 --> 00:32:47,320
of the training companies, as well as all of the Amazon code internally that we've had

460
00:32:47,320 --> 00:32:55,920
from over many years, that's part of it as well, and anything that's public and documentation

461
00:32:55,920 --> 00:33:00,160
that's public, those are all pieces of code that goes into the training.

462
00:33:00,160 --> 00:33:09,880
I'm imagining that if you're scouring the web, crawling the web looking for code, even

463
00:33:09,880 --> 00:33:16,280
the identifying code, identifying the licenses associated with that code presents interesting

464
00:33:16,280 --> 00:33:17,280
machine learning problems.

465
00:33:17,280 --> 00:33:23,680
Absolutely, absolutely, there's a lot of classification problems right there, a whole class

466
00:33:23,680 --> 00:33:28,360
of classification problems, just on figuring out which are the ones that you want to use

467
00:33:28,360 --> 00:33:32,960
in which are the ones you don't want to use, and of course, we've used every technique

468
00:33:32,960 --> 00:33:34,560
that we've already have.

469
00:33:34,560 --> 00:33:38,960
I've talked about many of our AI services at the top layer of the stack, Comprehend, for

470
00:33:38,960 --> 00:33:45,760
example, has a document classification API, essentially what you do there is that you decide

471
00:33:45,760 --> 00:33:50,360
what you want to call your category and you give it examples of a certain document that

472
00:33:50,360 --> 00:33:54,320
belong to the category, some number of documents that belong to the category, define

473
00:33:54,320 --> 00:33:58,200
a category two, another set of documents that belong to that category, and then you could

474
00:33:58,200 --> 00:34:02,360
define a third category called other where you give it a whole bunch of documents that

475
00:34:02,360 --> 00:34:07,560
have no particular category, and then Comprehend will train a custom model for you, and

476
00:34:07,560 --> 00:34:11,000
you're not an ML, you don't have to be an ML expert for it, it's just an all-accessible

477
00:34:11,000 --> 00:34:17,040
through the APIs, and then you have now an endpoint where you can send it new documents,

478
00:34:17,040 --> 00:34:22,640
and it's going to tell you, is it class one or class two or class three, and so we have

479
00:34:22,640 --> 00:34:27,280
a lot of these techniques already in place, and we've used that a lot for these kinds

480
00:34:27,280 --> 00:34:33,200
of things, okay, presumably this is based on a large language model, like other implementations

481
00:34:33,200 --> 00:34:44,440
of code generation, in the textual context of LLMs, one of the big conversations is

482
00:34:44,440 --> 00:34:51,000
around bias, and kind of responsible use of those, do those same kinds of issues surface

483
00:34:51,000 --> 00:34:53,720
when we're talking about code, and if so how?

484
00:34:53,720 --> 00:35:00,360
Yeah, so if you look at a lot of the transform models, they've got, you know, they're built

485
00:35:00,360 --> 00:35:05,200
on top of each other, so there's various checkpoints, typically you would have a large language

486
00:35:05,200 --> 00:35:11,320
model that's trained on just text, and then that would be a checkpoint, and then you would

487
00:35:11,320 --> 00:35:13,920
take that, and then now train it on code, right?

488
00:35:13,920 --> 00:35:20,960
So if there's issues with that core-based model, they're probably going to linger on, and

489
00:35:20,960 --> 00:35:30,160
so we've got, if you go to Amazon.science, it's one of the websites, and you'll see

490
00:35:30,160 --> 00:35:36,400
that we published just in the last year alone, we published about 400 papers on responsible

491
00:35:36,400 --> 00:35:41,200
AI, that deals with all of these topics, which we take very seriously, things like bias

492
00:35:41,200 --> 00:35:49,160
and fairness, we have, in my team, we've got the person that wrote the book on algorithmic

493
00:35:49,160 --> 00:35:56,680
bias, he's a professor at UPEN, his name is Michael Karns, he'll meet him later today.

494
00:35:56,680 --> 00:36:03,760
And so we've got all of those experts helping us avoid the pitfalls as much as possible.

495
00:36:03,760 --> 00:36:08,720
Now this is, of course, an emerging, it's a thing that's still progressing, it's not like

496
00:36:08,720 --> 00:36:14,560
we know exactly what we need to do here, but we've got the best minds looking at these

497
00:36:14,560 --> 00:36:19,600
topics and helping us figure out how best to deal with those situations.

498
00:36:19,600 --> 00:36:24,760
I didn't mention some very aggressive filtering that we're doing to prevent those kinds

499
00:36:24,760 --> 00:36:30,800
of situations, those kinds of things were implemented with the guidance of folks like Michael.

500
00:36:30,800 --> 00:36:41,120
I'm imagining the kind of classic profanity in comments is one example, but are there

501
00:36:41,120 --> 00:36:47,920
other, I was kind of trying to get some examples of the way bias types of issues might

502
00:36:47,920 --> 00:36:53,640
surface in a code specific context, are there examples that come in the mind of that?

503
00:36:53,640 --> 00:36:57,440
Yeah, generally if you're, let's say you're writing a function that takes in a gender

504
00:36:57,440 --> 00:37:02,200
and makes a decision based on the gender, there could be areas where bias can creep in.

505
00:37:02,200 --> 00:37:06,000
And so you've got to explicitly look for situations like that and make sure you don't

506
00:37:06,000 --> 00:37:12,600
generate codes along those paths, that's one, another one is of course keys, right?

507
00:37:12,600 --> 00:37:18,960
So we're talking about APIs in the cloud, a common thing that I see happen a lot is just

508
00:37:18,960 --> 00:37:25,640
keys, where your secret keys and developers tend to sometimes just put it into the source

509
00:37:25,640 --> 00:37:28,680
file, including the ones checked into GitHub, right?

510
00:37:28,680 --> 00:37:32,080
There's a lot of your keys are in there, right?

511
00:37:32,080 --> 00:37:37,600
And now if you're learning from all of that and let's say you do want to generate, you

512
00:37:37,600 --> 00:37:43,800
do want to generate that line, it could, like you could leak potential key, right?

513
00:37:43,800 --> 00:37:48,080
And so we've taken a lot of care to prevent those kinds of situations and I'll probably

514
00:37:48,080 --> 00:37:52,240
be able to show you that as well when we actually get to the demo in the end.

515
00:37:52,240 --> 00:37:53,240
Awesome, awesome.

516
00:37:53,240 --> 00:38:00,240
Well, this may be a great segue to the demo before we do any additional thoughts you want

517
00:38:00,240 --> 00:38:02,560
to share before we jump into the demo.

518
00:38:02,560 --> 00:38:08,240
No, I just think that I told you that I was like, I'm a very passionate developer and

519
00:38:08,240 --> 00:38:10,240
a developer and it's still am.

520
00:38:10,240 --> 00:38:16,840
I really think that this is just the beginning of where we're going to be able to do.

521
00:38:16,840 --> 00:38:20,080
And this is going to make developers' lives a lot more easier.

522
00:38:20,080 --> 00:38:22,120
And I think they can focus most developers that I know.

523
00:38:22,120 --> 00:38:26,000
They want to focus on the higher value problem.

524
00:38:26,000 --> 00:38:31,720
They are less interested in the boilerplate, things that a framework may dictate.

525
00:38:31,720 --> 00:38:35,600
And that's the bad part of writing code.

526
00:38:35,600 --> 00:38:39,000
The real cool part is the business logic.

527
00:38:39,000 --> 00:38:42,360
That's the cool part that you want to actually write.

528
00:38:42,360 --> 00:38:46,480
And so I think this is going to be, this is going to be in a space to watch going forward.

529
00:38:46,480 --> 00:38:51,760
There's going to be a lot of innovation coming on this topic and I just, I'm very excited

530
00:38:51,760 --> 00:38:53,640
for what's to come in this area.

531
00:38:53,640 --> 00:39:01,000
Just to probe into that a lot of bit, do you have a gut feel for where you think the innovation

532
00:39:01,000 --> 00:39:06,000
will come first or what the path looks like?

533
00:39:06,000 --> 00:39:08,200
We've got some ideas on where the path looks like.

534
00:39:08,200 --> 00:39:13,920
And I'm sure you know that like 90% of what we do, it is driven by our customers.

535
00:39:13,920 --> 00:39:16,040
It's what they're asking us for.

536
00:39:16,040 --> 00:39:23,040
And about 10% of the time we think on their behalf and we do something based on that.

537
00:39:23,040 --> 00:39:29,880
The obvious next steps will just be support for the more popular languages.

538
00:39:29,880 --> 00:39:36,600
I think we're currently support TypeScript, JavaScript, Java Python is what we support.

539
00:39:36,600 --> 00:39:40,600
So obviously there's going to be an element of supporting some of the key languages.

540
00:39:40,600 --> 00:39:45,320
That's definitely going to be one that's going to be there.

541
00:39:45,320 --> 00:39:49,880
But I think it's just going to get better and better in terms of in terms of the actual

542
00:39:49,880 --> 00:39:52,800
code that's generated.

543
00:39:52,800 --> 00:39:57,480
Today developers can accept, you know, they can accept, there's going to be options.

544
00:39:57,480 --> 00:40:05,880
So when code whisperer generates code, it gives you X number of options.

545
00:40:05,880 --> 00:40:10,480
You can actually scroll through it and see which one sort of fit your style and what

546
00:40:10,480 --> 00:40:12,400
do you want to include.

547
00:40:12,400 --> 00:40:17,400
Those suggestions will get better over time and I think it just make people's lives

548
00:40:17,400 --> 00:40:19,400
lot easier.

549
00:40:19,400 --> 00:40:24,160
And best practices, you know, we can capture best practices.

550
00:40:24,160 --> 00:40:25,760
I mentioned already.

551
00:40:25,760 --> 00:40:32,480
We kind of know the patterns of how AWS APIs are accessed for application development.

552
00:40:32,480 --> 00:40:37,480
And if you use, there's best practices in terms of how you put them together, how you

553
00:40:37,480 --> 00:40:39,560
do error checking and things like that.

554
00:40:39,560 --> 00:40:42,840
And so those things can come more and more out of the box.

555
00:40:42,840 --> 00:40:48,600
And this will make it easier for even, you know, developers that are earlier in their

556
00:40:48,600 --> 00:40:53,720
journey to generate pieces of code that are pretty robust.

557
00:40:53,720 --> 00:40:57,720
So that's pretty much what I can share at this point in time.

558
00:40:57,720 --> 00:40:58,720
Awesome.

559
00:40:58,720 --> 00:40:59,720
Awesome.

560
00:40:59,720 --> 00:41:00,720
Well, let's jump into the demo.

561
00:41:00,720 --> 00:41:01,720
No, okay.

562
00:41:01,720 --> 00:41:02,720
All right.

563
00:41:02,720 --> 00:41:03,720
What are we looking at here, Vasi?

564
00:41:03,720 --> 00:41:04,720
All right.

565
00:41:04,720 --> 00:41:06,840
You're looking at Jedvrain's pie charm.

566
00:41:06,840 --> 00:41:12,040
And I think this one, because Python is not a language that I like, but that's exactly

567
00:41:12,040 --> 00:41:16,080
why you know, code whisperer is very useful.

568
00:41:16,080 --> 00:41:18,280
So let me, let me just alienate it.

569
00:41:18,280 --> 00:41:19,280
I know.

570
00:41:19,280 --> 00:41:20,280
I know.

571
00:41:20,280 --> 00:41:21,280
I know.

572
00:41:21,280 --> 00:41:22,280
I know.

573
00:41:22,280 --> 00:41:23,280
I know.

574
00:41:23,280 --> 00:41:24,280
I know.

575
00:41:24,280 --> 00:41:25,280
I know.

576
00:41:25,280 --> 00:41:26,280
I just don't like.

577
00:41:26,280 --> 00:41:28,280
I hate to be able to redeem yourself by saying you loved Julie.

578
00:41:28,280 --> 00:41:29,280
Okay.

579
00:41:29,280 --> 00:41:30,280
All right.

580
00:41:30,280 --> 00:41:31,280
Anyway.

581
00:41:31,280 --> 00:41:34,880
So I'm going to be doing a series of demos in each one sort of takes it up

582
00:41:34,880 --> 00:41:35,880
a notch a little bit.

583
00:41:35,880 --> 00:41:39,560
That's what I'm going to try and do here.

584
00:41:39,560 --> 00:41:44,400
So the first one, it's kind of going to be a utility kind of thing that I think most

585
00:41:44,400 --> 00:41:45,800
developers want to do.

586
00:41:45,800 --> 00:41:48,880
They end up doing at some point, right?

587
00:41:48,880 --> 00:41:53,400
So code whisperer is enabled and the AWS toolkit has been installed.

588
00:41:53,400 --> 00:41:56,280
You guys can see it on the left side of the screen.

589
00:41:56,280 --> 00:42:07,960
So I'm going to just start by saying a function to convert a JSON file to.

590
00:42:07,960 --> 00:42:13,800
And you see code whisperer just popped up.

591
00:42:13,800 --> 00:42:16,400
In my comment, all right.

592
00:42:16,400 --> 00:42:19,200
So I'm just going to accept that.

593
00:42:19,200 --> 00:42:22,360
And I want to specify a few more things, right?

594
00:42:22,360 --> 00:42:30,640
I want to say things like the keys of the JSON file are the column names.

595
00:42:30,640 --> 00:42:33,080
Again you see that code whisperer popped up.

596
00:42:33,080 --> 00:42:35,280
I'm going to accept that as well.

597
00:42:35,280 --> 00:42:38,880
And then I don't care what the value is much.

598
00:42:38,880 --> 00:42:42,680
And now let's see what code whisperer does.

599
00:42:42,680 --> 00:42:47,080
It just generates the function name.

600
00:42:47,080 --> 00:42:50,200
I'm just going to accept it.

601
00:42:50,200 --> 00:42:58,200
And there is a set of code, a bunch of code that it just popped up.

602
00:42:58,200 --> 00:43:01,520
And then you can see this little thing at the bottom.

603
00:43:01,520 --> 00:43:02,520
And those are the choices.

604
00:43:02,520 --> 00:43:04,240
It says 104.

605
00:43:04,240 --> 00:43:10,800
And so I could probably go through the various options it's given me.

606
00:43:10,800 --> 00:43:14,240
Try and pick the one that I like the most.

607
00:43:14,240 --> 00:43:18,360
And I'm probably going to pick this one.

608
00:43:18,360 --> 00:43:19,800
You can see what it's doing here.

609
00:43:19,800 --> 00:43:24,080
It's writing the header with the keys, just like we said.

610
00:43:24,080 --> 00:43:25,440
And then it's writing all the rows.

611
00:43:25,440 --> 00:43:28,200
So I'm just going to pick that.

612
00:43:28,200 --> 00:43:30,960
And so I guess that's kind of done.

613
00:43:30,960 --> 00:43:33,200
I don't want to print anything.

614
00:43:33,200 --> 00:43:40,600
And then if we just go in here to an empty area and then see what else it's going to.

615
00:43:40,600 --> 00:43:45,600
You can see that what it did here is now it's saying a function to convert a CSV file

616
00:43:45,600 --> 00:43:46,600
to a JSON file.

617
00:43:46,600 --> 00:43:50,320
So it's the opposite of what we just did, which is a common thing that most developers

618
00:43:50,320 --> 00:43:51,320
do.

619
00:43:51,320 --> 00:43:55,480
Like they write a transformation from one side to the other.

620
00:43:55,480 --> 00:43:58,720
And it's very likely want the transformation on the other side as well.

621
00:43:58,720 --> 00:44:04,720
So we can continue doing that and we'll see what happens here.

622
00:44:04,720 --> 00:44:06,360
I don't want that thing.

623
00:44:06,360 --> 00:44:13,800
So there's the function name and CSV to JSON.

624
00:44:13,800 --> 00:44:17,800
I accept it and then I keep going.

625
00:44:17,800 --> 00:44:20,440
And again, I've got a bunch of options here.

626
00:44:20,440 --> 00:44:24,360
You can see it uses a Dict reader on the CSV data and then it's

627
00:44:24,360 --> 00:44:26,160
dumping it into the JSON file.

628
00:44:26,160 --> 00:44:28,840
I could just accept that and I'd be done with it.

629
00:44:28,840 --> 00:44:32,520
So that's sort of the first little demo that I wanted to start with.

630
00:44:32,520 --> 00:44:34,800
So that you get used to the interface.

631
00:44:34,800 --> 00:44:36,040
You kind of see what happens.

632
00:44:36,040 --> 00:44:37,040
Yeah.

633
00:44:37,040 --> 00:44:45,040
What I'll do next is I'll go to a more obscure API.

634
00:44:45,040 --> 00:44:49,960
And I say obscure because most developers that use AWS, they've used the S3.

635
00:44:49,960 --> 00:44:56,000
The typical examples are upload a file to S3 or they're doing some EC2 stuff.

636
00:44:56,000 --> 00:45:00,840
And so transcribe is one of my services, the speech to tech service.

637
00:45:00,840 --> 00:45:05,320
Unless you are an AI developer or unless you're a developer that wants AI in your app,

638
00:45:05,320 --> 00:45:12,200
you probably won't know about it and it's, and so this is a situation exactly like that.

639
00:45:12,200 --> 00:45:19,160
So what I'll start with and because we're going to be demonstrating use of an AWS API here,

640
00:45:19,160 --> 00:45:30,920
I'll start with variables for AWS credentials, right?

641
00:45:30,920 --> 00:45:33,400
And you can see there's the access key.

642
00:45:33,400 --> 00:45:37,280
And you also see that it's not giving me the key itself and even though it may have

643
00:45:37,280 --> 00:45:45,080
seen some keys in the training data, there's a secret key, probably a region.

644
00:45:45,080 --> 00:45:48,560
And I guess I don't care anymore.

645
00:45:48,560 --> 00:45:59,840
Then the next thing I'll do is write a function to transcribe after type write, transcribe

646
00:45:59,840 --> 00:46:08,080
German, you popped up audio file, but I want to say a German audio file to text.

647
00:46:08,080 --> 00:46:11,960
You can see it popped out as well, right?

648
00:46:11,960 --> 00:46:17,000
So it's giving me the name of the function, I accepted it and this is going to be some

649
00:46:17,000 --> 00:46:24,160
elaborate, it's going to be more elaborate so we just wait for it.

650
00:46:24,160 --> 00:46:27,640
You can see a lot of stuff happening here.

651
00:46:27,640 --> 00:46:31,960
The bottom client is created with the transcribe thing that's typically how you can see

652
00:46:31,960 --> 00:46:36,840
that the access keys and the secret keys and the region from above that variables are being

653
00:46:36,840 --> 00:46:41,280
used to generate that variable.

654
00:46:41,280 --> 00:46:51,720
And then you can see the cool thing here, it understands the locale, it's D, D, and so you don't

655
00:46:51,720 --> 00:46:56,760
have to look up the documentation, there's a transcribe start, transcription job, right?

656
00:46:56,760 --> 00:47:00,200
And then here it returns the job, right?

657
00:47:00,200 --> 00:47:06,920
And so there's probably more options, there's probably more options down there, but I'm

658
00:47:06,920 --> 00:47:11,760
just going to ask you, speaking of options, if you knew a little bit about transcribe

659
00:47:11,760 --> 00:47:17,520
and previously defined a variable with the channel type, which is one of those parameters

660
00:47:17,520 --> 00:47:19,520
that transcribe will take.

661
00:47:19,520 --> 00:47:21,520
Would it have inserted that in the right place?

662
00:47:21,520 --> 00:47:22,520
Yes, absolutely.

663
00:47:22,520 --> 00:47:28,440
The way code whisperer works is it gets context in the call, and the context for it

664
00:47:28,440 --> 00:47:31,280
is depends on where the cursor is.

665
00:47:31,280 --> 00:47:39,720
It's code, code around that cursor, and it could even be code in other files in the project.

666
00:47:39,720 --> 00:47:44,000
And so it uses that to figure out what's the best way to do it, and some of the options

667
00:47:44,000 --> 00:47:47,440
being included, some of the options may not include it, right?

668
00:47:47,440 --> 00:47:49,480
So that's kind of how it works.

669
00:47:49,480 --> 00:47:57,680
So let me accept this, and maybe what I, rather than returning the transcribe job, maybe

670
00:47:57,680 --> 00:48:07,600
what I could do is just delete this thing here and see what it would generate, maybe it

671
00:48:07,600 --> 00:48:13,440
would generate the same thing, but okay, wait for the transcription to complete, okay,

672
00:48:13,440 --> 00:48:19,040
while true, and let's see what happens, yeah, okay.

673
00:48:19,040 --> 00:48:25,040
So it's actually parsing that thing, going into it in multiple levels to figure out the

674
00:48:25,040 --> 00:48:30,080
status, sleeping for a while, and so on, and so forth.

675
00:48:30,080 --> 00:48:35,200
So you could keep going with this, and it's discoverability of these APIs, it's now

676
00:48:35,200 --> 00:48:39,560
a lot easier, you don't have to go to Stack Overflow and look for the snippets right there

677
00:48:39,560 --> 00:48:40,560
on the ID.

678
00:48:40,560 --> 00:48:44,800
All right, so that's the second demo that I wanted to show, and I wanted to show how it

679
00:48:44,800 --> 00:48:50,440
would work on an AWS API, that's not very common for people to know about.

680
00:48:50,440 --> 00:48:55,480
Then the last thing that I probably would do, and this is where we, let's actually create

681
00:48:55,480 --> 00:49:02,560
something that we actually run and see if it works, right, and so, and what I'm going

682
00:49:02,560 --> 00:49:15,680
to try and do is write a function to plot the sign of sign of X, and let's say two star

683
00:49:15,680 --> 00:49:30,680
cosine of X, come on, with red and blue dashes for the range minus point of pi, that's a

684
00:49:30,680 --> 00:49:31,680
lot of stuff.

685
00:49:31,680 --> 00:49:40,880
And we always have to pray to the demo guys, so to speak, but you would think that given the

686
00:49:40,880 --> 00:49:47,400
nature of what's happening, you'd be fairly robust to typos, is that what you find it?

687
00:49:47,400 --> 00:49:51,560
In general, when I'm writing code, I'm writing it for the next person that's going to be

688
00:49:51,560 --> 00:49:54,200
looking at it more than anything else.

689
00:49:54,200 --> 00:50:00,360
There's this whole philosophy, and I could talk about it for hours, a good code basis

690
00:50:00,360 --> 00:50:07,200
is one where, let's say you have a new developer in the team, that person can add a new

691
00:50:07,200 --> 00:50:11,840
feature in the shortest amount of time, and I think that's possible only if your code

692
00:50:11,840 --> 00:50:19,000
basis is self-explanatory, it's decoupled, isolated things, responsibilities are isolated.

693
00:50:19,000 --> 00:50:23,840
So yeah, even if I, you could say, okay, why can we correct the typos?

694
00:50:23,840 --> 00:50:27,600
Maybe that would be a future thing that we do, it should be possible to do, I don't

695
00:50:27,600 --> 00:50:32,960
see a reason why that won't work, but in general, the context is a lot of stuff, and

696
00:50:32,960 --> 00:50:38,640
so if let's say there's a spelling or, in fact, what I'm going to do right now, let me

697
00:50:38,640 --> 00:50:43,840
actually take this, let me actually mess around with it, I don't want that argument.

698
00:50:43,840 --> 00:50:48,560
So it generated that, I'm actually going to change that, and now let's see what it does.

699
00:50:48,560 --> 00:50:54,840
It just generated all that stuff, and you could see it's using minus pi to pi, it's got

700
00:50:54,840 --> 00:51:01,680
the red dashes on red dash on sign and the blue on the, let me just accept it, and

701
00:51:01,680 --> 00:51:06,880
then if I go here, yeah, so it's calling that function.

702
00:51:06,880 --> 00:51:13,840
So now if I just run this thing, let's see what happens if it's even correct, and there

703
00:51:13,840 --> 00:51:19,280
it is, all right, so you see, you see the program actually running.

704
00:51:19,280 --> 00:51:25,600
So that's kind of the, the last thing that I wanted to show that you can do things that

705
00:51:25,600 --> 00:51:32,080
are pretty elaborate, and in the end though, the developer is responsible for the code,

706
00:51:32,080 --> 00:51:36,880
and I think the person needs to know what to accept, you know, with the options,

707
00:51:38,000 --> 00:51:43,600
how does he want to take this further? So that's why we call it a, it's more of a companion,

708
00:51:43,600 --> 00:51:48,960
then it's not the thing leading the way, it's the thing that's helping you not have to go,

709
00:51:48,960 --> 00:51:51,360
look, look things up in multiple places.

710
00:51:51,360 --> 00:51:57,600
Yeah. Um, so that's your type, oh not. Right. Right. Right. But I think that's definitely

711
00:51:57,600 --> 00:52:02,480
something that we should be able to handle. Um, so you've just given me a good idea for our

712
00:52:02,480 --> 00:52:09,120
roadmap. Cool. Um, that's all I had to show.

713
00:52:09,120 --> 00:52:16,720
Oh, Vasi, uh, great conversation and great demo. Thanks so much for taking the time to share

714
00:52:16,720 --> 00:52:21,760
with us a bit about code whisperer and more broadly the AS services portfolio and the way

715
00:52:21,760 --> 00:52:26,080
you think about all these things. It was a pleasure. Thanks for having me, Sam. My pleasure. Thank you.

716
00:52:26,080 --> 00:52:47,440
All right. Bye bye.

