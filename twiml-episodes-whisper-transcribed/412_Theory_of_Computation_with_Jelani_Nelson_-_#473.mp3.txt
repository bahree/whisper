All right, everyone. I am here with Jalani Nelson. Jalani is a professor in the theory group at UC Berkeley. Jalani, welcome to the Twoma AI podcast. Thanks for having me. Hey, I'm super excited about our conversation and looking forward to learning more about what you're up to.
You focus on theory, computational theory in particular, and we'll be digging into that topic. But before we do, I'd love to hear a bit about your story and how you came to work in computational theory and machine learning.
Tell us a little bit about your background.
Sure. So I'm from St. Thomas and the US Virgin Islands. I'd say I first got into computer science as a kid because of interesting video games. I got an Nintendo entertainment system for my fourth birthday.
And sometime in middle school, I learned HTML. I taught myself read a book on it and later in high school, I taught myself C++. And I learned some basic from my CS teacher in 12th grade.
I really liked CS. I knew I liked CS from what I had read in those books. I knew I liked math. You know, in middle school, we had math counts in the Virgin Islands and I did math counts.
And I like just reading my math textbook. I mean, even elementary school, I remember I would just go ahead and read my math textbook.
By the second month of the school year, I had already read the entire math textbook for the year and done all the workbook exercises. So, but when I was entering college, I decided, even in high school, I decided when I go to college, I'm going to double major in math and CS.
And I went to MIT. I had actually never heard of MIT until senior year. I found out about it through a college ranking magazine. I think US news. And I only applied there because I didn't even realize that college admissions was competitive.
I was very oblivious, but it worked out. I got in. I went there. I did double major in math and CS just as I said I would.
And sophomore year was my first 3CS course. It was an algorithms course. And I enjoyed the course, but I would say that's not really where that's not the time that I decided I'm going to do 3CS.
I was still exploring other things. I was taking computer math courses as well, et cetera. But junior year, I started doing online competitive programming. So MIT attracts a lot of kids who did competitive math and competitive programming in high school.
Things like the IMO and the IY. These are the Olympia. It's math Olympia and Informatics Olympia.
And some of my friends did those things and a couple of my friends who were into competitive programming told me about top coder. Nowadays it's not as popular nowadays code forces is the big thing, but back then it was top coder.
It's a website that still hosts and used to host more frequently these 75 minute competitions where they would give you three problems, algorithmic problems, and you would have to code them up as fast as you can correctly pass all the test cases.
And depending on how long it took you to solve the problem, you would get, you know, I would decide to make points you get. So the faster you solve it, more points.
So that really got me hooked. You know, I was, as I mentioned, I was really into gaming as a kid playing video games since age four. So to me, top coder was just another game and there was a summer when I probably played top coder eight to 10 hours a day.
I mean, even outside of the contests, I would just do practice problems on their website on other websites that had a lot of practice problems.
And that's I think when I really thought, yeah, I want to do, I want to do theory CS. I did a masters of one year masters at MIT in algorithms and data structures.
And then my PhD as stated MIT and I was in the theory group then. And I did algorithms.
Awesome, awesome. And how did you work in theory intersect with machine learning?
Yeah, so I work on, I guess we'll get into it a little bit, I think, after, but I work a lot on sketching and streaming and dimensionality reduction.
And it turns out that some of these tools or some of these things are people in the ML community uses tools. So like, for example, random projections, the idea is you have a high dimensional data set. Maybe you took some database and featureized it.
You know, you featureize your emails and turn them into a bag of words. So now they're high dimensional vectors.
And you want to run some algorithm on them. Maybe you want to train some some classifier, for example, like a spam classifier.
If you can map these high dimensional vectors to a lower dimensional representation while still preserving some kind of geometric structure.
And then maybe the thing you learn will still perform well. And people have done that, for example, there's a paper and I think ICML09 by Weinberger at all.
They were looking at training a collaborative spam filter for Yahoo Mail. So they use, I mean, they called it the hashing trick, but it's dimensionality reduction.
So they use these kinds of tools to speed up, I guess, their training algorithm, because it only had to run on the lower dimensional version of the factorized the featureized emails.
That's one example, I mean, there are others. Yeah, awesome. And so as a, as a theorist, are you primarily thinking about new algorithms and creating new approaches to solve problems or a lot of that work is identifying the limitations and the kind of performance envelope, if you will, of existing algorithms.
How do you think about that balance?
Yeah, so for me, I would say that the problem is king. So first, I identify what I think is an important problem. And once I do that, I try to understand.
In my area of sketching and streaming algorithms, both upper bounds and lower bound. So upper bound means kind of getting an algorithm that's as good as possible for this problem, you know, minimize the memory, minimize the running time, minimize the failure probability, etc.
It may be the case that there's already an algorithm that I think is optimal. That's great. But sometimes that's not the case. And oftentimes I have to design a new algorithm.
And then the lower bound side is, as you mentioned, understanding limitations, proving that there is no algorithm that is better than something.
And then hopefully, hopefully, you're done with your job when you've kind of squeezed the problem between the two, the upper and the lower bounds match. So you have an algorithm, you have a lower bound in the match, meaning you have found, maybe the asymptotically at least best algorithm for this problem.
So let's dig into one of the areas that you spend a lot of time on, streaming and sketching. I think we're generally familiar with the idea of streaming and streaming systems.
Sketching is a bit of a new terminology, but why don't you kind of walk us through the problem space as a whole and the way you approach it?
It still allows you to answer some family of queries that you're interested in answering. So it's a data structure, really. But when you use that word sketch, the connotation is that this data structure should use some linear memory, meaning the memory footprint of the data structure should be much less than storing the database.
You're not remembering most of the data. And streaming, you know, when I talk about streaming, I mean the data is streaming at you, and you want to maintain a sketch of that data on the fly as the data is streaming in.
So kind of an updatable sketch.
And I imagine that as you're approaching these kind of problems, you know, there are lots of different directions you could go algorithmically, but there's, you know, one set of approaches that you look at that's more probabilistic in nature.
A lot of the algorithms I develop in this space are randomized. There are some problems for which you can prove that unless you use randomness, it's impossible to have a low memory footprint algorithm. You basically have to remember almost everything.
And there are other problems for which you can get something non trivial deterministically without randomness, but you can get much more efficiency, if you allow yourself to be randomized.
Can you give us some some concrete ideas of the types of problems or applications that streaming and sketching and your work in particular apply to.
I'll give a couple of example problems. So one of them is counting. Okay, so I just want to maintain a counter, think of a counter as a data structure.
So you're maintaining this number. What are the operations that you allow? One is you initialize it, meaning set to zero. So that's the beginning of the algorithm.
Yes, as you increment the counter, and then the third is that you query the value of the counter. Okay, so if if the number you're counting gets to be large, you know, K digits large, the naive approach of just remembering the number would use, would consume K units of your memory.
And this is an example where you can prove that any deterministic algorithm, if you don't use randomness, you need to, you need to have, you know, K units of memory. But if you allow, if you allow randomness and you allow approximation, meaning when you ask me to report the value of the counter, I'm allowed to slightly air, I'm allowed to give you an answer that say 1% off the true counter value.
And it's allowed to be incorrect with some low probability with probability 99% I'll give you a value that's within 1% of the true value, but with 1% probability, I'm allowed to say total junk.
Okay, yeah, if you allow for that kind of slack, then it's been known since the late 70s that there is a non trivial algorithm, instead of having to consume K units of memory for a K digit number, you only have to consume log K roughly log K units of memory.
So this is a problem I've worked on, I mean, we knew about the log K from the late 70s, but what we didn't know was, what's the type relationship between the size that the number gets versus your memory and the approximation ratio you want, I said 1% error, but what if you want 10%, but if you want 0.1%, you know, how does the memory trade off with that, as well as the failure probability.
You want to succeed even 99%, but again, you can parameterize that. How does your memory consumption relate to the optimal memory consumption relate to the failure probability success probability one.
So now we have a very tight understanding of how all these parameters trade off with each other. That's an example of something I worked on and we just, we have a pre print on this from the fall, so less than a year ago.
The idea, I'm imagining is that the resulting algorithm with the randomness approach applied is going to perform better than like a more naive quantization type of approach.
Yeah, so I mean, the problem with, if you said, yeah, I'm not sure exactly what you have in mind when you say quantization, but let's say dropping digits.
Because someone says increment your counter. So let's say that you don't remember the last three digits. So someone says increment the counter. So that fourth digit, did it stay the same or does it get incremented now, right?
You don't know because you don't remember, you know, do you end in 999 or not? You don't remember, right?
So yeah, you have to do something, you know, a little more. But yeah, so I mean the basic idea of the algorithm, I mean, I'll say it maybe the sentence not get to into it, but.
Yeah, this is an algorithm to do more is from the late 70s. The idea is you try to remember something that's like the logarithm of the number.
And when, when someone says increment, with some probability, you increment that logarithm. And with, with the remaining probability, you just keep it the same.
So if there have been a lot of increments, then with high likelihood, you have incremented the logarithm, right?
But if there were only a few, then probably didn't change. I mean, so that's the basic idea. Got it. And in terms of applications of this, where do you see that this kind of approach being applied?
Or is it a theoretical exercise that you doesn't have any application specifically just yet?
I know it had applications from the very beginning. Actually, when Morris developed this, he was at Bell Labs. That was in the 70s. There was a, there's a survey by Jeremy Lombroso that talks about the history of this algorithm or the history of this problem.
So I'm quoting Jeremy or paraphrasing it.
So my understanding is that in the 70s, Rob Morris was working on a spell checker for early eunuch systems. And, you know, as part of a spell checker, he, he wanted to keep Trigram counts.
So like how many times have I seen A, A and this text versus ABC versus A, B, A, et cetera, right? And I mean, I don't know exactly how is, how he was using those Trigram counts as part of a spell check.
I guess the idea is, if there's a Trigram that's infrequent, and now someone type something that has an infrequent Trigram in it, maybe you should flag that as a possible type of.
So, right. Well, how many Trigrams are there or something like 26 cubed?
You know, back in the late 70s, computers didn't have as much memory to do today. So he couldn't, you know, if he had to keep track of 26 cubed counters, he just didn't have enough memory to keep accurate counts.
So he needed to compress the counts somehow. And that's why he developed this approximate counter.
And that's the more algorithm because that let him fit approximate counts inside the memory constraints at the time. So I mean, that's the late 70s. Why, why should anyone care about this today? The idea is still, let me look, like I can, my computer can store a number.
Okay, and it's not a big deal or even a long, right? Yeah.
The places where this gets used today are where you want to store a lot of numbers. Okay. And so there's that multiplicative overhead. Yes, this is a 64, this is only 64 bits for one number.
But if I'm storing a billion numbers, then it's 64 times a billion. So if I can, if I can get rid of that multiplying constant 64 and make it, you know, eight or something that I've saved.
So one place where this gets used is I found this YouTube talk by someone who contributes to the redis open source database. It's an in memory database. And there are many people who use redis apparently as a cache as an in memory cache.
And then when you have a cache, you need a cache of fiction policy, right? When it gets fully to kick someone out. So one of the eviction policies they've implemented in redis is to evict the key that's least frequently used.
So they need to keep track of the frequency of access of each key. And frequency involves you, you know, understanding the count. How many times is this key been an access in some time window, right?
So they implement those counters using using the Morris algorithm, actually, because you've got a lot of keys, typically a lot of objects stored in one of these.
Right. Yeah, for someone who has a big database. Yes.
Interesting. Interesting.
Awesome. And so tell us a little bit about the dimensionality reduction work that you do. Yeah, sure. So one of the flagship results in this area is by not computer scientists, but by mathematicians Johnson and London Strauss.
They're analysts. So it was in 1984, they had a math application in mind. And for them, this wasn't even their main results, but they needed it to prove something else.
It's the so called Johnson, London Strauss lemma.
So what it says is, if you have N vectors in some arbitrarily high dimensional space, you can map those N vectors down to smaller dimension log N O of log N dimensions, such that all the pair wise Euclidean distances after you do the mapping are roughly what they used to be up to a constant factor.
So that can be parameterized and you can trade off against it. So let's say I want to preserve all the distances up to 1% error, you know, the jail, I can give you that.
And the target dimension depends on that 1% if you want to say you want 0.1% error, then, you know, the dimension has to increase.
So that's a problem I've worked on.
You know, how does that relate to, for example, ML, again, you know, I mentioned this with the emails, right, you, you, you feature eyes or data, now you have high dimensional vectors, you map down to low dimension and run whatever you want to run on those things are faster, you slow memory, et cetera.
There are other applications of this approach of dimensionality reduction, for example, clustering of data on a cluster, I can map down to lower dimension cluster with lower dimensional vectors, and I can prove that the clustering I find is almost as good as the optimal clustering had I not done the dimensionality reduction.
There are also applications to PCA, approximate PCA, as well as approximate regression, constrained regression problems. So, you know, this thing gets used in applications that people in ML care about.
I guess some of the things I've worked on related to this, trying to understand exactly the trade off between the number of vectors, that approximation that you want to preserve, let's say 1% error, the distances are 0.1%.
And the target dimension, how do these three quantities trade off against each other. So, now we have an optimal asymptotically optimal understanding of that, that some work I did in late 2017 with Casper Green Larson, and I've also worked on efficiency of the dimensionality reduction.
So, you have these high dimensional vectors, you want to map to lower dimension, there's some computation that happens there and that computation takes time. How can we make that happen as fast as possible, do the embedding into load dimension as fast as possible.
So, I've worked on that, getting faster embeddings, you know, a lot of these embeddings, I guess all the embeddings that people know are linear embeddings, meaning, you have your high dimensional vector, and you multiply it by some matrix that has few rows, and that gives you your lower dimensional vector. So, this matrix, you know, making it sparser, for example, that's one thing I worked on that way, since it's sparser, you can multiply it more quickly.
Often it's randomized, you select this matrix randomly from some distribution, how many random bits do you need to sample this random matrix? If it's a few number of random bits, then you can actually call that the seed that generates the matrix, rather than store this large matrix in memory, you can also store the seed.
So, you have some compressed representation of the embedding itself, so that's another thing I've worked on.
When you think about the relationships between these various quantities, characteristics, they tend to be very complex relationships, or once you kind of complete your analysis, do you get to relationships that are fairly straightforward to apply?
You mean like the trade-offs between these parameters? The trade-off between the parameters in particular, yeah? Yeah, so, I mean, for something like John Sullivan and Strauss, the jail limit itself from the 80s turns out to be optimal.
So, that's a situation where we didn't have to come up with a new method. We just proved that the method that people had been using for 30 plus years was already optimal.
So, what's the trade-off there? If the number of vectors that you want to embed, that you want to map down to learn dimension is n, and you want to preserve the distances up to 1 plus epsilon, multiplicative distortion, so if you say 1% error, that means epsilon is 0.01.
Then what Jail showed, John Sullivan and Strauss showed is that the target dimension can be some constant times 1 of reps long squared times log n, and that's what we showed is optimal.
There are data sets where you cannot do better than that.
When you say there are data sets where you can't do better than that, how complex or limiting are the constraints that you find you have to put on the data sets?
Yeah, so in our proof that there are data sets that you can't do better, we actually, I mean, it's kind of a funny proof in that we never actually can pinpoint which data set is the hard one.
We just prove that there is one that exists that is hard, and there are things we can say about it. We know that the data set basically looks as follows.
It contains the 0 vector, then a bunch of standard basis vectors, meaning it has a 1 in a single entry and the rest of the vector is 0.
Then a bunch of very sparse vectors where each one of the vectors has exactly K, where K is something like 1 of reps long squared, it has exactly K values that are non-zero, and all those values have the same, they're like 1 over root K, and the rest of the vector is 0.
We have some understanding of what the hard case looks like, but if you just give me an arbitrary data set, and you ask me, can you beat JL for this data set?
The answer is maybe, and there is some work on that, starting again in the 80s, there was another mathematician named Gordon, who showed that if you do random projections, the kind of thing that JL was doing, then there are cases where you can beat 1 of reps long squared times log in.
In particular, the log in term can be replaced by something that is a function of the database itself.
So if your database is nice for some formal definition of nice, then you can get away with something much less there in terms of the target dimension.
I am curious, as machine learning gets more and more quote unquote democratized, more accessible, the tools are more readily available.
If you have thoughts on the core elements of theory that any practitioner should know, whether they studied it formally or not, are there things that jump out to you as elements of the theoreticians toolbox that enable you to, that would enable a practitioner to be more effective, productive, think more deeply about the problems they're working on, whatever your criteria might be.
Yeah, so, I mean, there are many faculty who have been at universities asking this question of ourselves, because there is a standard toolbox we teach in our algorithms courses at the undergraduate level, you know, intro to algorithms, we teach dynamic programming, we teach, you know, flow problems, max flow, minimum cuts, and, you know, maybe the fast Fourier transform, et cetera.
I mean, I think something like dynamic programming is something that people should really understand well and, you know, is widely, is a widely applicable applicable technique to optimization problems.
Some of the other stuff, you know, it's, it's there more, you know, the lot of this stuff was designed.
You know, these courses were designed a while ago, decades ago, and it's not, it's not totally clear that they're the right tools, if you're just thinking in terms of tools to be used and practice later, it's not clear that these are the right tools.
I mean, they do, they do train you to think in a certain way, which I think is a useful way of learning to think.
But in terms of tools, I mean, I do think that people should know about, like from the things I, you know, know about, the things that I work on, like sketching and dimensionality reduction, I think people should be aware that, you know, these tools exist, things like hyper log log, you know, for approximate distinct counting.
And I think people do know, like I remember once I was actually in a bus in Orvis in Denmark, and I was trying to pay my bus fare, and I realized I didn't have enough Danish coins in my pocket to pay.
And this guy is like, oh, I can pay for you, he pays for me, and then he mentions, I forgot exactly, maybe I can go right by the CS building, I was going to the university.
And he mentioned that he was a computer scientist, and I said, oh, yeah, I, you know, I am as well, and I work on sketching algorithms, and he's like, oh, yeah, like hyper log log.
So, you know, he's not, he's not a researcher, he doesn't work on sketching algorithms. So I think, I think some of this stuff is becoming more known, which I think is good.
You know, there are, there are blog posts by big company, big tech companies like Facebook and Google talking about how they engineer and hyper log log to be used, you know, in house. So people are, people are using this stuff.
There's a data sketches library that's put together by the main contributors are people who are at Verizon, formerly Yahoo, and people download, you know, that library and use it.
So, yeah, I think distinct counties, basically, you see a sequence of elements in a stream, how many distinct elements did you see?
Another one is like frequent items, again, I see a sequence of items in a stream, like words that are being searched, you know, search queries to Google or something like that.
And now I want to know, what are the frequent items I saw, the frequent things that people have been querying. So there are algorithms for that as well.
The problems I've worked on, by the way, I've worked on distinct counties, I've worked on frequent items.
But yeah, I think these are, they're not just a theoretical interest, they're things that I think people, people use.
Actually, I remember one more story.
You know, I know a lot of people who were very early at Dropbox, because the person who the CEO right now was my year at MIT.
I don't know him very well, you know, I met him like once or twice maybe, but some of us early hires though are people who I know quite well.
And back when I was in grad school, maybe this is almost 15 years ago, whenever I went to San Francisco, I would stop by Dropbox back then it was a small company, right.
So I just like walk in and meet one of my friends, Dan, one of my friends, Dan used to work there. And you know, grabbed dinner with him or lunch with him.
And I remember one time I was talking to one of their software engineers and, you know, he was talking about exploring the usage of frequent items algorithms to detect popular files that were being stored on Dropbox.
So they're actually doing that now. But yeah, I mean, people are people are aware of these tools and are and use them. So I think that's good.
Maybe switching gears a bit. You also run a nonprofit. Tell us a little bit about the nonprofit and your effort there and some of the story of Addis Coder.
Yeah, sure. So, as you mentioned, it's called Addis Coder. It's a summer camp, four weeks each summer, 40 hours a week, Monday through Friday, nine to five.
We bring in kids from all over Ethiopia. I mean, I should say we also work with a partner organization in Ethiopia. It's called the Melisinawe Foundation. So we kind of coordinate it together.
We bring kids from all over Ethiopia. They come to the capital city. They're provided free room and board. The program is free as well.
A lot of these kids have no CS exposure. Computer science is not part of the standard curriculum for high schoolers in Ethiopia. So we first have to teach them some basic programming and Python.
And then we get into algorithms. Really, you know, really the program is trying to teach them about algorithms. But it's hard to do that when they don't even know what an if statement is.
So we do a little basic programming in the beginning just so that they know enough that we can teach them the algorithms. It's very hands on, you know, classes eight hours a day, but only maybe two hours of that time is lecture.
And there's a lunch break for an hour. And then the rest of the time, like, five hours, they're in computer lab, solving exercises. It's flipped classroom style. We get a lot of TAs, like 40 TAs per summer, kind of walking around the computer labs and helping the kids as they get stuck.
So, yeah, I mean, I think it's had impact, you know, getting exposure to the kids on top of just teaching them the material. We also, we have a career date.
So many of the kids say, OK, this, this seems cool, but like, what am I going to do with this? So we want to show them that there are interesting career paths with a CS background.
And I want to show them like that these career paths exist locally too. I mean, it's one thing to bring in some Facebook software engineer to talk about Facebook, but there, you know, there is no Facebook office in Ethiopia, right?
So we try to bring in people who are using CS locally. So for example, Ethiopian Airlines has been one of our sponsors and the head of their, you know, software engineering division came and gave a presentation to our students.
We've had startup founders come in and talk to our students. There's an IBM research Africa. They have an office in Kenya and they also have an office in South Africa.
We've had a researcher flying from Kenya to talk to our students about, you know, what it's like to do research in CS.
So we've had a lot of people from industry, as well as government, as well as academia, talk to the kids. And I think it's really shown them that there's a lot of opportunity in CS. You know, we do survey, we do surveys amongst our kids like exit surveys.
We ask them, we ask them things like, what did you want to major in before you started the program? What do you want to major in now?
The number of kids who say CS, the number of kids who want to do CS at the beginning versus the number of kids who want to do CS at the end of the program is like three acts, you know.
So I think it's an impact. A lot of our kids now, the majority stay in Ethiopia and study there. We've had kids come to the US to study.
The first iteration of the program was 10 years ago, 2011. So there have been a lot of batches over the years. We've had, I think four kids, four kids go to MIT so far. A fifth one just got accepted two days ago.
We have three kids, just this cycle, we're going to start at Harvard in the fall. They got accepted to Harvard and they're all going to go. And we've had kids go there in the past and to Princeton and to Stanford. We have one kid at Stanford right now.
So we've had, I don't know, like a Columbia, et cetera, et cetera. And the older kids, if you look at the kids who did the 2011 version of the program, some of them are doing PhDs.
So we've had two kids go to Columbia for PhD, a kid at USC right now doing computer security, he's a PhD student. We have another one in North Carolina.
We have one at RPI doing a math PhD, Stony Brook doing an applied math PhD, and I'm probably forgetting people.
Yeah, I think it's been going well. And also in industry, we've had our alums go to Google, Facebook, Microsoft, AMD, YouTube, which I guess is part of Google, et cetera. And people do, you know, also going into industry and Ethiopia as well.
Yeah, very cool.
So what have you learned about CS education in running this program over 10 years, what, you know, in terms of observations on how to actually teach CS and get folks excited about it. It gets excited about it.
So one thing for one thing, let me preface by saying that these kids are not like the way our curriculum works might not work for the general public because these kids are, you know, they're not the average kid, right.
So Ethiopia has a population of 110 million plus and we work with the government and we have our own application website to really select like the top top kids in the whole country.
So giving an example, Ethiopia has a national exam at the end of 12th grade.
And it's like think like the SAT, right. To get into Ethiopia University, but unlike the SAT where many kids each year get a perfect score, these exams are designed to be hard enough that they really do distinguish people at the very top.
So there's usually a unique person in the whole country who has the first high score.
There's a unique person with the second highest score, etc. No one ever gets a perfect score in the exams to arm. So we've had at least three kids, maybe more, be in the top three in the whole country who came through our program, right.
But really, really, really strong kids. So we don't do as much, maybe hand holding or, you know, I mean, we really throw everything at them. Like we're teaching them stuff that I was, when I was at Harvard, I used to be in the faculty at Harvard for six years before I moved to Berkeley.
So the kind of stuff I was teaching the kids at Harvard software year, I mean, I wasn't giving them the same intensity, but I was giving them pretty similar stuff to these to these Ethiopian high school students.
So in terms of getting them excited though, that part of the reason I chose algorithms instead of just like teaching them how to code is, you know, I'm excited about algorithms. So maybe I hope that like my excitement is contagious and infects them and makes them excited.
And I tell them about things that I think a high schooler wouldn't even realize, well, to realize to think about like, for example, you know, one of my lecturers is on multiply integers.
Okay. So we all learned how to multiply integers when we were little kids, right, in elementary school or before.
And we learned the so-called grade school algorithm, you write one number on top, the other number on the bottom, and then you start with the last digit, you multiply through, you write it down, you go to the next digit, you multiply through, you write it down, etc.
And then you add everything up at the end. So if the two numbers are multiplying each have end digits, then the total runtime of this is n squared.
So I teach them that actually this is not the best algorithm, you know, something like 50 years ago, there was this Russian math circle run by this guy, Kolmogorov.
And he believed that the n squared algorithm was the best possible and he didn't know how to prove it. So he asked his colleagues to try to prove it.
And I came back, this guy named Karatsuba, also a Russian mathematician, and showed Kolmogorov that actually n squared is not a limitation for multiply integers.
There's an algorithm whose runtime is something like n to the 1.585, specifically it's n to the log base 2 of 3.
Okay. And I teach them that algorithm. I teach them Karatsuba's algorithm to these high school kids. And, you know, and there, there have been improvements since then, right.
So nowadays, you can multiply integers in almost linear time, almost and log in time.
But yeah, I mean, I think it kind of maybe blows their minds that, oh, like this thing that I've known how to do since I was a little kid is actually not the best way to do something.
Awesome. Awesome. So it sounds like you still, you're still active and like during the kids each year. Yes, I mean, last year we had a cancel. Unfortunately, you do the pandemic. But yes, it's an annual thing now.
Awesome. Well, Zalani, thanks so much for joining us and sharing a bit about what you're up to. Thanks for having me.
